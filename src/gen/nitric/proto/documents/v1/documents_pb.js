// source: nitric/proto/documents/v1/documents.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.nitric.proto.documents.v1.Collection', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.Document', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentDeleteRequest', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentDeleteResponse', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentGetRequest', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentGetResponse', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentQueryRequest', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentQueryResponse', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentQueryStreamRequest', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentQueryStreamResponse', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentSetRequest', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.DocumentSetResponse', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.Expression', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.ExpressionValue', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.ExpressionValue.KindCase', null, global);
goog.exportSymbol('proto.nitric.proto.documents.v1.Key', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.Collection.displayName = 'proto.nitric.proto.documents.v1.Collection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.Key.displayName = 'proto.nitric.proto.documents.v1.Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.Document = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.Document, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.Document.displayName = 'proto.nitric.proto.documents.v1.Document';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.ExpressionValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_);
};
goog.inherits(proto.nitric.proto.documents.v1.ExpressionValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.ExpressionValue.displayName = 'proto.nitric.proto.documents.v1.ExpressionValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.Expression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.Expression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.Expression.displayName = 'proto.nitric.proto.documents.v1.Expression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentGetRequest.displayName = 'proto.nitric.proto.documents.v1.DocumentGetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentGetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentGetResponse.displayName = 'proto.nitric.proto.documents.v1.DocumentGetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentSetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentSetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentSetRequest.displayName = 'proto.nitric.proto.documents.v1.DocumentSetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentSetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentSetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentSetResponse.displayName = 'proto.nitric.proto.documents.v1.DocumentSetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentDeleteRequest.displayName = 'proto.nitric.proto.documents.v1.DocumentDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentDeleteResponse.displayName = 'proto.nitric.proto.documents.v1.DocumentDeleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.documents.v1.DocumentQueryRequest.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentQueryRequest.displayName = 'proto.nitric.proto.documents.v1.DocumentQueryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.documents.v1.DocumentQueryResponse.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentQueryResponse.displayName = 'proto.nitric.proto.documents.v1.DocumentQueryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentQueryStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.displayName = 'proto.nitric.proto.documents.v1.DocumentQueryStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.documents.v1.DocumentQueryStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.displayName = 'proto.nitric.proto.documents.v1.DocumentQueryStreamResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parent: (f = msg.getParent()) && proto.nitric.proto.documents.v1.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.Collection}
 */
proto.nitric.proto.documents.v1.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.Collection;
  return proto.nitric.proto.documents.v1.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.Collection}
 */
proto.nitric.proto.documents.v1.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.nitric.proto.documents.v1.Key;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Key.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.documents.v1.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nitric.proto.documents.v1.Collection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.documents.v1.Collection} returns this
 */
proto.nitric.proto.documents.v1.Collection.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Key parent = 2;
 * @return {?proto.nitric.proto.documents.v1.Key}
 */
proto.nitric.proto.documents.v1.Collection.prototype.getParent = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Key} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Key, 2));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Key|undefined} value
 * @return {!proto.nitric.proto.documents.v1.Collection} returns this
*/
proto.nitric.proto.documents.v1.Collection.prototype.setParent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.Collection} returns this
 */
proto.nitric.proto.documents.v1.Collection.prototype.clearParent = function() {
  return this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.Collection.prototype.hasParent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.nitric.proto.documents.v1.Collection.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.Key}
 */
proto.nitric.proto.documents.v1.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.Key;
  return proto.nitric.proto.documents.v1.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.Key}
 */
proto.nitric.proto.documents.v1.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.documents.v1.Collection;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.documents.v1.Collection.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Collection collection = 1;
 * @return {?proto.nitric.proto.documents.v1.Collection}
 */
proto.nitric.proto.documents.v1.Key.prototype.getCollection = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Collection} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Collection, 1));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Collection|undefined} value
 * @return {!proto.nitric.proto.documents.v1.Key} returns this
*/
proto.nitric.proto.documents.v1.Key.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.Key} returns this
 */
proto.nitric.proto.documents.v1.Key.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.Key.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.nitric.proto.documents.v1.Key.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.documents.v1.Key} returns this
 */
proto.nitric.proto.documents.v1.Key.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.Document.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.Document.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.Document} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.Document.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: (f = msg.getContent()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    key: (f = msg.getKey()) && proto.nitric.proto.documents.v1.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.Document}
 */
proto.nitric.proto.documents.v1.Document.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.Document;
  return proto.nitric.proto.documents.v1.Document.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.Document} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.Document}
 */
proto.nitric.proto.documents.v1.Document.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    case 2:
      var value = new proto.nitric.proto.documents.v1.Key;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.Document.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.Document.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.Document} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.Document.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.documents.v1.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct content = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.nitric.proto.documents.v1.Document.prototype.getContent = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.nitric.proto.documents.v1.Document} returns this
*/
proto.nitric.proto.documents.v1.Document.prototype.setContent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.Document} returns this
 */
proto.nitric.proto.documents.v1.Document.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.Document.prototype.hasContent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Key key = 2;
 * @return {?proto.nitric.proto.documents.v1.Key}
 */
proto.nitric.proto.documents.v1.Document.prototype.getKey = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Key} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Key, 2));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Key|undefined} value
 * @return {!proto.nitric.proto.documents.v1.Document} returns this
*/
proto.nitric.proto.documents.v1.Document.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.Document} returns this
 */
proto.nitric.proto.documents.v1.Document.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.Document.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.nitric.proto.documents.v1.ExpressionValue.KindCase = {
  KIND_NOT_SET: 0,
  INT_VALUE: 1,
  DOUBLE_VALUE: 2,
  STRING_VALUE: 3,
  BOOL_VALUE: 4
};

/**
 * @return {proto.nitric.proto.documents.v1.ExpressionValue.KindCase}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.getKindCase = function() {
  return /** @type {proto.nitric.proto.documents.v1.ExpressionValue.KindCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.ExpressionValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.ExpressionValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.ExpressionValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    intValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    stringValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue}
 */
proto.nitric.proto.documents.v1.ExpressionValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.ExpressionValue;
  return proto.nitric.proto.documents.v1.ExpressionValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.ExpressionValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue}
 */
proto.nitric.proto.documents.v1.ExpressionValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.ExpressionValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.ExpressionValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.ExpressionValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int64 int_value = 1;
 * @return {number}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue} returns this
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue} returns this
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double double_value = 2;
 * @return {number}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue} returns this
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.setDoubleValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue} returns this
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.clearDoubleValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string string_value = 3;
 * @return {string}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue} returns this
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue} returns this
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_value = 4;
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue} returns this
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.ExpressionValue} returns this
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.nitric.proto.documents.v1.ExpressionValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.ExpressionValue.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.Expression.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.Expression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.Expression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.Expression.toObject = function(includeInstance, msg) {
  var f, obj = {
    operand: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operator: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: (f = msg.getValue()) && proto.nitric.proto.documents.v1.ExpressionValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.Expression}
 */
proto.nitric.proto.documents.v1.Expression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.Expression;
  return proto.nitric.proto.documents.v1.Expression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.Expression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.Expression}
 */
proto.nitric.proto.documents.v1.Expression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperator(value);
      break;
    case 3:
      var value = new proto.nitric.proto.documents.v1.ExpressionValue;
      reader.readMessage(value,proto.nitric.proto.documents.v1.ExpressionValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.Expression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.Expression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.Expression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.Expression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperator();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.proto.documents.v1.ExpressionValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string operand = 1;
 * @return {string}
 */
proto.nitric.proto.documents.v1.Expression.prototype.getOperand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.documents.v1.Expression} returns this
 */
proto.nitric.proto.documents.v1.Expression.prototype.setOperand = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string operator = 2;
 * @return {string}
 */
proto.nitric.proto.documents.v1.Expression.prototype.getOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.documents.v1.Expression} returns this
 */
proto.nitric.proto.documents.v1.Expression.prototype.setOperator = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ExpressionValue value = 3;
 * @return {?proto.nitric.proto.documents.v1.ExpressionValue}
 */
proto.nitric.proto.documents.v1.Expression.prototype.getValue = function() {
  return /** @type{?proto.nitric.proto.documents.v1.ExpressionValue} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.ExpressionValue, 3));
};


/**
 * @param {?proto.nitric.proto.documents.v1.ExpressionValue|undefined} value
 * @return {!proto.nitric.proto.documents.v1.Expression} returns this
*/
proto.nitric.proto.documents.v1.Expression.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.Expression} returns this
 */
proto.nitric.proto.documents.v1.Expression.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.Expression.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.nitric.proto.documents.v1.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentGetRequest}
 */
proto.nitric.proto.documents.v1.DocumentGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentGetRequest;
  return proto.nitric.proto.documents.v1.DocumentGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentGetRequest}
 */
proto.nitric.proto.documents.v1.DocumentGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.documents.v1.Key;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.documents.v1.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional Key key = 1;
 * @return {?proto.nitric.proto.documents.v1.Key}
 */
proto.nitric.proto.documents.v1.DocumentGetRequest.prototype.getKey = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Key} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Key, 1));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Key|undefined} value
 * @return {!proto.nitric.proto.documents.v1.DocumentGetRequest} returns this
*/
proto.nitric.proto.documents.v1.DocumentGetRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.DocumentGetRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentGetRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.DocumentGetRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentGetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentGetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentGetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentGetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    document: (f = msg.getDocument()) && proto.nitric.proto.documents.v1.Document.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentGetResponse}
 */
proto.nitric.proto.documents.v1.DocumentGetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentGetResponse;
  return proto.nitric.proto.documents.v1.DocumentGetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentGetResponse}
 */
proto.nitric.proto.documents.v1.DocumentGetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.documents.v1.Document;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Document.deserializeBinaryFromReader);
      msg.setDocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentGetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentGetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentGetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.documents.v1.Document.serializeBinaryToWriter
    );
  }
};


/**
 * optional Document document = 1;
 * @return {?proto.nitric.proto.documents.v1.Document}
 */
proto.nitric.proto.documents.v1.DocumentGetResponse.prototype.getDocument = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Document} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Document, 1));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Document|undefined} value
 * @return {!proto.nitric.proto.documents.v1.DocumentGetResponse} returns this
*/
proto.nitric.proto.documents.v1.DocumentGetResponse.prototype.setDocument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.DocumentGetResponse} returns this
 */
proto.nitric.proto.documents.v1.DocumentGetResponse.prototype.clearDocument = function() {
  return this.setDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.DocumentGetResponse.prototype.hasDocument = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentSetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentSetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.nitric.proto.documents.v1.Key.toObject(includeInstance, f),
    content: (f = msg.getContent()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentSetRequest}
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentSetRequest;
  return proto.nitric.proto.documents.v1.DocumentSetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentSetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentSetRequest}
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.documents.v1.Key;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentSetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentSetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.documents.v1.Key.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional Key key = 1;
 * @return {?proto.nitric.proto.documents.v1.Key}
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.getKey = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Key} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Key, 1));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Key|undefined} value
 * @return {!proto.nitric.proto.documents.v1.DocumentSetRequest} returns this
*/
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.DocumentSetRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct content = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.getContent = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.nitric.proto.documents.v1.DocumentSetRequest} returns this
*/
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.setContent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.DocumentSetRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.DocumentSetRequest.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentSetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentSetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentSetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentSetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentSetResponse}
 */
proto.nitric.proto.documents.v1.DocumentSetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentSetResponse;
  return proto.nitric.proto.documents.v1.DocumentSetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentSetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentSetResponse}
 */
proto.nitric.proto.documents.v1.DocumentSetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentSetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentSetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentSetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentSetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.nitric.proto.documents.v1.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentDeleteRequest}
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentDeleteRequest;
  return proto.nitric.proto.documents.v1.DocumentDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentDeleteRequest}
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.documents.v1.Key;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.documents.v1.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional Key key = 1;
 * @return {?proto.nitric.proto.documents.v1.Key}
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest.prototype.getKey = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Key} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Key, 1));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Key|undefined} value
 * @return {!proto.nitric.proto.documents.v1.DocumentDeleteRequest} returns this
*/
proto.nitric.proto.documents.v1.DocumentDeleteRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.DocumentDeleteRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.DocumentDeleteRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentDeleteResponse}
 */
proto.nitric.proto.documents.v1.DocumentDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentDeleteResponse;
  return proto.nitric.proto.documents.v1.DocumentDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentDeleteResponse}
 */
proto.nitric.proto.documents.v1.DocumentDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.nitric.proto.documents.v1.Collection.toObject(includeInstance, f),
    expressionsList: jspb.Message.toObjectList(msg.getExpressionsList(),
    proto.nitric.proto.documents.v1.Expression.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pagingTokenMap: (f = msg.getPagingTokenMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryRequest}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentQueryRequest;
  return proto.nitric.proto.documents.v1.DocumentQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryRequest}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.documents.v1.Collection;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 3:
      var value = new proto.nitric.proto.documents.v1.Expression;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Expression.deserializeBinaryFromReader);
      msg.addExpressions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 5:
      var value = msg.getPagingTokenMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.documents.v1.Collection.serializeBinaryToWriter
    );
  }
  f = message.getExpressionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nitric.proto.documents.v1.Expression.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPagingTokenMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional Collection collection = 1;
 * @return {?proto.nitric.proto.documents.v1.Collection}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.getCollection = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Collection} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Collection, 1));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Collection|undefined} value
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryRequest} returns this
*/
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Expression expressions = 3;
 * @return {!Array<!proto.nitric.proto.documents.v1.Expression>}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.getExpressionsList = function() {
  return /** @type{!Array<!proto.nitric.proto.documents.v1.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.proto.documents.v1.Expression, 3));
};


/**
 * @param {!Array<!proto.nitric.proto.documents.v1.Expression>} value
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryRequest} returns this
*/
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.setExpressionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nitric.proto.documents.v1.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.documents.v1.Expression}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.addExpressions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nitric.proto.documents.v1.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.clearExpressionsList = function() {
  return this.setExpressionsList([]);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * map<string, string> paging_token = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.getPagingTokenMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryRequest.prototype.clearPagingTokenMap = function() {
  this.getPagingTokenMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentsList: jspb.Message.toObjectList(msg.getDocumentsList(),
    proto.nitric.proto.documents.v1.Document.toObject, includeInstance),
    pagingTokenMap: (f = msg.getPagingTokenMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryResponse}
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentQueryResponse;
  return proto.nitric.proto.documents.v1.DocumentQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryResponse}
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.documents.v1.Document;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Document.deserializeBinaryFromReader);
      msg.addDocuments(value);
      break;
    case 2:
      var value = msg.getPagingTokenMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentQueryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nitric.proto.documents.v1.Document.serializeBinaryToWriter
    );
  }
  f = message.getPagingTokenMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * repeated Document documents = 1;
 * @return {!Array<!proto.nitric.proto.documents.v1.Document>}
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.prototype.getDocumentsList = function() {
  return /** @type{!Array<!proto.nitric.proto.documents.v1.Document>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.proto.documents.v1.Document, 1));
};


/**
 * @param {!Array<!proto.nitric.proto.documents.v1.Document>} value
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryResponse} returns this
*/
proto.nitric.proto.documents.v1.DocumentQueryResponse.prototype.setDocumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nitric.proto.documents.v1.Document=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.documents.v1.Document}
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.prototype.addDocuments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nitric.proto.documents.v1.Document, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryResponse} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.prototype.clearDocumentsList = function() {
  return this.setDocumentsList([]);
};


/**
 * map<string, string> paging_token = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.prototype.getPagingTokenMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryResponse} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryResponse.prototype.clearPagingTokenMap = function() {
  this.getPagingTokenMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.nitric.proto.documents.v1.Collection.toObject(includeInstance, f),
    expressionsList: jspb.Message.toObjectList(msg.getExpressionsList(),
    proto.nitric.proto.documents.v1.Expression.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentQueryStreamRequest;
  return proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.documents.v1.Collection;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 3:
      var value = new proto.nitric.proto.documents.v1.Expression;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Expression.deserializeBinaryFromReader);
      msg.addExpressions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.documents.v1.Collection.serializeBinaryToWriter
    );
  }
  f = message.getExpressionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nitric.proto.documents.v1.Expression.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional Collection collection = 1;
 * @return {?proto.nitric.proto.documents.v1.Collection}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.getCollection = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Collection} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Collection, 1));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Collection|undefined} value
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest} returns this
*/
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Expression expressions = 3;
 * @return {!Array<!proto.nitric.proto.documents.v1.Expression>}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.getExpressionsList = function() {
  return /** @type{!Array<!proto.nitric.proto.documents.v1.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.proto.documents.v1.Expression, 3));
};


/**
 * @param {!Array<!proto.nitric.proto.documents.v1.Expression>} value
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest} returns this
*/
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.setExpressionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nitric.proto.documents.v1.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.documents.v1.Expression}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.addExpressions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nitric.proto.documents.v1.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.clearExpressionsList = function() {
  return this.setExpressionsList([]);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamRequest} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    document: (f = msg.getDocument()) && proto.nitric.proto.documents.v1.Document.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamResponse}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.documents.v1.DocumentQueryStreamResponse;
  return proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamResponse}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.documents.v1.Document;
      reader.readMessage(value,proto.nitric.proto.documents.v1.Document.deserializeBinaryFromReader);
      msg.setDocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.documents.v1.DocumentQueryStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.documents.v1.Document.serializeBinaryToWriter
    );
  }
};


/**
 * optional Document document = 1;
 * @return {?proto.nitric.proto.documents.v1.Document}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.prototype.getDocument = function() {
  return /** @type{?proto.nitric.proto.documents.v1.Document} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.documents.v1.Document, 1));
};


/**
 * @param {?proto.nitric.proto.documents.v1.Document|undefined} value
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamResponse} returns this
*/
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.prototype.setDocument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.documents.v1.DocumentQueryStreamResponse} returns this
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.prototype.clearDocument = function() {
  return this.setDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.documents.v1.DocumentQueryStreamResponse.prototype.hasDocument = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.nitric.proto.documents.v1);
