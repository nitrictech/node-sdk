// source: nitric/proto/secrets/v1/secrets.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.nitric.proto.secrets.v1.Secret', null, global);
goog.exportSymbol('proto.nitric.proto.secrets.v1.SecretAccessRequest', null, global);
goog.exportSymbol('proto.nitric.proto.secrets.v1.SecretAccessResponse', null, global);
goog.exportSymbol('proto.nitric.proto.secrets.v1.SecretPutRequest', null, global);
goog.exportSymbol('proto.nitric.proto.secrets.v1.SecretPutResponse', null, global);
goog.exportSymbol('proto.nitric.proto.secrets.v1.SecretVersion', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.secrets.v1.SecretPutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.secrets.v1.SecretPutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.secrets.v1.SecretPutRequest.displayName = 'proto.nitric.proto.secrets.v1.SecretPutRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.secrets.v1.SecretPutResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.secrets.v1.SecretPutResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.secrets.v1.SecretPutResponse.displayName = 'proto.nitric.proto.secrets.v1.SecretPutResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.secrets.v1.SecretAccessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.secrets.v1.SecretAccessRequest.displayName = 'proto.nitric.proto.secrets.v1.SecretAccessRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.secrets.v1.SecretAccessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.secrets.v1.SecretAccessResponse.displayName = 'proto.nitric.proto.secrets.v1.SecretAccessResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.secrets.v1.Secret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.secrets.v1.Secret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.secrets.v1.Secret.displayName = 'proto.nitric.proto.secrets.v1.Secret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.secrets.v1.SecretVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.secrets.v1.SecretVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.secrets.v1.SecretVersion.displayName = 'proto.nitric.proto.secrets.v1.SecretVersion';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.secrets.v1.SecretPutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.secrets.v1.SecretPutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secret: (f = msg.getSecret()) && proto.nitric.proto.secrets.v1.Secret.toObject(includeInstance, f),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.secrets.v1.SecretPutRequest}
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.secrets.v1.SecretPutRequest;
  return proto.nitric.proto.secrets.v1.SecretPutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.secrets.v1.SecretPutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.secrets.v1.SecretPutRequest}
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.secrets.v1.Secret;
      reader.readMessage(value,proto.nitric.proto.secrets.v1.Secret.deserializeBinaryFromReader);
      msg.setSecret(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.secrets.v1.SecretPutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.secrets.v1.SecretPutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecret();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.secrets.v1.Secret.serializeBinaryToWriter
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Secret secret = 1;
 * @return {?proto.nitric.proto.secrets.v1.Secret}
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.getSecret = function() {
  return /** @type{?proto.nitric.proto.secrets.v1.Secret} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.secrets.v1.Secret, 1));
};


/**
 * @param {?proto.nitric.proto.secrets.v1.Secret|undefined} value
 * @return {!proto.nitric.proto.secrets.v1.SecretPutRequest} returns this
*/
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.setSecret = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.secrets.v1.SecretPutRequest} returns this
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.clearSecret = function() {
  return this.setSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.proto.secrets.v1.SecretPutRequest} returns this
 */
proto.nitric.proto.secrets.v1.SecretPutRequest.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.secrets.v1.SecretPutResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.secrets.v1.SecretPutResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.secrets.v1.SecretPutResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretPutResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretVersion: (f = msg.getSecretVersion()) && proto.nitric.proto.secrets.v1.SecretVersion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.secrets.v1.SecretPutResponse}
 */
proto.nitric.proto.secrets.v1.SecretPutResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.secrets.v1.SecretPutResponse;
  return proto.nitric.proto.secrets.v1.SecretPutResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.secrets.v1.SecretPutResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.secrets.v1.SecretPutResponse}
 */
proto.nitric.proto.secrets.v1.SecretPutResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.secrets.v1.SecretVersion;
      reader.readMessage(value,proto.nitric.proto.secrets.v1.SecretVersion.deserializeBinaryFromReader);
      msg.setSecretVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.secrets.v1.SecretPutResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.secrets.v1.SecretPutResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.secrets.v1.SecretPutResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretPutResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.secrets.v1.SecretVersion.serializeBinaryToWriter
    );
  }
};


/**
 * optional SecretVersion secret_version = 1;
 * @return {?proto.nitric.proto.secrets.v1.SecretVersion}
 */
proto.nitric.proto.secrets.v1.SecretPutResponse.prototype.getSecretVersion = function() {
  return /** @type{?proto.nitric.proto.secrets.v1.SecretVersion} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.secrets.v1.SecretVersion, 1));
};


/**
 * @param {?proto.nitric.proto.secrets.v1.SecretVersion|undefined} value
 * @return {!proto.nitric.proto.secrets.v1.SecretPutResponse} returns this
*/
proto.nitric.proto.secrets.v1.SecretPutResponse.prototype.setSecretVersion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.secrets.v1.SecretPutResponse} returns this
 */
proto.nitric.proto.secrets.v1.SecretPutResponse.prototype.clearSecretVersion = function() {
  return this.setSecretVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.secrets.v1.SecretPutResponse.prototype.hasSecretVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.secrets.v1.SecretAccessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.secrets.v1.SecretAccessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretVersion: (f = msg.getSecretVersion()) && proto.nitric.proto.secrets.v1.SecretVersion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.secrets.v1.SecretAccessRequest}
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.secrets.v1.SecretAccessRequest;
  return proto.nitric.proto.secrets.v1.SecretAccessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.secrets.v1.SecretAccessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.secrets.v1.SecretAccessRequest}
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.secrets.v1.SecretVersion;
      reader.readMessage(value,proto.nitric.proto.secrets.v1.SecretVersion.deserializeBinaryFromReader);
      msg.setSecretVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.secrets.v1.SecretAccessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.secrets.v1.SecretAccessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.secrets.v1.SecretVersion.serializeBinaryToWriter
    );
  }
};


/**
 * optional SecretVersion secret_version = 1;
 * @return {?proto.nitric.proto.secrets.v1.SecretVersion}
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest.prototype.getSecretVersion = function() {
  return /** @type{?proto.nitric.proto.secrets.v1.SecretVersion} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.secrets.v1.SecretVersion, 1));
};


/**
 * @param {?proto.nitric.proto.secrets.v1.SecretVersion|undefined} value
 * @return {!proto.nitric.proto.secrets.v1.SecretAccessRequest} returns this
*/
proto.nitric.proto.secrets.v1.SecretAccessRequest.prototype.setSecretVersion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.secrets.v1.SecretAccessRequest} returns this
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest.prototype.clearSecretVersion = function() {
  return this.setSecretVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.secrets.v1.SecretAccessRequest.prototype.hasSecretVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.secrets.v1.SecretAccessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.secrets.v1.SecretAccessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretVersion: (f = msg.getSecretVersion()) && proto.nitric.proto.secrets.v1.SecretVersion.toObject(includeInstance, f),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.secrets.v1.SecretAccessResponse}
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.secrets.v1.SecretAccessResponse;
  return proto.nitric.proto.secrets.v1.SecretAccessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.secrets.v1.SecretAccessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.secrets.v1.SecretAccessResponse}
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.secrets.v1.SecretVersion;
      reader.readMessage(value,proto.nitric.proto.secrets.v1.SecretVersion.deserializeBinaryFromReader);
      msg.setSecretVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.secrets.v1.SecretAccessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.secrets.v1.SecretAccessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.secrets.v1.SecretVersion.serializeBinaryToWriter
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional SecretVersion secret_version = 1;
 * @return {?proto.nitric.proto.secrets.v1.SecretVersion}
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.getSecretVersion = function() {
  return /** @type{?proto.nitric.proto.secrets.v1.SecretVersion} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.secrets.v1.SecretVersion, 1));
};


/**
 * @param {?proto.nitric.proto.secrets.v1.SecretVersion|undefined} value
 * @return {!proto.nitric.proto.secrets.v1.SecretAccessResponse} returns this
*/
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.setSecretVersion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.secrets.v1.SecretAccessResponse} returns this
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.clearSecretVersion = function() {
  return this.setSecretVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.hasSecretVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.proto.secrets.v1.SecretAccessResponse} returns this
 */
proto.nitric.proto.secrets.v1.SecretAccessResponse.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.secrets.v1.Secret.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.secrets.v1.Secret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.secrets.v1.Secret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.Secret.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.secrets.v1.Secret}
 */
proto.nitric.proto.secrets.v1.Secret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.secrets.v1.Secret;
  return proto.nitric.proto.secrets.v1.Secret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.secrets.v1.Secret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.secrets.v1.Secret}
 */
proto.nitric.proto.secrets.v1.Secret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.secrets.v1.Secret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.secrets.v1.Secret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.secrets.v1.Secret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.Secret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nitric.proto.secrets.v1.Secret.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.secrets.v1.Secret} returns this
 */
proto.nitric.proto.secrets.v1.Secret.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.secrets.v1.SecretVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.secrets.v1.SecretVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.secrets.v1.SecretVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    secret: (f = msg.getSecret()) && proto.nitric.proto.secrets.v1.Secret.toObject(includeInstance, f),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.secrets.v1.SecretVersion}
 */
proto.nitric.proto.secrets.v1.SecretVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.secrets.v1.SecretVersion;
  return proto.nitric.proto.secrets.v1.SecretVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.secrets.v1.SecretVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.secrets.v1.SecretVersion}
 */
proto.nitric.proto.secrets.v1.SecretVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.secrets.v1.Secret;
      reader.readMessage(value,proto.nitric.proto.secrets.v1.Secret.deserializeBinaryFromReader);
      msg.setSecret(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.secrets.v1.SecretVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.secrets.v1.SecretVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.secrets.v1.SecretVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.secrets.v1.SecretVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecret();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.secrets.v1.Secret.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Secret secret = 1;
 * @return {?proto.nitric.proto.secrets.v1.Secret}
 */
proto.nitric.proto.secrets.v1.SecretVersion.prototype.getSecret = function() {
  return /** @type{?proto.nitric.proto.secrets.v1.Secret} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.secrets.v1.Secret, 1));
};


/**
 * @param {?proto.nitric.proto.secrets.v1.Secret|undefined} value
 * @return {!proto.nitric.proto.secrets.v1.SecretVersion} returns this
*/
proto.nitric.proto.secrets.v1.SecretVersion.prototype.setSecret = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.secrets.v1.SecretVersion} returns this
 */
proto.nitric.proto.secrets.v1.SecretVersion.prototype.clearSecret = function() {
  return this.setSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.secrets.v1.SecretVersion.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.nitric.proto.secrets.v1.SecretVersion.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.secrets.v1.SecretVersion} returns this
 */
proto.nitric.proto.secrets.v1.SecretVersion.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.nitric.proto.secrets.v1);
