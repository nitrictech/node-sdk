// source: nitric/proto/apis/v1/apis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.nitric.proto.apis.v1.ApiDetailsRequest', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.ApiDetailsResponse', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.ApiWorkerOptions', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.ApiWorkerScopes', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.ClientMessage', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.ClientMessage.ContentCase', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.HeaderValue', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.HttpRequest', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.HttpResponse', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.QueryValue', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.RegistrationRequest', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.RegistrationResponse', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.ServerMessage', null, global);
goog.exportSymbol('proto.nitric.proto.apis.v1.ServerMessage.ContentCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.ApiDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.apis.v1.ApiDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.ApiDetailsRequest.displayName = 'proto.nitric.proto.apis.v1.ApiDetailsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.ApiDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.apis.v1.ApiDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.ApiDetailsResponse.displayName = 'proto.nitric.proto.apis.v1.ApiDetailsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.apis.v1.ClientMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.apis.v1.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.ClientMessage.displayName = 'proto.nitric.proto.apis.v1.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.HeaderValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.apis.v1.HeaderValue.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.apis.v1.HeaderValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.HeaderValue.displayName = 'proto.nitric.proto.apis.v1.HeaderValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.QueryValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.apis.v1.QueryValue.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.apis.v1.QueryValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.QueryValue.displayName = 'proto.nitric.proto.apis.v1.QueryValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.HttpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.apis.v1.HttpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.HttpRequest.displayName = 'proto.nitric.proto.apis.v1.HttpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.HttpResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.apis.v1.HttpResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.HttpResponse.displayName = 'proto.nitric.proto.apis.v1.HttpResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.apis.v1.ServerMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.apis.v1.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.ServerMessage.displayName = 'proto.nitric.proto.apis.v1.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.RegistrationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.apis.v1.RegistrationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.RegistrationResponse.displayName = 'proto.nitric.proto.apis.v1.RegistrationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.apis.v1.ApiWorkerScopes.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.apis.v1.ApiWorkerScopes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.ApiWorkerScopes.displayName = 'proto.nitric.proto.apis.v1.ApiWorkerScopes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.apis.v1.ApiWorkerOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.ApiWorkerOptions.displayName = 'proto.nitric.proto.apis.v1.ApiWorkerOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.apis.v1.RegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.apis.v1.RegistrationRequest.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.apis.v1.RegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.apis.v1.RegistrationRequest.displayName = 'proto.nitric.proto.apis.v1.RegistrationRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.ApiDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.ApiDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.ApiDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ApiDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apiName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.ApiDetailsRequest}
 */
proto.nitric.proto.apis.v1.ApiDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.ApiDetailsRequest;
  return proto.nitric.proto.apis.v1.ApiDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.ApiDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.ApiDetailsRequest}
 */
proto.nitric.proto.apis.v1.ApiDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.ApiDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.ApiDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.ApiDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ApiDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string api_name = 1;
 * @return {string}
 */
proto.nitric.proto.apis.v1.ApiDetailsRequest.prototype.getApiName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.apis.v1.ApiDetailsRequest} returns this
 */
proto.nitric.proto.apis.v1.ApiDetailsRequest.prototype.setApiName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.ApiDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.ApiDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.ApiDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ApiDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.ApiDetailsResponse}
 */
proto.nitric.proto.apis.v1.ApiDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.ApiDetailsResponse;
  return proto.nitric.proto.apis.v1.ApiDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.ApiDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.ApiDetailsResponse}
 */
proto.nitric.proto.apis.v1.ApiDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.ApiDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.ApiDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.ApiDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ApiDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.nitric.proto.apis.v1.ApiDetailsResponse.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.apis.v1.ApiDetailsResponse} returns this
 */
proto.nitric.proto.apis.v1.ApiDetailsResponse.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.apis.v1.ClientMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.proto.apis.v1.ClientMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  REGISTRATION_REQUEST: 2,
  HTTP_RESPONSE: 3
};

/**
 * @return {proto.nitric.proto.apis.v1.ClientMessage.ContentCase}
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.apis.v1.ClientMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.apis.v1.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registrationRequest: (f = msg.getRegistrationRequest()) && proto.nitric.proto.apis.v1.RegistrationRequest.toObject(includeInstance, f),
    httpResponse: (f = msg.getHttpResponse()) && proto.nitric.proto.apis.v1.HttpResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.ClientMessage}
 */
proto.nitric.proto.apis.v1.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.ClientMessage;
  return proto.nitric.proto.apis.v1.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.ClientMessage}
 */
proto.nitric.proto.apis.v1.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.proto.apis.v1.RegistrationRequest;
      reader.readMessage(value,proto.nitric.proto.apis.v1.RegistrationRequest.deserializeBinaryFromReader);
      msg.setRegistrationRequest(value);
      break;
    case 3:
      var value = new proto.nitric.proto.apis.v1.HttpResponse;
      reader.readMessage(value,proto.nitric.proto.apis.v1.HttpResponse.deserializeBinaryFromReader);
      msg.setHttpResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistrationRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.apis.v1.RegistrationRequest.serializeBinaryToWriter
    );
  }
  f = message.getHttpResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.proto.apis.v1.HttpResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.apis.v1.ClientMessage} returns this
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationRequest registration_request = 2;
 * @return {?proto.nitric.proto.apis.v1.RegistrationRequest}
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.getRegistrationRequest = function() {
  return /** @type{?proto.nitric.proto.apis.v1.RegistrationRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.apis.v1.RegistrationRequest, 2));
};


/**
 * @param {?proto.nitric.proto.apis.v1.RegistrationRequest|undefined} value
 * @return {!proto.nitric.proto.apis.v1.ClientMessage} returns this
*/
proto.nitric.proto.apis.v1.ClientMessage.prototype.setRegistrationRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.proto.apis.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.apis.v1.ClientMessage} returns this
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.clearRegistrationRequest = function() {
  return this.setRegistrationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.hasRegistrationRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HttpResponse http_response = 3;
 * @return {?proto.nitric.proto.apis.v1.HttpResponse}
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.getHttpResponse = function() {
  return /** @type{?proto.nitric.proto.apis.v1.HttpResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.apis.v1.HttpResponse, 3));
};


/**
 * @param {?proto.nitric.proto.apis.v1.HttpResponse|undefined} value
 * @return {!proto.nitric.proto.apis.v1.ClientMessage} returns this
*/
proto.nitric.proto.apis.v1.ClientMessage.prototype.setHttpResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.proto.apis.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.apis.v1.ClientMessage} returns this
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.clearHttpResponse = function() {
  return this.setHttpResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.apis.v1.ClientMessage.prototype.hasHttpResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.apis.v1.HeaderValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.HeaderValue.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.HeaderValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.HeaderValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.HeaderValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.HeaderValue}
 */
proto.nitric.proto.apis.v1.HeaderValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.HeaderValue;
  return proto.nitric.proto.apis.v1.HeaderValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.HeaderValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.HeaderValue}
 */
proto.nitric.proto.apis.v1.HeaderValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.HeaderValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.HeaderValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.HeaderValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.HeaderValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string value = 1;
 * @return {!Array<string>}
 */
proto.nitric.proto.apis.v1.HeaderValue.prototype.getValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.proto.apis.v1.HeaderValue} returns this
 */
proto.nitric.proto.apis.v1.HeaderValue.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.apis.v1.HeaderValue} returns this
 */
proto.nitric.proto.apis.v1.HeaderValue.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.apis.v1.HeaderValue} returns this
 */
proto.nitric.proto.apis.v1.HeaderValue.prototype.clearValueList = function() {
  return this.setValueList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.apis.v1.QueryValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.QueryValue.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.QueryValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.QueryValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.QueryValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.QueryValue}
 */
proto.nitric.proto.apis.v1.QueryValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.QueryValue;
  return proto.nitric.proto.apis.v1.QueryValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.QueryValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.QueryValue}
 */
proto.nitric.proto.apis.v1.QueryValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.QueryValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.QueryValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.QueryValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.QueryValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string value = 1;
 * @return {!Array<string>}
 */
proto.nitric.proto.apis.v1.QueryValue.prototype.getValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.proto.apis.v1.QueryValue} returns this
 */
proto.nitric.proto.apis.v1.QueryValue.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.apis.v1.QueryValue} returns this
 */
proto.nitric.proto.apis.v1.QueryValue.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.apis.v1.QueryValue} returns this
 */
proto.nitric.proto.apis.v1.QueryValue.prototype.clearValueList = function() {
  return this.setValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.HttpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.HttpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.HttpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, proto.nitric.proto.apis.v1.HeaderValue.toObject) : [],
    queryParamsMap: (f = msg.getQueryParamsMap()) ? f.toObject(includeInstance, proto.nitric.proto.apis.v1.QueryValue.toObject) : [],
    pathParamsMap: (f = msg.getPathParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.HttpRequest}
 */
proto.nitric.proto.apis.v1.HttpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.HttpRequest;
  return proto.nitric.proto.apis.v1.HttpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.HttpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.HttpRequest}
 */
proto.nitric.proto.apis.v1.HttpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.proto.apis.v1.HeaderValue.deserializeBinaryFromReader, "", new proto.nitric.proto.apis.v1.HeaderValue());
         });
      break;
    case 4:
      var value = msg.getQueryParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.proto.apis.v1.QueryValue.deserializeBinaryFromReader, "", new proto.nitric.proto.apis.v1.QueryValue());
         });
      break;
    case 5:
      var value = msg.getPathParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.HttpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.HttpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.HttpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.proto.apis.v1.HeaderValue.serializeBinaryToWriter);
  }
  f = message.getQueryParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.proto.apis.v1.QueryValue.serializeBinaryToWriter);
  }
  f = message.getPathParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.apis.v1.HttpRequest} returns this
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.apis.v1.HttpRequest} returns this
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, HeaderValue> headers = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.proto.apis.v1.HeaderValue>}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.proto.apis.v1.HeaderValue>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.nitric.proto.apis.v1.HeaderValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.proto.apis.v1.HttpRequest} returns this
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;};


/**
 * map<string, QueryValue> query_params = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.proto.apis.v1.QueryValue>}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.getQueryParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.proto.apis.v1.QueryValue>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.nitric.proto.apis.v1.QueryValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.proto.apis.v1.HttpRequest} returns this
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.clearQueryParamsMap = function() {
  this.getQueryParamsMap().clear();
  return this;};


/**
 * map<string, string> path_params = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.getPathParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.proto.apis.v1.HttpRequest} returns this
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.clearPathParamsMap = function() {
  this.getPathParamsMap().clear();
  return this;};


/**
 * optional bytes body = 6;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes body = 6;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.proto.apis.v1.HttpRequest} returns this
 */
proto.nitric.proto.apis.v1.HttpRequest.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.HttpResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.HttpResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.HttpResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, proto.nitric.proto.apis.v1.HeaderValue.toObject) : [],
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.HttpResponse}
 */
proto.nitric.proto.apis.v1.HttpResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.HttpResponse;
  return proto.nitric.proto.apis.v1.HttpResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.HttpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.HttpResponse}
 */
proto.nitric.proto.apis.v1.HttpResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.proto.apis.v1.HeaderValue.deserializeBinaryFromReader, "", new proto.nitric.proto.apis.v1.HeaderValue());
         });
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.HttpResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.HttpResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.HttpResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.proto.apis.v1.HeaderValue.serializeBinaryToWriter);
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.proto.apis.v1.HttpResponse} returns this
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, HeaderValue> headers = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.proto.apis.v1.HeaderValue>}
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.proto.apis.v1.HeaderValue>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.nitric.proto.apis.v1.HeaderValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.proto.apis.v1.HttpResponse} returns this
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;};


/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.proto.apis.v1.HttpResponse} returns this
 */
proto.nitric.proto.apis.v1.HttpResponse.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.apis.v1.ServerMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.proto.apis.v1.ServerMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  REGISTRATION_RESPONSE: 2,
  HTTP_REQUEST: 3
};

/**
 * @return {proto.nitric.proto.apis.v1.ServerMessage.ContentCase}
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.apis.v1.ServerMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.apis.v1.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registrationResponse: (f = msg.getRegistrationResponse()) && proto.nitric.proto.apis.v1.RegistrationResponse.toObject(includeInstance, f),
    httpRequest: (f = msg.getHttpRequest()) && proto.nitric.proto.apis.v1.HttpRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.ServerMessage}
 */
proto.nitric.proto.apis.v1.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.ServerMessage;
  return proto.nitric.proto.apis.v1.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.ServerMessage}
 */
proto.nitric.proto.apis.v1.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.proto.apis.v1.RegistrationResponse;
      reader.readMessage(value,proto.nitric.proto.apis.v1.RegistrationResponse.deserializeBinaryFromReader);
      msg.setRegistrationResponse(value);
      break;
    case 3:
      var value = new proto.nitric.proto.apis.v1.HttpRequest;
      reader.readMessage(value,proto.nitric.proto.apis.v1.HttpRequest.deserializeBinaryFromReader);
      msg.setHttpRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistrationResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.apis.v1.RegistrationResponse.serializeBinaryToWriter
    );
  }
  f = message.getHttpRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.proto.apis.v1.HttpRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.apis.v1.ServerMessage} returns this
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationResponse registration_response = 2;
 * @return {?proto.nitric.proto.apis.v1.RegistrationResponse}
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.getRegistrationResponse = function() {
  return /** @type{?proto.nitric.proto.apis.v1.RegistrationResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.apis.v1.RegistrationResponse, 2));
};


/**
 * @param {?proto.nitric.proto.apis.v1.RegistrationResponse|undefined} value
 * @return {!proto.nitric.proto.apis.v1.ServerMessage} returns this
*/
proto.nitric.proto.apis.v1.ServerMessage.prototype.setRegistrationResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.proto.apis.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.apis.v1.ServerMessage} returns this
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.clearRegistrationResponse = function() {
  return this.setRegistrationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.hasRegistrationResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HttpRequest http_request = 3;
 * @return {?proto.nitric.proto.apis.v1.HttpRequest}
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.getHttpRequest = function() {
  return /** @type{?proto.nitric.proto.apis.v1.HttpRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.apis.v1.HttpRequest, 3));
};


/**
 * @param {?proto.nitric.proto.apis.v1.HttpRequest|undefined} value
 * @return {!proto.nitric.proto.apis.v1.ServerMessage} returns this
*/
proto.nitric.proto.apis.v1.ServerMessage.prototype.setHttpRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.proto.apis.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.apis.v1.ServerMessage} returns this
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.clearHttpRequest = function() {
  return this.setHttpRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.apis.v1.ServerMessage.prototype.hasHttpRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.RegistrationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.RegistrationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.RegistrationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.RegistrationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.RegistrationResponse}
 */
proto.nitric.proto.apis.v1.RegistrationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.RegistrationResponse;
  return proto.nitric.proto.apis.v1.RegistrationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.RegistrationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.RegistrationResponse}
 */
proto.nitric.proto.apis.v1.RegistrationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.RegistrationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.RegistrationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.RegistrationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.RegistrationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.ApiWorkerScopes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.ApiWorkerScopes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.ApiWorkerScopes}
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.ApiWorkerScopes;
  return proto.nitric.proto.apis.v1.ApiWorkerScopes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.ApiWorkerScopes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.ApiWorkerScopes}
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addScopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.ApiWorkerScopes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.ApiWorkerScopes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string scopes = 1;
 * @return {!Array<string>}
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.prototype.getScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.proto.apis.v1.ApiWorkerScopes} returns this
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.prototype.setScopesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.apis.v1.ApiWorkerScopes} returns this
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.prototype.addScopes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.apis.v1.ApiWorkerScopes} returns this
 */
proto.nitric.proto.apis.v1.ApiWorkerScopes.prototype.clearScopesList = function() {
  return this.setScopesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.ApiWorkerOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.ApiWorkerOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    securityMap: (f = msg.getSecurityMap()) ? f.toObject(includeInstance, proto.nitric.proto.apis.v1.ApiWorkerScopes.toObject) : [],
    securityDisabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.ApiWorkerOptions}
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.ApiWorkerOptions;
  return proto.nitric.proto.apis.v1.ApiWorkerOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.ApiWorkerOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.ApiWorkerOptions}
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSecurityMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.proto.apis.v1.ApiWorkerScopes.deserializeBinaryFromReader, "", new proto.nitric.proto.apis.v1.ApiWorkerScopes());
         });
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSecurityDisabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.ApiWorkerOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.ApiWorkerOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecurityMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.proto.apis.v1.ApiWorkerScopes.serializeBinaryToWriter);
  }
  f = message.getSecurityDisabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * map<string, ApiWorkerScopes> security = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.proto.apis.v1.ApiWorkerScopes>}
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.prototype.getSecurityMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.proto.apis.v1.ApiWorkerScopes>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.nitric.proto.apis.v1.ApiWorkerScopes));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.proto.apis.v1.ApiWorkerOptions} returns this
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.prototype.clearSecurityMap = function() {
  this.getSecurityMap().clear();
  return this;};


/**
 * optional bool security_disabled = 2;
 * @return {boolean}
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.prototype.getSecurityDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nitric.proto.apis.v1.ApiWorkerOptions} returns this
 */
proto.nitric.proto.apis.v1.ApiWorkerOptions.prototype.setSecurityDisabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.apis.v1.RegistrationRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.apis.v1.RegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.apis.v1.RegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.RegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    methodsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    options: (f = msg.getOptions()) && proto.nitric.proto.apis.v1.ApiWorkerOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.apis.v1.RegistrationRequest}
 */
proto.nitric.proto.apis.v1.RegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.apis.v1.RegistrationRequest;
  return proto.nitric.proto.apis.v1.RegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.apis.v1.RegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.apis.v1.RegistrationRequest}
 */
proto.nitric.proto.apis.v1.RegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMethods(value);
      break;
    case 4:
      var value = new proto.nitric.proto.apis.v1.ApiWorkerOptions;
      reader.readMessage(value,proto.nitric.proto.apis.v1.ApiWorkerOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.apis.v1.RegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.apis.v1.RegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.apis.v1.RegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nitric.proto.apis.v1.ApiWorkerOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string api = 1;
 * @return {string}
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.getApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.apis.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.setApi = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.apis.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string methods = 3;
 * @return {!Array<string>}
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.getMethodsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.proto.apis.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.setMethodsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.apis.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.addMethods = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.apis.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.clearMethodsList = function() {
  return this.setMethodsList([]);
};


/**
 * optional ApiWorkerOptions options = 4;
 * @return {?proto.nitric.proto.apis.v1.ApiWorkerOptions}
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.getOptions = function() {
  return /** @type{?proto.nitric.proto.apis.v1.ApiWorkerOptions} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.apis.v1.ApiWorkerOptions, 4));
};


/**
 * @param {?proto.nitric.proto.apis.v1.ApiWorkerOptions|undefined} value
 * @return {!proto.nitric.proto.apis.v1.RegistrationRequest} returns this
*/
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.apis.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.apis.v1.RegistrationRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.nitric.proto.apis.v1);
