// source: nitric/proto/queues/v1/queues.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.nitric.proto.queues.v1.DequeuedMessage', null, global);
goog.exportSymbol('proto.nitric.proto.queues.v1.FailedEnqueueMessage', null, global);
goog.exportSymbol('proto.nitric.proto.queues.v1.QueueCompleteRequest', null, global);
goog.exportSymbol('proto.nitric.proto.queues.v1.QueueCompleteResponse', null, global);
goog.exportSymbol('proto.nitric.proto.queues.v1.QueueDequeueRequest', null, global);
goog.exportSymbol('proto.nitric.proto.queues.v1.QueueDequeueResponse', null, global);
goog.exportSymbol('proto.nitric.proto.queues.v1.QueueEnqueueRequest', null, global);
goog.exportSymbol('proto.nitric.proto.queues.v1.QueueEnqueueResponse', null, global);
goog.exportSymbol('proto.nitric.proto.queues.v1.QueueMessage', null, global);
goog.exportSymbol('proto.nitric.proto.queues.v1.QueueMessage.ContentCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.queues.v1.QueueEnqueueRequest.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.queues.v1.QueueEnqueueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.queues.v1.QueueEnqueueRequest.displayName = 'proto.nitric.proto.queues.v1.QueueEnqueueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.queues.v1.QueueEnqueueResponse.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.queues.v1.QueueEnqueueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.queues.v1.QueueEnqueueResponse.displayName = 'proto.nitric.proto.queues.v1.QueueEnqueueResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.queues.v1.QueueDequeueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.queues.v1.QueueDequeueRequest.displayName = 'proto.nitric.proto.queues.v1.QueueDequeueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.queues.v1.QueueDequeueResponse.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.queues.v1.QueueDequeueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.queues.v1.QueueDequeueResponse.displayName = 'proto.nitric.proto.queues.v1.QueueDequeueResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.queues.v1.QueueCompleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.queues.v1.QueueCompleteRequest.displayName = 'proto.nitric.proto.queues.v1.QueueCompleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.queues.v1.QueueCompleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.queues.v1.QueueCompleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.queues.v1.QueueCompleteResponse.displayName = 'proto.nitric.proto.queues.v1.QueueCompleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.queues.v1.QueueMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.queues.v1.QueueMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.queues.v1.QueueMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.queues.v1.QueueMessage.displayName = 'proto.nitric.proto.queues.v1.QueueMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.queues.v1.DequeuedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.queues.v1.DequeuedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.queues.v1.DequeuedMessage.displayName = 'proto.nitric.proto.queues.v1.DequeuedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.queues.v1.FailedEnqueueMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.queues.v1.FailedEnqueueMessage.displayName = 'proto.nitric.proto.queues.v1.FailedEnqueueMessage';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.queues.v1.QueueEnqueueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.queues.v1.QueueEnqueueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    queueName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.nitric.proto.queues.v1.QueueMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.queues.v1.QueueEnqueueRequest}
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.queues.v1.QueueEnqueueRequest;
  return proto.nitric.proto.queues.v1.QueueEnqueueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.queues.v1.QueueEnqueueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.queues.v1.QueueEnqueueRequest}
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueueName(value);
      break;
    case 2:
      var value = new proto.nitric.proto.queues.v1.QueueMessage;
      reader.readMessage(value,proto.nitric.proto.queues.v1.QueueMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.queues.v1.QueueEnqueueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.queues.v1.QueueEnqueueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueueName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.nitric.proto.queues.v1.QueueMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string queue_name = 1;
 * @return {string}
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.prototype.getQueueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.queues.v1.QueueEnqueueRequest} returns this
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.prototype.setQueueName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated QueueMessage messages = 2;
 * @return {!Array<!proto.nitric.proto.queues.v1.QueueMessage>}
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.nitric.proto.queues.v1.QueueMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.proto.queues.v1.QueueMessage, 2));
};


/**
 * @param {!Array<!proto.nitric.proto.queues.v1.QueueMessage>} value
 * @return {!proto.nitric.proto.queues.v1.QueueEnqueueRequest} returns this
*/
proto.nitric.proto.queues.v1.QueueEnqueueRequest.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nitric.proto.queues.v1.QueueMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.queues.v1.QueueMessage}
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nitric.proto.queues.v1.QueueMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.queues.v1.QueueEnqueueRequest} returns this
 */
proto.nitric.proto.queues.v1.QueueEnqueueRequest.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.queues.v1.QueueEnqueueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.queues.v1.QueueEnqueueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    failedMessagesList: jspb.Message.toObjectList(msg.getFailedMessagesList(),
    proto.nitric.proto.queues.v1.FailedEnqueueMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.queues.v1.QueueEnqueueResponse}
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.queues.v1.QueueEnqueueResponse;
  return proto.nitric.proto.queues.v1.QueueEnqueueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.queues.v1.QueueEnqueueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.queues.v1.QueueEnqueueResponse}
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.queues.v1.FailedEnqueueMessage;
      reader.readMessage(value,proto.nitric.proto.queues.v1.FailedEnqueueMessage.deserializeBinaryFromReader);
      msg.addFailedMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.queues.v1.QueueEnqueueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.queues.v1.QueueEnqueueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFailedMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nitric.proto.queues.v1.FailedEnqueueMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FailedEnqueueMessage failed_messages = 1;
 * @return {!Array<!proto.nitric.proto.queues.v1.FailedEnqueueMessage>}
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.prototype.getFailedMessagesList = function() {
  return /** @type{!Array<!proto.nitric.proto.queues.v1.FailedEnqueueMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.proto.queues.v1.FailedEnqueueMessage, 1));
};


/**
 * @param {!Array<!proto.nitric.proto.queues.v1.FailedEnqueueMessage>} value
 * @return {!proto.nitric.proto.queues.v1.QueueEnqueueResponse} returns this
*/
proto.nitric.proto.queues.v1.QueueEnqueueResponse.prototype.setFailedMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nitric.proto.queues.v1.FailedEnqueueMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.queues.v1.FailedEnqueueMessage}
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.prototype.addFailedMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nitric.proto.queues.v1.FailedEnqueueMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.queues.v1.QueueEnqueueResponse} returns this
 */
proto.nitric.proto.queues.v1.QueueEnqueueResponse.prototype.clearFailedMessagesList = function() {
  return this.setFailedMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.queues.v1.QueueDequeueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.queues.v1.QueueDequeueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    queueName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    depth: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.queues.v1.QueueDequeueRequest}
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.queues.v1.QueueDequeueRequest;
  return proto.nitric.proto.queues.v1.QueueDequeueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.queues.v1.QueueDequeueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.queues.v1.QueueDequeueRequest}
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueueName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.queues.v1.QueueDequeueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.queues.v1.QueueDequeueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueueName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string queue_name = 1;
 * @return {string}
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.prototype.getQueueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.queues.v1.QueueDequeueRequest} returns this
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.prototype.setQueueName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 depth = 2;
 * @return {number}
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.proto.queues.v1.QueueDequeueRequest} returns this
 */
proto.nitric.proto.queues.v1.QueueDequeueRequest.prototype.setDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.queues.v1.QueueDequeueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.queues.v1.QueueDequeueResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.nitric.proto.queues.v1.DequeuedMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.queues.v1.QueueDequeueResponse}
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.queues.v1.QueueDequeueResponse;
  return proto.nitric.proto.queues.v1.QueueDequeueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.queues.v1.QueueDequeueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.queues.v1.QueueDequeueResponse}
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.queues.v1.DequeuedMessage;
      reader.readMessage(value,proto.nitric.proto.queues.v1.DequeuedMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.queues.v1.QueueDequeueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.queues.v1.QueueDequeueResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nitric.proto.queues.v1.DequeuedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DequeuedMessage messages = 1;
 * @return {!Array<!proto.nitric.proto.queues.v1.DequeuedMessage>}
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.nitric.proto.queues.v1.DequeuedMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.proto.queues.v1.DequeuedMessage, 1));
};


/**
 * @param {!Array<!proto.nitric.proto.queues.v1.DequeuedMessage>} value
 * @return {!proto.nitric.proto.queues.v1.QueueDequeueResponse} returns this
*/
proto.nitric.proto.queues.v1.QueueDequeueResponse.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nitric.proto.queues.v1.DequeuedMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.queues.v1.DequeuedMessage}
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nitric.proto.queues.v1.DequeuedMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.queues.v1.QueueDequeueResponse} returns this
 */
proto.nitric.proto.queues.v1.QueueDequeueResponse.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.queues.v1.QueueCompleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.queues.v1.QueueCompleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    queueName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    leaseId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.queues.v1.QueueCompleteRequest}
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.queues.v1.QueueCompleteRequest;
  return proto.nitric.proto.queues.v1.QueueCompleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.queues.v1.QueueCompleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.queues.v1.QueueCompleteRequest}
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueueName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.queues.v1.QueueCompleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.queues.v1.QueueCompleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueueName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLeaseId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string queue_name = 1;
 * @return {string}
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.prototype.getQueueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.queues.v1.QueueCompleteRequest} returns this
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.prototype.setQueueName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string lease_id = 2;
 * @return {string}
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.prototype.getLeaseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.queues.v1.QueueCompleteRequest} returns this
 */
proto.nitric.proto.queues.v1.QueueCompleteRequest.prototype.setLeaseId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.queues.v1.QueueCompleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.queues.v1.QueueCompleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.queues.v1.QueueCompleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueCompleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.queues.v1.QueueCompleteResponse}
 */
proto.nitric.proto.queues.v1.QueueCompleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.queues.v1.QueueCompleteResponse;
  return proto.nitric.proto.queues.v1.QueueCompleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.queues.v1.QueueCompleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.queues.v1.QueueCompleteResponse}
 */
proto.nitric.proto.queues.v1.QueueCompleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.queues.v1.QueueCompleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.queues.v1.QueueCompleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.queues.v1.QueueCompleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueCompleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.queues.v1.QueueMessage.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.nitric.proto.queues.v1.QueueMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  STRUCT_PAYLOAD: 1
};

/**
 * @return {proto.nitric.proto.queues.v1.QueueMessage.ContentCase}
 */
proto.nitric.proto.queues.v1.QueueMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.queues.v1.QueueMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.queues.v1.QueueMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.queues.v1.QueueMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.queues.v1.QueueMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.queues.v1.QueueMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    structPayload: (f = msg.getStructPayload()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.queues.v1.QueueMessage}
 */
proto.nitric.proto.queues.v1.QueueMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.queues.v1.QueueMessage;
  return proto.nitric.proto.queues.v1.QueueMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.queues.v1.QueueMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.queues.v1.QueueMessage}
 */
proto.nitric.proto.queues.v1.QueueMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setStructPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.queues.v1.QueueMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.queues.v1.QueueMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.queues.v1.QueueMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.QueueMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStructPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct struct_payload = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.nitric.proto.queues.v1.QueueMessage.prototype.getStructPayload = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.nitric.proto.queues.v1.QueueMessage} returns this
*/
proto.nitric.proto.queues.v1.QueueMessage.prototype.setStructPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nitric.proto.queues.v1.QueueMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.queues.v1.QueueMessage} returns this
 */
proto.nitric.proto.queues.v1.QueueMessage.prototype.clearStructPayload = function() {
  return this.setStructPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.queues.v1.QueueMessage.prototype.hasStructPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.queues.v1.DequeuedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.queues.v1.DequeuedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.queues.v1.DequeuedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.DequeuedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaseId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: (f = msg.getMessage()) && proto.nitric.proto.queues.v1.QueueMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.queues.v1.DequeuedMessage}
 */
proto.nitric.proto.queues.v1.DequeuedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.queues.v1.DequeuedMessage;
  return proto.nitric.proto.queues.v1.DequeuedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.queues.v1.DequeuedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.queues.v1.DequeuedMessage}
 */
proto.nitric.proto.queues.v1.DequeuedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaseId(value);
      break;
    case 2:
      var value = new proto.nitric.proto.queues.v1.QueueMessage;
      reader.readMessage(value,proto.nitric.proto.queues.v1.QueueMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.queues.v1.DequeuedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.queues.v1.DequeuedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.queues.v1.DequeuedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.DequeuedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaseId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.queues.v1.QueueMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string lease_id = 1;
 * @return {string}
 */
proto.nitric.proto.queues.v1.DequeuedMessage.prototype.getLeaseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.queues.v1.DequeuedMessage} returns this
 */
proto.nitric.proto.queues.v1.DequeuedMessage.prototype.setLeaseId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional QueueMessage message = 2;
 * @return {?proto.nitric.proto.queues.v1.QueueMessage}
 */
proto.nitric.proto.queues.v1.DequeuedMessage.prototype.getMessage = function() {
  return /** @type{?proto.nitric.proto.queues.v1.QueueMessage} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.queues.v1.QueueMessage, 2));
};


/**
 * @param {?proto.nitric.proto.queues.v1.QueueMessage|undefined} value
 * @return {!proto.nitric.proto.queues.v1.DequeuedMessage} returns this
*/
proto.nitric.proto.queues.v1.DequeuedMessage.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.queues.v1.DequeuedMessage} returns this
 */
proto.nitric.proto.queues.v1.DequeuedMessage.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.queues.v1.DequeuedMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.queues.v1.FailedEnqueueMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.queues.v1.FailedEnqueueMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.nitric.proto.queues.v1.QueueMessage.toObject(includeInstance, f),
    details: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.queues.v1.FailedEnqueueMessage}
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.queues.v1.FailedEnqueueMessage;
  return proto.nitric.proto.queues.v1.FailedEnqueueMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.queues.v1.FailedEnqueueMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.queues.v1.FailedEnqueueMessage}
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.proto.queues.v1.QueueMessage;
      reader.readMessage(value,proto.nitric.proto.queues.v1.QueueMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.queues.v1.FailedEnqueueMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.queues.v1.FailedEnqueueMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.proto.queues.v1.QueueMessage.serializeBinaryToWriter
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional QueueMessage message = 1;
 * @return {?proto.nitric.proto.queues.v1.QueueMessage}
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.prototype.getMessage = function() {
  return /** @type{?proto.nitric.proto.queues.v1.QueueMessage} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.queues.v1.QueueMessage, 1));
};


/**
 * @param {?proto.nitric.proto.queues.v1.QueueMessage|undefined} value
 * @return {!proto.nitric.proto.queues.v1.FailedEnqueueMessage} returns this
*/
proto.nitric.proto.queues.v1.FailedEnqueueMessage.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.queues.v1.FailedEnqueueMessage} returns this
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string details = 2;
 * @return {string}
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.queues.v1.FailedEnqueueMessage} returns this
 */
proto.nitric.proto.queues.v1.FailedEnqueueMessage.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.nitric.proto.queues.v1);
