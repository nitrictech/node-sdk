// source: nitric/proto/topics/v1/topics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.nitric.proto.topics.v1.ClientMessage', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.ClientMessage.ContentCase', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.MessageRequest', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.MessageResponse', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.RegistrationRequest', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.RegistrationResponse', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.ServerMessage', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.ServerMessage.ContentCase', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.TopicMessage', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.TopicMessage.ContentCase', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.TopicPublishRequest', null, global);
goog.exportSymbol('proto.nitric.proto.topics.v1.TopicPublishResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.topics.v1.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.topics.v1.ClientMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.topics.v1.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.topics.v1.ClientMessage.displayName = 'proto.nitric.proto.topics.v1.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.topics.v1.MessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.topics.v1.MessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.topics.v1.MessageRequest.displayName = 'proto.nitric.proto.topics.v1.MessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.topics.v1.MessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.topics.v1.MessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.topics.v1.MessageResponse.displayName = 'proto.nitric.proto.topics.v1.MessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.topics.v1.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.topics.v1.ServerMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.topics.v1.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.topics.v1.ServerMessage.displayName = 'proto.nitric.proto.topics.v1.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.topics.v1.RegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.topics.v1.RegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.topics.v1.RegistrationRequest.displayName = 'proto.nitric.proto.topics.v1.RegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.topics.v1.RegistrationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.topics.v1.RegistrationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.topics.v1.RegistrationResponse.displayName = 'proto.nitric.proto.topics.v1.RegistrationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.topics.v1.TopicMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.topics.v1.TopicMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.topics.v1.TopicMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.topics.v1.TopicMessage.displayName = 'proto.nitric.proto.topics.v1.TopicMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.topics.v1.TopicPublishRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.topics.v1.TopicPublishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.topics.v1.TopicPublishRequest.displayName = 'proto.nitric.proto.topics.v1.TopicPublishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.topics.v1.TopicPublishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.topics.v1.TopicPublishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.topics.v1.TopicPublishResponse.displayName = 'proto.nitric.proto.topics.v1.TopicPublishResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.topics.v1.ClientMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.proto.topics.v1.ClientMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  REGISTRATION_REQUEST: 2,
  MESSAGE_RESPONSE: 3
};

/**
 * @return {proto.nitric.proto.topics.v1.ClientMessage.ContentCase}
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.topics.v1.ClientMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.topics.v1.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.topics.v1.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.topics.v1.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registrationRequest: (f = msg.getRegistrationRequest()) && proto.nitric.proto.topics.v1.RegistrationRequest.toObject(includeInstance, f),
    messageResponse: (f = msg.getMessageResponse()) && proto.nitric.proto.topics.v1.MessageResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.topics.v1.ClientMessage}
 */
proto.nitric.proto.topics.v1.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.topics.v1.ClientMessage;
  return proto.nitric.proto.topics.v1.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.topics.v1.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.topics.v1.ClientMessage}
 */
proto.nitric.proto.topics.v1.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.proto.topics.v1.RegistrationRequest;
      reader.readMessage(value,proto.nitric.proto.topics.v1.RegistrationRequest.deserializeBinaryFromReader);
      msg.setRegistrationRequest(value);
      break;
    case 3:
      var value = new proto.nitric.proto.topics.v1.MessageResponse;
      reader.readMessage(value,proto.nitric.proto.topics.v1.MessageResponse.deserializeBinaryFromReader);
      msg.setMessageResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.topics.v1.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.topics.v1.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistrationRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.topics.v1.RegistrationRequest.serializeBinaryToWriter
    );
  }
  f = message.getMessageResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.proto.topics.v1.MessageResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.topics.v1.ClientMessage} returns this
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationRequest registration_request = 2;
 * @return {?proto.nitric.proto.topics.v1.RegistrationRequest}
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.getRegistrationRequest = function() {
  return /** @type{?proto.nitric.proto.topics.v1.RegistrationRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.topics.v1.RegistrationRequest, 2));
};


/**
 * @param {?proto.nitric.proto.topics.v1.RegistrationRequest|undefined} value
 * @return {!proto.nitric.proto.topics.v1.ClientMessage} returns this
*/
proto.nitric.proto.topics.v1.ClientMessage.prototype.setRegistrationRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.proto.topics.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.topics.v1.ClientMessage} returns this
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.clearRegistrationRequest = function() {
  return this.setRegistrationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.hasRegistrationRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MessageResponse message_response = 3;
 * @return {?proto.nitric.proto.topics.v1.MessageResponse}
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.getMessageResponse = function() {
  return /** @type{?proto.nitric.proto.topics.v1.MessageResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.topics.v1.MessageResponse, 3));
};


/**
 * @param {?proto.nitric.proto.topics.v1.MessageResponse|undefined} value
 * @return {!proto.nitric.proto.topics.v1.ClientMessage} returns this
*/
proto.nitric.proto.topics.v1.ClientMessage.prototype.setMessageResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.proto.topics.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.topics.v1.ClientMessage} returns this
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.clearMessageResponse = function() {
  return this.setMessageResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.topics.v1.ClientMessage.prototype.hasMessageResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.topics.v1.MessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.topics.v1.MessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.topics.v1.MessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.MessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: (f = msg.getMessage()) && proto.nitric.proto.topics.v1.TopicMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.topics.v1.MessageRequest}
 */
proto.nitric.proto.topics.v1.MessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.topics.v1.MessageRequest;
  return proto.nitric.proto.topics.v1.MessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.topics.v1.MessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.topics.v1.MessageRequest}
 */
proto.nitric.proto.topics.v1.MessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopicName(value);
      break;
    case 2:
      var value = new proto.nitric.proto.topics.v1.TopicMessage;
      reader.readMessage(value,proto.nitric.proto.topics.v1.TopicMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.topics.v1.MessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.topics.v1.MessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.topics.v1.MessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.MessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.topics.v1.TopicMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string topic_name = 1;
 * @return {string}
 */
proto.nitric.proto.topics.v1.MessageRequest.prototype.getTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.topics.v1.MessageRequest} returns this
 */
proto.nitric.proto.topics.v1.MessageRequest.prototype.setTopicName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TopicMessage message = 2;
 * @return {?proto.nitric.proto.topics.v1.TopicMessage}
 */
proto.nitric.proto.topics.v1.MessageRequest.prototype.getMessage = function() {
  return /** @type{?proto.nitric.proto.topics.v1.TopicMessage} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.topics.v1.TopicMessage, 2));
};


/**
 * @param {?proto.nitric.proto.topics.v1.TopicMessage|undefined} value
 * @return {!proto.nitric.proto.topics.v1.MessageRequest} returns this
*/
proto.nitric.proto.topics.v1.MessageRequest.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.topics.v1.MessageRequest} returns this
 */
proto.nitric.proto.topics.v1.MessageRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.topics.v1.MessageRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.topics.v1.MessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.topics.v1.MessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.topics.v1.MessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.MessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.topics.v1.MessageResponse}
 */
proto.nitric.proto.topics.v1.MessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.topics.v1.MessageResponse;
  return proto.nitric.proto.topics.v1.MessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.topics.v1.MessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.topics.v1.MessageResponse}
 */
proto.nitric.proto.topics.v1.MessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.topics.v1.MessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.topics.v1.MessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.topics.v1.MessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.MessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.nitric.proto.topics.v1.MessageResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nitric.proto.topics.v1.MessageResponse} returns this
 */
proto.nitric.proto.topics.v1.MessageResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.topics.v1.ServerMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.proto.topics.v1.ServerMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  REGISTRATION_RESPONSE: 2,
  MESSAGE_REQUEST: 3
};

/**
 * @return {proto.nitric.proto.topics.v1.ServerMessage.ContentCase}
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.topics.v1.ServerMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.topics.v1.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.topics.v1.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.topics.v1.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registrationResponse: (f = msg.getRegistrationResponse()) && proto.nitric.proto.topics.v1.RegistrationResponse.toObject(includeInstance, f),
    messageRequest: (f = msg.getMessageRequest()) && proto.nitric.proto.topics.v1.MessageRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.topics.v1.ServerMessage}
 */
proto.nitric.proto.topics.v1.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.topics.v1.ServerMessage;
  return proto.nitric.proto.topics.v1.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.topics.v1.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.topics.v1.ServerMessage}
 */
proto.nitric.proto.topics.v1.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.proto.topics.v1.RegistrationResponse;
      reader.readMessage(value,proto.nitric.proto.topics.v1.RegistrationResponse.deserializeBinaryFromReader);
      msg.setRegistrationResponse(value);
      break;
    case 3:
      var value = new proto.nitric.proto.topics.v1.MessageRequest;
      reader.readMessage(value,proto.nitric.proto.topics.v1.MessageRequest.deserializeBinaryFromReader);
      msg.setMessageRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.topics.v1.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.topics.v1.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistrationResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.topics.v1.RegistrationResponse.serializeBinaryToWriter
    );
  }
  f = message.getMessageRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.proto.topics.v1.MessageRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.topics.v1.ServerMessage} returns this
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationResponse registration_response = 2;
 * @return {?proto.nitric.proto.topics.v1.RegistrationResponse}
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.getRegistrationResponse = function() {
  return /** @type{?proto.nitric.proto.topics.v1.RegistrationResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.topics.v1.RegistrationResponse, 2));
};


/**
 * @param {?proto.nitric.proto.topics.v1.RegistrationResponse|undefined} value
 * @return {!proto.nitric.proto.topics.v1.ServerMessage} returns this
*/
proto.nitric.proto.topics.v1.ServerMessage.prototype.setRegistrationResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.proto.topics.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.topics.v1.ServerMessage} returns this
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.clearRegistrationResponse = function() {
  return this.setRegistrationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.hasRegistrationResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MessageRequest message_request = 3;
 * @return {?proto.nitric.proto.topics.v1.MessageRequest}
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.getMessageRequest = function() {
  return /** @type{?proto.nitric.proto.topics.v1.MessageRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.topics.v1.MessageRequest, 3));
};


/**
 * @param {?proto.nitric.proto.topics.v1.MessageRequest|undefined} value
 * @return {!proto.nitric.proto.topics.v1.ServerMessage} returns this
*/
proto.nitric.proto.topics.v1.ServerMessage.prototype.setMessageRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.proto.topics.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.topics.v1.ServerMessage} returns this
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.clearMessageRequest = function() {
  return this.setMessageRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.topics.v1.ServerMessage.prototype.hasMessageRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.topics.v1.RegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.topics.v1.RegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.topics.v1.RegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.RegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.topics.v1.RegistrationRequest}
 */
proto.nitric.proto.topics.v1.RegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.topics.v1.RegistrationRequest;
  return proto.nitric.proto.topics.v1.RegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.topics.v1.RegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.topics.v1.RegistrationRequest}
 */
proto.nitric.proto.topics.v1.RegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopicName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.topics.v1.RegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.topics.v1.RegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.topics.v1.RegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.RegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string topic_name = 1;
 * @return {string}
 */
proto.nitric.proto.topics.v1.RegistrationRequest.prototype.getTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.topics.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.topics.v1.RegistrationRequest.prototype.setTopicName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.topics.v1.RegistrationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.topics.v1.RegistrationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.topics.v1.RegistrationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.RegistrationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.topics.v1.RegistrationResponse}
 */
proto.nitric.proto.topics.v1.RegistrationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.topics.v1.RegistrationResponse;
  return proto.nitric.proto.topics.v1.RegistrationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.topics.v1.RegistrationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.topics.v1.RegistrationResponse}
 */
proto.nitric.proto.topics.v1.RegistrationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.topics.v1.RegistrationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.topics.v1.RegistrationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.topics.v1.RegistrationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.RegistrationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.topics.v1.TopicMessage.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.nitric.proto.topics.v1.TopicMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  STRUCT_PAYLOAD: 1
};

/**
 * @return {proto.nitric.proto.topics.v1.TopicMessage.ContentCase}
 */
proto.nitric.proto.topics.v1.TopicMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.topics.v1.TopicMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.topics.v1.TopicMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.topics.v1.TopicMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.topics.v1.TopicMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.topics.v1.TopicMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.TopicMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    structPayload: (f = msg.getStructPayload()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.topics.v1.TopicMessage}
 */
proto.nitric.proto.topics.v1.TopicMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.topics.v1.TopicMessage;
  return proto.nitric.proto.topics.v1.TopicMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.topics.v1.TopicMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.topics.v1.TopicMessage}
 */
proto.nitric.proto.topics.v1.TopicMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setStructPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.topics.v1.TopicMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.topics.v1.TopicMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.topics.v1.TopicMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.TopicMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStructPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct struct_payload = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.nitric.proto.topics.v1.TopicMessage.prototype.getStructPayload = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.nitric.proto.topics.v1.TopicMessage} returns this
*/
proto.nitric.proto.topics.v1.TopicMessage.prototype.setStructPayload = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nitric.proto.topics.v1.TopicMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.topics.v1.TopicMessage} returns this
 */
proto.nitric.proto.topics.v1.TopicMessage.prototype.clearStructPayload = function() {
  return this.setStructPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.topics.v1.TopicMessage.prototype.hasStructPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.topics.v1.TopicPublishRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.topics.v1.TopicPublishRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: (f = msg.getMessage()) && proto.nitric.proto.topics.v1.TopicMessage.toObject(includeInstance, f),
    delay: (f = msg.getDelay()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.topics.v1.TopicPublishRequest}
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.topics.v1.TopicPublishRequest;
  return proto.nitric.proto.topics.v1.TopicPublishRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.topics.v1.TopicPublishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.topics.v1.TopicPublishRequest}
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopicName(value);
      break;
    case 2:
      var value = new proto.nitric.proto.topics.v1.TopicMessage;
      reader.readMessage(value,proto.nitric.proto.topics.v1.TopicMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDelay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.topics.v1.TopicPublishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.topics.v1.TopicPublishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.topics.v1.TopicMessage.serializeBinaryToWriter
    );
  }
  f = message.getDelay();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string topic_name = 1;
 * @return {string}
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.getTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.topics.v1.TopicPublishRequest} returns this
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.setTopicName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TopicMessage message = 2;
 * @return {?proto.nitric.proto.topics.v1.TopicMessage}
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.getMessage = function() {
  return /** @type{?proto.nitric.proto.topics.v1.TopicMessage} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.topics.v1.TopicMessage, 2));
};


/**
 * @param {?proto.nitric.proto.topics.v1.TopicMessage|undefined} value
 * @return {!proto.nitric.proto.topics.v1.TopicPublishRequest} returns this
*/
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.topics.v1.TopicPublishRequest} returns this
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Duration delay = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.getDelay = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.nitric.proto.topics.v1.TopicPublishRequest} returns this
*/
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.setDelay = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.topics.v1.TopicPublishRequest} returns this
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.clearDelay = function() {
  return this.setDelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.topics.v1.TopicPublishRequest.prototype.hasDelay = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.topics.v1.TopicPublishResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.topics.v1.TopicPublishResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.topics.v1.TopicPublishResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.TopicPublishResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.topics.v1.TopicPublishResponse}
 */
proto.nitric.proto.topics.v1.TopicPublishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.topics.v1.TopicPublishResponse;
  return proto.nitric.proto.topics.v1.TopicPublishResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.topics.v1.TopicPublishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.topics.v1.TopicPublishResponse}
 */
proto.nitric.proto.topics.v1.TopicPublishResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.topics.v1.TopicPublishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.topics.v1.TopicPublishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.topics.v1.TopicPublishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.topics.v1.TopicPublishResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.nitric.proto.topics.v1);
