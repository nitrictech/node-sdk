// source: nitric/proto/schedules/v1/schedules.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.nitric.proto.schedules.v1.ClientMessage', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.ClientMessage.ContentCase', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.IntervalRequest', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.IntervalResponse', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.RegistrationRequest', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.RegistrationRequest.CadenceCase', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.RegistrationResponse', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.ScheduleCron', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.ScheduleEvery', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.ServerMessage', null, global);
goog.exportSymbol('proto.nitric.proto.schedules.v1.ServerMessage.ContentCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.schedules.v1.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.schedules.v1.ClientMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.schedules.v1.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.schedules.v1.ClientMessage.displayName = 'proto.nitric.proto.schedules.v1.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.schedules.v1.IntervalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.schedules.v1.IntervalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.schedules.v1.IntervalRequest.displayName = 'proto.nitric.proto.schedules.v1.IntervalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.schedules.v1.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.schedules.v1.ServerMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.schedules.v1.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.schedules.v1.ServerMessage.displayName = 'proto.nitric.proto.schedules.v1.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.schedules.v1.RegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.schedules.v1.RegistrationRequest.oneofGroups_);
};
goog.inherits(proto.nitric.proto.schedules.v1.RegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.schedules.v1.RegistrationRequest.displayName = 'proto.nitric.proto.schedules.v1.RegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.schedules.v1.ScheduleEvery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.schedules.v1.ScheduleEvery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.schedules.v1.ScheduleEvery.displayName = 'proto.nitric.proto.schedules.v1.ScheduleEvery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.schedules.v1.ScheduleCron = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.schedules.v1.ScheduleCron, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.schedules.v1.ScheduleCron.displayName = 'proto.nitric.proto.schedules.v1.ScheduleCron';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.schedules.v1.RegistrationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.schedules.v1.RegistrationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.schedules.v1.RegistrationResponse.displayName = 'proto.nitric.proto.schedules.v1.RegistrationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.schedules.v1.IntervalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.schedules.v1.IntervalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.schedules.v1.IntervalResponse.displayName = 'proto.nitric.proto.schedules.v1.IntervalResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.schedules.v1.ClientMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.proto.schedules.v1.ClientMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  REGISTRATION_REQUEST: 2,
  INTERVAL_RESPONSE: 3
};

/**
 * @return {proto.nitric.proto.schedules.v1.ClientMessage.ContentCase}
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.schedules.v1.ClientMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.schedules.v1.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.schedules.v1.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.schedules.v1.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registrationRequest: (f = msg.getRegistrationRequest()) && proto.nitric.proto.schedules.v1.RegistrationRequest.toObject(includeInstance, f),
    intervalResponse: (f = msg.getIntervalResponse()) && proto.nitric.proto.schedules.v1.IntervalResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.schedules.v1.ClientMessage}
 */
proto.nitric.proto.schedules.v1.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.schedules.v1.ClientMessage;
  return proto.nitric.proto.schedules.v1.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.schedules.v1.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.schedules.v1.ClientMessage}
 */
proto.nitric.proto.schedules.v1.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.proto.schedules.v1.RegistrationRequest;
      reader.readMessage(value,proto.nitric.proto.schedules.v1.RegistrationRequest.deserializeBinaryFromReader);
      msg.setRegistrationRequest(value);
      break;
    case 3:
      var value = new proto.nitric.proto.schedules.v1.IntervalResponse;
      reader.readMessage(value,proto.nitric.proto.schedules.v1.IntervalResponse.deserializeBinaryFromReader);
      msg.setIntervalResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.schedules.v1.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.schedules.v1.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistrationRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.schedules.v1.RegistrationRequest.serializeBinaryToWriter
    );
  }
  f = message.getIntervalResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.proto.schedules.v1.IntervalResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.schedules.v1.ClientMessage} returns this
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationRequest registration_request = 2;
 * @return {?proto.nitric.proto.schedules.v1.RegistrationRequest}
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.getRegistrationRequest = function() {
  return /** @type{?proto.nitric.proto.schedules.v1.RegistrationRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.schedules.v1.RegistrationRequest, 2));
};


/**
 * @param {?proto.nitric.proto.schedules.v1.RegistrationRequest|undefined} value
 * @return {!proto.nitric.proto.schedules.v1.ClientMessage} returns this
*/
proto.nitric.proto.schedules.v1.ClientMessage.prototype.setRegistrationRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.proto.schedules.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.schedules.v1.ClientMessage} returns this
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.clearRegistrationRequest = function() {
  return this.setRegistrationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.hasRegistrationRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IntervalResponse interval_response = 3;
 * @return {?proto.nitric.proto.schedules.v1.IntervalResponse}
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.getIntervalResponse = function() {
  return /** @type{?proto.nitric.proto.schedules.v1.IntervalResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.schedules.v1.IntervalResponse, 3));
};


/**
 * @param {?proto.nitric.proto.schedules.v1.IntervalResponse|undefined} value
 * @return {!proto.nitric.proto.schedules.v1.ClientMessage} returns this
*/
proto.nitric.proto.schedules.v1.ClientMessage.prototype.setIntervalResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.proto.schedules.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.schedules.v1.ClientMessage} returns this
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.clearIntervalResponse = function() {
  return this.setIntervalResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.schedules.v1.ClientMessage.prototype.hasIntervalResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.schedules.v1.IntervalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.schedules.v1.IntervalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.schedules.v1.IntervalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.IntervalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduleName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.schedules.v1.IntervalRequest}
 */
proto.nitric.proto.schedules.v1.IntervalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.schedules.v1.IntervalRequest;
  return proto.nitric.proto.schedules.v1.IntervalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.schedules.v1.IntervalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.schedules.v1.IntervalRequest}
 */
proto.nitric.proto.schedules.v1.IntervalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheduleName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.schedules.v1.IntervalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.schedules.v1.IntervalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.schedules.v1.IntervalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.IntervalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduleName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string schedule_name = 1;
 * @return {string}
 */
proto.nitric.proto.schedules.v1.IntervalRequest.prototype.getScheduleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.schedules.v1.IntervalRequest} returns this
 */
proto.nitric.proto.schedules.v1.IntervalRequest.prototype.setScheduleName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.schedules.v1.ServerMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.proto.schedules.v1.ServerMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  REGISTRATION_RESPONSE: 2,
  INTERVAL_REQUEST: 3
};

/**
 * @return {proto.nitric.proto.schedules.v1.ServerMessage.ContentCase}
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.schedules.v1.ServerMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.schedules.v1.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.schedules.v1.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.schedules.v1.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registrationResponse: (f = msg.getRegistrationResponse()) && proto.nitric.proto.schedules.v1.RegistrationResponse.toObject(includeInstance, f),
    intervalRequest: (f = msg.getIntervalRequest()) && proto.nitric.proto.schedules.v1.IntervalRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.schedules.v1.ServerMessage}
 */
proto.nitric.proto.schedules.v1.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.schedules.v1.ServerMessage;
  return proto.nitric.proto.schedules.v1.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.schedules.v1.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.schedules.v1.ServerMessage}
 */
proto.nitric.proto.schedules.v1.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.proto.schedules.v1.RegistrationResponse;
      reader.readMessage(value,proto.nitric.proto.schedules.v1.RegistrationResponse.deserializeBinaryFromReader);
      msg.setRegistrationResponse(value);
      break;
    case 3:
      var value = new proto.nitric.proto.schedules.v1.IntervalRequest;
      reader.readMessage(value,proto.nitric.proto.schedules.v1.IntervalRequest.deserializeBinaryFromReader);
      msg.setIntervalRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.schedules.v1.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.schedules.v1.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistrationResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.schedules.v1.RegistrationResponse.serializeBinaryToWriter
    );
  }
  f = message.getIntervalRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.proto.schedules.v1.IntervalRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.schedules.v1.ServerMessage} returns this
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationResponse registration_response = 2;
 * @return {?proto.nitric.proto.schedules.v1.RegistrationResponse}
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.getRegistrationResponse = function() {
  return /** @type{?proto.nitric.proto.schedules.v1.RegistrationResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.schedules.v1.RegistrationResponse, 2));
};


/**
 * @param {?proto.nitric.proto.schedules.v1.RegistrationResponse|undefined} value
 * @return {!proto.nitric.proto.schedules.v1.ServerMessage} returns this
*/
proto.nitric.proto.schedules.v1.ServerMessage.prototype.setRegistrationResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.proto.schedules.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.schedules.v1.ServerMessage} returns this
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.clearRegistrationResponse = function() {
  return this.setRegistrationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.hasRegistrationResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IntervalRequest interval_request = 3;
 * @return {?proto.nitric.proto.schedules.v1.IntervalRequest}
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.getIntervalRequest = function() {
  return /** @type{?proto.nitric.proto.schedules.v1.IntervalRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.schedules.v1.IntervalRequest, 3));
};


/**
 * @param {?proto.nitric.proto.schedules.v1.IntervalRequest|undefined} value
 * @return {!proto.nitric.proto.schedules.v1.ServerMessage} returns this
*/
proto.nitric.proto.schedules.v1.ServerMessage.prototype.setIntervalRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.proto.schedules.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.schedules.v1.ServerMessage} returns this
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.clearIntervalRequest = function() {
  return this.setIntervalRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.schedules.v1.ServerMessage.prototype.hasIntervalRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.CadenceCase = {
  CADENCE_NOT_SET: 0,
  EVERY: 10,
  CRON: 11
};

/**
 * @return {proto.nitric.proto.schedules.v1.RegistrationRequest.CadenceCase}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.getCadenceCase = function() {
  return /** @type {proto.nitric.proto.schedules.v1.RegistrationRequest.CadenceCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.schedules.v1.RegistrationRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.schedules.v1.RegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.schedules.v1.RegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduleName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    every: (f = msg.getEvery()) && proto.nitric.proto.schedules.v1.ScheduleEvery.toObject(includeInstance, f),
    cron: (f = msg.getCron()) && proto.nitric.proto.schedules.v1.ScheduleCron.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.schedules.v1.RegistrationRequest}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.schedules.v1.RegistrationRequest;
  return proto.nitric.proto.schedules.v1.RegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.schedules.v1.RegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.schedules.v1.RegistrationRequest}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheduleName(value);
      break;
    case 10:
      var value = new proto.nitric.proto.schedules.v1.ScheduleEvery;
      reader.readMessage(value,proto.nitric.proto.schedules.v1.ScheduleEvery.deserializeBinaryFromReader);
      msg.setEvery(value);
      break;
    case 11:
      var value = new proto.nitric.proto.schedules.v1.ScheduleCron;
      reader.readMessage(value,proto.nitric.proto.schedules.v1.ScheduleCron.deserializeBinaryFromReader);
      msg.setCron(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.schedules.v1.RegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.schedules.v1.RegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduleName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEvery();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.proto.schedules.v1.ScheduleEvery.serializeBinaryToWriter
    );
  }
  f = message.getCron();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nitric.proto.schedules.v1.ScheduleCron.serializeBinaryToWriter
    );
  }
};


/**
 * optional string schedule_name = 1;
 * @return {string}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.getScheduleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.schedules.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.setScheduleName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ScheduleEvery every = 10;
 * @return {?proto.nitric.proto.schedules.v1.ScheduleEvery}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.getEvery = function() {
  return /** @type{?proto.nitric.proto.schedules.v1.ScheduleEvery} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.schedules.v1.ScheduleEvery, 10));
};


/**
 * @param {?proto.nitric.proto.schedules.v1.ScheduleEvery|undefined} value
 * @return {!proto.nitric.proto.schedules.v1.RegistrationRequest} returns this
*/
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.setEvery = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.proto.schedules.v1.RegistrationRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.schedules.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.clearEvery = function() {
  return this.setEvery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.hasEvery = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ScheduleCron cron = 11;
 * @return {?proto.nitric.proto.schedules.v1.ScheduleCron}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.getCron = function() {
  return /** @type{?proto.nitric.proto.schedules.v1.ScheduleCron} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.schedules.v1.ScheduleCron, 11));
};


/**
 * @param {?proto.nitric.proto.schedules.v1.ScheduleCron|undefined} value
 * @return {!proto.nitric.proto.schedules.v1.RegistrationRequest} returns this
*/
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.setCron = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.nitric.proto.schedules.v1.RegistrationRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.schedules.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.clearCron = function() {
  return this.setCron(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.schedules.v1.RegistrationRequest.prototype.hasCron = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.schedules.v1.ScheduleEvery.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.schedules.v1.ScheduleEvery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.schedules.v1.ScheduleEvery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.ScheduleEvery.toObject = function(includeInstance, msg) {
  var f, obj = {
    rate: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.schedules.v1.ScheduleEvery}
 */
proto.nitric.proto.schedules.v1.ScheduleEvery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.schedules.v1.ScheduleEvery;
  return proto.nitric.proto.schedules.v1.ScheduleEvery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.schedules.v1.ScheduleEvery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.schedules.v1.ScheduleEvery}
 */
proto.nitric.proto.schedules.v1.ScheduleEvery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.schedules.v1.ScheduleEvery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.schedules.v1.ScheduleEvery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.schedules.v1.ScheduleEvery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.ScheduleEvery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string rate = 1;
 * @return {string}
 */
proto.nitric.proto.schedules.v1.ScheduleEvery.prototype.getRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.schedules.v1.ScheduleEvery} returns this
 */
proto.nitric.proto.schedules.v1.ScheduleEvery.prototype.setRate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.schedules.v1.ScheduleCron.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.schedules.v1.ScheduleCron.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.schedules.v1.ScheduleCron} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.ScheduleCron.toObject = function(includeInstance, msg) {
  var f, obj = {
    expression: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.schedules.v1.ScheduleCron}
 */
proto.nitric.proto.schedules.v1.ScheduleCron.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.schedules.v1.ScheduleCron;
  return proto.nitric.proto.schedules.v1.ScheduleCron.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.schedules.v1.ScheduleCron} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.schedules.v1.ScheduleCron}
 */
proto.nitric.proto.schedules.v1.ScheduleCron.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.schedules.v1.ScheduleCron.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.schedules.v1.ScheduleCron.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.schedules.v1.ScheduleCron} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.ScheduleCron.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string expression = 1;
 * @return {string}
 */
proto.nitric.proto.schedules.v1.ScheduleCron.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.schedules.v1.ScheduleCron} returns this
 */
proto.nitric.proto.schedules.v1.ScheduleCron.prototype.setExpression = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.schedules.v1.RegistrationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.schedules.v1.RegistrationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.schedules.v1.RegistrationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.RegistrationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.schedules.v1.RegistrationResponse}
 */
proto.nitric.proto.schedules.v1.RegistrationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.schedules.v1.RegistrationResponse;
  return proto.nitric.proto.schedules.v1.RegistrationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.schedules.v1.RegistrationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.schedules.v1.RegistrationResponse}
 */
proto.nitric.proto.schedules.v1.RegistrationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.schedules.v1.RegistrationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.schedules.v1.RegistrationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.schedules.v1.RegistrationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.RegistrationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.schedules.v1.IntervalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.schedules.v1.IntervalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.schedules.v1.IntervalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.IntervalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.schedules.v1.IntervalResponse}
 */
proto.nitric.proto.schedules.v1.IntervalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.schedules.v1.IntervalResponse;
  return proto.nitric.proto.schedules.v1.IntervalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.schedules.v1.IntervalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.schedules.v1.IntervalResponse}
 */
proto.nitric.proto.schedules.v1.IntervalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.schedules.v1.IntervalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.schedules.v1.IntervalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.schedules.v1.IntervalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.schedules.v1.IntervalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.nitric.proto.schedules.v1);
