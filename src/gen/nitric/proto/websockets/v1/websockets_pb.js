// source: nitric/proto/websockets/v1/websockets.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.nitric.proto.websockets.v1.ClientMessage', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.ClientMessage.ContentCase', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.QueryValue', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.RegistrationRequest', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.RegistrationResponse', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.ServerMessage', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.ServerMessage.ContentCase', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketConnectionEvent', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketConnectionResponse', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketDetailsRequest', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketDetailsResponse', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketEventRequest', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketEventRequest.WebsocketEventCase', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketEventResponse', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketEventResponse.WebsocketResponseCase', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketEventType', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketMessageEvent', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketSendRequest', null, global);
goog.exportSymbol('proto.nitric.proto.websockets.v1.WebsocketSendResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.displayName = 'proto.nitric.proto.websockets.v1.WebsocketDetailsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.displayName = 'proto.nitric.proto.websockets.v1.WebsocketDetailsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketSendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketSendRequest.displayName = 'proto.nitric.proto.websockets.v1.WebsocketSendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketSendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketSendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketSendResponse.displayName = 'proto.nitric.proto.websockets.v1.WebsocketSendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.displayName = 'proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.displayName = 'proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.websockets.v1.ClientMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.websockets.v1.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.ClientMessage.displayName = 'proto.nitric.proto.websockets.v1.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.RegistrationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.RegistrationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.RegistrationResponse.displayName = 'proto.nitric.proto.websockets.v1.RegistrationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.RegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.RegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.RegistrationRequest.displayName = 'proto.nitric.proto.websockets.v1.RegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.websockets.v1.WebsocketEventRequest.oneofGroups_);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketEventRequest.displayName = 'proto.nitric.proto.websockets.v1.WebsocketEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.QueryValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.proto.websockets.v1.QueryValue.repeatedFields_, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.QueryValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.QueryValue.displayName = 'proto.nitric.proto.websockets.v1.QueryValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.websockets.v1.ServerMessage.oneofGroups_);
};
goog.inherits(proto.nitric.proto.websockets.v1.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.ServerMessage.displayName = 'proto.nitric.proto.websockets.v1.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.proto.websockets.v1.WebsocketEventResponse.oneofGroups_);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketEventResponse.displayName = 'proto.nitric.proto.websockets.v1.WebsocketEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketConnectionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.displayName = 'proto.nitric.proto.websockets.v1.WebsocketConnectionEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.displayName = 'proto.nitric.proto.websockets.v1.WebsocketConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.displayName = 'proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.proto.websockets.v1.WebsocketMessageEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.proto.websockets.v1.WebsocketMessageEvent.displayName = 'proto.nitric.proto.websockets.v1.WebsocketMessageEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    socketName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketDetailsRequest}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketDetailsRequest;
  return proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketDetailsRequest}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocketName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string socket_name = 1;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.prototype.getSocketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketDetailsRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsRequest.prototype.setSocketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketDetailsResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketDetailsResponse;
  return proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketDetailsResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketDetailsResponse} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketDetailsResponse.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketSendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketSendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    socketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketSendRequest}
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketSendRequest;
  return proto.nitric.proto.websockets.v1.WebsocketSendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketSendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketSendRequest}
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketSendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketSendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string socket_name = 1;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.getSocketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketSendRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.setSocketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_id = 2;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketSendRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketSendRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketSendRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketSendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketSendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketSendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketSendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketSendResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketSendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketSendResponse;
  return proto.nitric.proto.websockets.v1.WebsocketSendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketSendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketSendResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketSendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketSendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketSendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketSendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketSendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    socketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest;
  return proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string socket_name = 1;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.prototype.getSocketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.prototype.setSocketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_id = 2;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse;
  return proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketCloseConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.websockets.v1.ClientMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.proto.websockets.v1.ClientMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  REGISTRATION_REQUEST: 2,
  WEBSOCKET_EVENT_RESPONSE: 3
};

/**
 * @return {proto.nitric.proto.websockets.v1.ClientMessage.ContentCase}
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.websockets.v1.ClientMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.websockets.v1.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registrationRequest: (f = msg.getRegistrationRequest()) && proto.nitric.proto.websockets.v1.RegistrationRequest.toObject(includeInstance, f),
    websocketEventResponse: (f = msg.getWebsocketEventResponse()) && proto.nitric.proto.websockets.v1.WebsocketEventResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.ClientMessage}
 */
proto.nitric.proto.websockets.v1.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.ClientMessage;
  return proto.nitric.proto.websockets.v1.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.ClientMessage}
 */
proto.nitric.proto.websockets.v1.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.proto.websockets.v1.RegistrationRequest;
      reader.readMessage(value,proto.nitric.proto.websockets.v1.RegistrationRequest.deserializeBinaryFromReader);
      msg.setRegistrationRequest(value);
      break;
    case 3:
      var value = new proto.nitric.proto.websockets.v1.WebsocketEventResponse;
      reader.readMessage(value,proto.nitric.proto.websockets.v1.WebsocketEventResponse.deserializeBinaryFromReader);
      msg.setWebsocketEventResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistrationRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.websockets.v1.RegistrationRequest.serializeBinaryToWriter
    );
  }
  f = message.getWebsocketEventResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.proto.websockets.v1.WebsocketEventResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.ClientMessage} returns this
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationRequest registration_request = 2;
 * @return {?proto.nitric.proto.websockets.v1.RegistrationRequest}
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.getRegistrationRequest = function() {
  return /** @type{?proto.nitric.proto.websockets.v1.RegistrationRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.websockets.v1.RegistrationRequest, 2));
};


/**
 * @param {?proto.nitric.proto.websockets.v1.RegistrationRequest|undefined} value
 * @return {!proto.nitric.proto.websockets.v1.ClientMessage} returns this
*/
proto.nitric.proto.websockets.v1.ClientMessage.prototype.setRegistrationRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.proto.websockets.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.websockets.v1.ClientMessage} returns this
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.clearRegistrationRequest = function() {
  return this.setRegistrationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.hasRegistrationRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebsocketEventResponse websocket_event_response = 3;
 * @return {?proto.nitric.proto.websockets.v1.WebsocketEventResponse}
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.getWebsocketEventResponse = function() {
  return /** @type{?proto.nitric.proto.websockets.v1.WebsocketEventResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.websockets.v1.WebsocketEventResponse, 3));
};


/**
 * @param {?proto.nitric.proto.websockets.v1.WebsocketEventResponse|undefined} value
 * @return {!proto.nitric.proto.websockets.v1.ClientMessage} returns this
*/
proto.nitric.proto.websockets.v1.ClientMessage.prototype.setWebsocketEventResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.proto.websockets.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.websockets.v1.ClientMessage} returns this
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.clearWebsocketEventResponse = function() {
  return this.setWebsocketEventResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.websockets.v1.ClientMessage.prototype.hasWebsocketEventResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.RegistrationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.RegistrationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.RegistrationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.RegistrationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.RegistrationResponse}
 */
proto.nitric.proto.websockets.v1.RegistrationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.RegistrationResponse;
  return proto.nitric.proto.websockets.v1.RegistrationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.RegistrationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.RegistrationResponse}
 */
proto.nitric.proto.websockets.v1.RegistrationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.RegistrationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.RegistrationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.RegistrationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.RegistrationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.RegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.RegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    socketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.RegistrationRequest}
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.RegistrationRequest;
  return proto.nitric.proto.websockets.v1.RegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.RegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.RegistrationRequest}
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocketName(value);
      break;
    case 2:
      var value = /** @type {!proto.nitric.proto.websockets.v1.WebsocketEventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.RegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.RegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string socket_name = 1;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.prototype.getSocketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.prototype.setSocketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional WebsocketEventType event_type = 2;
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventType}
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.prototype.getEventType = function() {
  return /** @type {!proto.nitric.proto.websockets.v1.WebsocketEventType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nitric.proto.websockets.v1.WebsocketEventType} value
 * @return {!proto.nitric.proto.websockets.v1.RegistrationRequest} returns this
 */
proto.nitric.proto.websockets.v1.RegistrationRequest.prototype.setEventType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.oneofGroups_ = [[10,11,12]];

/**
 * @enum {number}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.WebsocketEventCase = {
  WEBSOCKET_EVENT_NOT_SET: 0,
  CONNECTION: 10,
  DISCONNECTION: 11,
  MESSAGE: 12
};

/**
 * @return {proto.nitric.proto.websockets.v1.WebsocketEventRequest.WebsocketEventCase}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.getWebsocketEventCase = function() {
  return /** @type {proto.nitric.proto.websockets.v1.WebsocketEventRequest.WebsocketEventCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.websockets.v1.WebsocketEventRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    socketName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    connection: (f = msg.getConnection()) && proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.toObject(includeInstance, f),
    disconnection: (f = msg.getDisconnection()) && proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.nitric.proto.websockets.v1.WebsocketMessageEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketEventRequest;
  return proto.nitric.proto.websockets.v1.WebsocketEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocketName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 10:
      var value = new proto.nitric.proto.websockets.v1.WebsocketConnectionEvent;
      reader.readMessage(value,proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    case 11:
      var value = new proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent;
      reader.readMessage(value,proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.deserializeBinaryFromReader);
      msg.setDisconnection(value);
      break;
    case 12:
      var value = new proto.nitric.proto.websockets.v1.WebsocketMessageEvent;
      reader.readMessage(value,proto.nitric.proto.websockets.v1.WebsocketMessageEvent.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocketName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.serializeBinaryToWriter
    );
  }
  f = message.getDisconnection();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.nitric.proto.websockets.v1.WebsocketMessageEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional string socket_name = 1;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.getSocketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.setSocketName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_id = 2;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional WebsocketConnectionEvent connection = 10;
 * @return {?proto.nitric.proto.websockets.v1.WebsocketConnectionEvent}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.getConnection = function() {
  return /** @type{?proto.nitric.proto.websockets.v1.WebsocketConnectionEvent} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.websockets.v1.WebsocketConnectionEvent, 10));
};


/**
 * @param {?proto.nitric.proto.websockets.v1.WebsocketConnectionEvent|undefined} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} returns this
*/
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.setConnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.proto.websockets.v1.WebsocketEventRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.clearConnection = function() {
  return this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional WebsocketDisconnectionEvent disconnection = 11;
 * @return {?proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.getDisconnection = function() {
  return /** @type{?proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent, 11));
};


/**
 * @param {?proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent|undefined} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} returns this
*/
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.setDisconnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.nitric.proto.websockets.v1.WebsocketEventRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.clearDisconnection = function() {
  return this.setDisconnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.hasDisconnection = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional WebsocketMessageEvent message = 12;
 * @return {?proto.nitric.proto.websockets.v1.WebsocketMessageEvent}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.getMessage = function() {
  return /** @type{?proto.nitric.proto.websockets.v1.WebsocketMessageEvent} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.websockets.v1.WebsocketMessageEvent, 12));
};


/**
 * @param {?proto.nitric.proto.websockets.v1.WebsocketMessageEvent|undefined} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} returns this
*/
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.nitric.proto.websockets.v1.WebsocketEventRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventRequest} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.websockets.v1.WebsocketEventRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.proto.websockets.v1.QueryValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.QueryValue.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.QueryValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.QueryValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.QueryValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.QueryValue}
 */
proto.nitric.proto.websockets.v1.QueryValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.QueryValue;
  return proto.nitric.proto.websockets.v1.QueryValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.QueryValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.QueryValue}
 */
proto.nitric.proto.websockets.v1.QueryValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.QueryValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.QueryValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.QueryValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.QueryValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string value = 1;
 * @return {!Array<string>}
 */
proto.nitric.proto.websockets.v1.QueryValue.prototype.getValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.proto.websockets.v1.QueryValue} returns this
 */
proto.nitric.proto.websockets.v1.QueryValue.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.proto.websockets.v1.QueryValue} returns this
 */
proto.nitric.proto.websockets.v1.QueryValue.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.proto.websockets.v1.QueryValue} returns this
 */
proto.nitric.proto.websockets.v1.QueryValue.prototype.clearValueList = function() {
  return this.setValueList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.websockets.v1.ServerMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.proto.websockets.v1.ServerMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  REGISTRATION_RESPONSE: 2,
  WEBSOCKET_EVENT_REQUEST: 3
};

/**
 * @return {proto.nitric.proto.websockets.v1.ServerMessage.ContentCase}
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.proto.websockets.v1.ServerMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.websockets.v1.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registrationResponse: (f = msg.getRegistrationResponse()) && proto.nitric.proto.websockets.v1.RegistrationResponse.toObject(includeInstance, f),
    websocketEventRequest: (f = msg.getWebsocketEventRequest()) && proto.nitric.proto.websockets.v1.WebsocketEventRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.ServerMessage}
 */
proto.nitric.proto.websockets.v1.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.ServerMessage;
  return proto.nitric.proto.websockets.v1.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.ServerMessage}
 */
proto.nitric.proto.websockets.v1.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.proto.websockets.v1.RegistrationResponse;
      reader.readMessage(value,proto.nitric.proto.websockets.v1.RegistrationResponse.deserializeBinaryFromReader);
      msg.setRegistrationResponse(value);
      break;
    case 3:
      var value = new proto.nitric.proto.websockets.v1.WebsocketEventRequest;
      reader.readMessage(value,proto.nitric.proto.websockets.v1.WebsocketEventRequest.deserializeBinaryFromReader);
      msg.setWebsocketEventRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistrationResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.proto.websockets.v1.RegistrationResponse.serializeBinaryToWriter
    );
  }
  f = message.getWebsocketEventRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.proto.websockets.v1.WebsocketEventRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.proto.websockets.v1.ServerMessage} returns this
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationResponse registration_response = 2;
 * @return {?proto.nitric.proto.websockets.v1.RegistrationResponse}
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.getRegistrationResponse = function() {
  return /** @type{?proto.nitric.proto.websockets.v1.RegistrationResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.websockets.v1.RegistrationResponse, 2));
};


/**
 * @param {?proto.nitric.proto.websockets.v1.RegistrationResponse|undefined} value
 * @return {!proto.nitric.proto.websockets.v1.ServerMessage} returns this
*/
proto.nitric.proto.websockets.v1.ServerMessage.prototype.setRegistrationResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.proto.websockets.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.websockets.v1.ServerMessage} returns this
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.clearRegistrationResponse = function() {
  return this.setRegistrationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.hasRegistrationResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebsocketEventRequest websocket_event_request = 3;
 * @return {?proto.nitric.proto.websockets.v1.WebsocketEventRequest}
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.getWebsocketEventRequest = function() {
  return /** @type{?proto.nitric.proto.websockets.v1.WebsocketEventRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.websockets.v1.WebsocketEventRequest, 3));
};


/**
 * @param {?proto.nitric.proto.websockets.v1.WebsocketEventRequest|undefined} value
 * @return {!proto.nitric.proto.websockets.v1.ServerMessage} returns this
*/
proto.nitric.proto.websockets.v1.ServerMessage.prototype.setWebsocketEventRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.proto.websockets.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.websockets.v1.ServerMessage} returns this
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.clearWebsocketEventRequest = function() {
  return this.setWebsocketEventRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.websockets.v1.ServerMessage.prototype.hasWebsocketEventRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.oneofGroups_ = [[10]];

/**
 * @enum {number}
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.WebsocketResponseCase = {
  WEBSOCKET_RESPONSE_NOT_SET: 0,
  CONNECTION_RESPONSE: 10
};

/**
 * @return {proto.nitric.proto.websockets.v1.WebsocketEventResponse.WebsocketResponseCase}
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.prototype.getWebsocketResponseCase = function() {
  return /** @type {proto.nitric.proto.websockets.v1.WebsocketEventResponse.WebsocketResponseCase} */(jspb.Message.computeOneofCase(this, proto.nitric.proto.websockets.v1.WebsocketEventResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionResponse: (f = msg.getConnectionResponse()) && proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketEventResponse;
  return proto.nitric.proto.websockets.v1.WebsocketEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.nitric.proto.websockets.v1.WebsocketConnectionResponse;
      reader.readMessage(value,proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.deserializeBinaryFromReader);
      msg.setConnectionResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionResponse();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional WebsocketConnectionResponse connection_response = 10;
 * @return {?proto.nitric.proto.websockets.v1.WebsocketConnectionResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.prototype.getConnectionResponse = function() {
  return /** @type{?proto.nitric.proto.websockets.v1.WebsocketConnectionResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.proto.websockets.v1.WebsocketConnectionResponse, 10));
};


/**
 * @param {?proto.nitric.proto.websockets.v1.WebsocketConnectionResponse|undefined} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventResponse} returns this
*/
proto.nitric.proto.websockets.v1.WebsocketEventResponse.prototype.setConnectionResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.proto.websockets.v1.WebsocketEventResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketEventResponse} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.prototype.clearConnectionResponse = function() {
  return this.setConnectionResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.proto.websockets.v1.WebsocketEventResponse.prototype.hasConnectionResponse = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketConnectionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryParamsMap: (f = msg.getQueryParamsMap()) ? f.toObject(includeInstance, proto.nitric.proto.websockets.v1.QueryValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketConnectionEvent}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketConnectionEvent;
  return proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketConnectionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketConnectionEvent}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getQueryParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.proto.websockets.v1.QueryValue.deserializeBinaryFromReader, "", new proto.nitric.proto.websockets.v1.QueryValue());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketConnectionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.proto.websockets.v1.QueryValue.serializeBinaryToWriter);
  }
};


/**
 * map<string, QueryValue> query_params = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.proto.websockets.v1.QueryValue>}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.prototype.getQueryParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.proto.websockets.v1.QueryValue>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.nitric.proto.websockets.v1.QueryValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketConnectionEvent} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionEvent.prototype.clearQueryParamsMap = function() {
  this.getQueryParamsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reject: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketConnectionResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketConnectionResponse;
  return proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketConnectionResponse}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReject();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool reject = 1;
 * @return {boolean}
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.prototype.getReject = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketConnectionResponse} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketConnectionResponse.prototype.setReject = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent}
 */
proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent;
  return proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent}
 */
proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketDisconnectionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.proto.websockets.v1.WebsocketMessageEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.proto.websockets.v1.WebsocketMessageEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketMessageEvent}
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.proto.websockets.v1.WebsocketMessageEvent;
  return proto.nitric.proto.websockets.v1.WebsocketMessageEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketMessageEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.proto.websockets.v1.WebsocketMessageEvent}
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.proto.websockets.v1.WebsocketMessageEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.proto.websockets.v1.WebsocketMessageEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes body = 1;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.proto.websockets.v1.WebsocketMessageEvent} returns this
 */
proto.nitric.proto.websockets.v1.WebsocketMessageEvent.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.nitric.proto.websockets.v1.WebsocketEventType = {
  CONNECT: 0,
  DISCONNECT: 1,
  MESSAGE: 2
};

goog.object.extend(exports, proto.nitric.proto.websockets.v1);
