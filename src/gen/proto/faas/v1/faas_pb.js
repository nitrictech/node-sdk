// source: proto/faas/v1/faas.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.nitric.faas.v1.ApiWorker', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ApiWorkerOptions', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ApiWorkerScopes', null, global);
goog.exportSymbol('proto.nitric.faas.v1.BucketNotification', null, global);
goog.exportSymbol('proto.nitric.faas.v1.BucketNotificationConfig', null, global);
goog.exportSymbol('proto.nitric.faas.v1.BucketNotificationType', null, global);
goog.exportSymbol('proto.nitric.faas.v1.BucketNotificationWorker', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ClientMessage', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ClientMessage.ContentCase', null, global);
goog.exportSymbol('proto.nitric.faas.v1.HeaderValue', null, global);
goog.exportSymbol('proto.nitric.faas.v1.HttpResponseContext', null, global);
goog.exportSymbol('proto.nitric.faas.v1.HttpTriggerContext', null, global);
goog.exportSymbol('proto.nitric.faas.v1.InitRequest', null, global);
goog.exportSymbol('proto.nitric.faas.v1.InitRequest.WorkerCase', null, global);
goog.exportSymbol('proto.nitric.faas.v1.InitResponse', null, global);
goog.exportSymbol('proto.nitric.faas.v1.NotificationResponseContext', null, global);
goog.exportSymbol('proto.nitric.faas.v1.NotificationTriggerContext', null, global);
goog.exportSymbol('proto.nitric.faas.v1.NotificationTriggerContext.NotificationCase', null, global);
goog.exportSymbol('proto.nitric.faas.v1.QueryValue', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ScheduleCron', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ScheduleRate', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ScheduleWorker', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ScheduleWorker.CadenceCase', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ServerMessage', null, global);
goog.exportSymbol('proto.nitric.faas.v1.ServerMessage.ContentCase', null, global);
goog.exportSymbol('proto.nitric.faas.v1.SubscriptionWorker', null, global);
goog.exportSymbol('proto.nitric.faas.v1.TopicResponseContext', null, global);
goog.exportSymbol('proto.nitric.faas.v1.TopicTriggerContext', null, global);
goog.exportSymbol('proto.nitric.faas.v1.TraceContext', null, global);
goog.exportSymbol('proto.nitric.faas.v1.TriggerRequest', null, global);
goog.exportSymbol('proto.nitric.faas.v1.TriggerRequest.ContextCase', null, global);
goog.exportSymbol('proto.nitric.faas.v1.TriggerResponse', null, global);
goog.exportSymbol('proto.nitric.faas.v1.TriggerResponse.ContextCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.faas.v1.ClientMessage.oneofGroups_);
};
goog.inherits(proto.nitric.faas.v1.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.ClientMessage.displayName = 'proto.nitric.faas.v1.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.faas.v1.ServerMessage.oneofGroups_);
};
goog.inherits(proto.nitric.faas.v1.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.ServerMessage.displayName = 'proto.nitric.faas.v1.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.ApiWorkerScopes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.faas.v1.ApiWorkerScopes.repeatedFields_, null);
};
goog.inherits(proto.nitric.faas.v1.ApiWorkerScopes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.ApiWorkerScopes.displayName = 'proto.nitric.faas.v1.ApiWorkerScopes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.ApiWorkerOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.ApiWorkerOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.ApiWorkerOptions.displayName = 'proto.nitric.faas.v1.ApiWorkerOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.ApiWorker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.faas.v1.ApiWorker.repeatedFields_, null);
};
goog.inherits(proto.nitric.faas.v1.ApiWorker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.ApiWorker.displayName = 'proto.nitric.faas.v1.ApiWorker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.SubscriptionWorker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.SubscriptionWorker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.SubscriptionWorker.displayName = 'proto.nitric.faas.v1.SubscriptionWorker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.ScheduleWorker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.faas.v1.ScheduleWorker.oneofGroups_);
};
goog.inherits(proto.nitric.faas.v1.ScheduleWorker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.ScheduleWorker.displayName = 'proto.nitric.faas.v1.ScheduleWorker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.ScheduleRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.ScheduleRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.ScheduleRate.displayName = 'proto.nitric.faas.v1.ScheduleRate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.ScheduleCron = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.ScheduleCron, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.ScheduleCron.displayName = 'proto.nitric.faas.v1.ScheduleCron';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.BucketNotificationWorker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.BucketNotificationWorker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.BucketNotificationWorker.displayName = 'proto.nitric.faas.v1.BucketNotificationWorker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.BucketNotificationConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.BucketNotificationConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.BucketNotificationConfig.displayName = 'proto.nitric.faas.v1.BucketNotificationConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.InitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.faas.v1.InitRequest.oneofGroups_);
};
goog.inherits(proto.nitric.faas.v1.InitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.InitRequest.displayName = 'proto.nitric.faas.v1.InitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.InitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.InitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.InitResponse.displayName = 'proto.nitric.faas.v1.InitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.TraceContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.TraceContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.TraceContext.displayName = 'proto.nitric.faas.v1.TraceContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.TriggerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.faas.v1.TriggerRequest.oneofGroups_);
};
goog.inherits(proto.nitric.faas.v1.TriggerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.TriggerRequest.displayName = 'proto.nitric.faas.v1.TriggerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.HeaderValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.faas.v1.HeaderValue.repeatedFields_, null);
};
goog.inherits(proto.nitric.faas.v1.HeaderValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.HeaderValue.displayName = 'proto.nitric.faas.v1.HeaderValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.QueryValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.faas.v1.QueryValue.repeatedFields_, null);
};
goog.inherits(proto.nitric.faas.v1.QueryValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.QueryValue.displayName = 'proto.nitric.faas.v1.QueryValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.HttpTriggerContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.HttpTriggerContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.HttpTriggerContext.displayName = 'proto.nitric.faas.v1.HttpTriggerContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.TopicTriggerContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.TopicTriggerContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.TopicTriggerContext.displayName = 'proto.nitric.faas.v1.TopicTriggerContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.BucketNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.BucketNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.BucketNotification.displayName = 'proto.nitric.faas.v1.BucketNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.NotificationTriggerContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.faas.v1.NotificationTriggerContext.oneofGroups_);
};
goog.inherits(proto.nitric.faas.v1.NotificationTriggerContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.NotificationTriggerContext.displayName = 'proto.nitric.faas.v1.NotificationTriggerContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.TriggerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.faas.v1.TriggerResponse.oneofGroups_);
};
goog.inherits(proto.nitric.faas.v1.TriggerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.TriggerResponse.displayName = 'proto.nitric.faas.v1.TriggerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.HttpResponseContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.HttpResponseContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.HttpResponseContext.displayName = 'proto.nitric.faas.v1.HttpResponseContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.TopicResponseContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.TopicResponseContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.TopicResponseContext.displayName = 'proto.nitric.faas.v1.TopicResponseContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.faas.v1.NotificationResponseContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.faas.v1.NotificationResponseContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.faas.v1.NotificationResponseContext.displayName = 'proto.nitric.faas.v1.NotificationResponseContext';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.faas.v1.ClientMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.faas.v1.ClientMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  INIT_REQUEST: 2,
  TRIGGER_RESPONSE: 3
};

/**
 * @return {proto.nitric.faas.v1.ClientMessage.ContentCase}
 */
proto.nitric.faas.v1.ClientMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.faas.v1.ClientMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.faas.v1.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    initRequest: (f = msg.getInitRequest()) && proto.nitric.faas.v1.InitRequest.toObject(includeInstance, f),
    triggerResponse: (f = msg.getTriggerResponse()) && proto.nitric.faas.v1.TriggerResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.ClientMessage}
 */
proto.nitric.faas.v1.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.ClientMessage;
  return proto.nitric.faas.v1.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.ClientMessage}
 */
proto.nitric.faas.v1.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.faas.v1.InitRequest;
      reader.readMessage(value,proto.nitric.faas.v1.InitRequest.deserializeBinaryFromReader);
      msg.setInitRequest(value);
      break;
    case 3:
      var value = new proto.nitric.faas.v1.TriggerResponse;
      reader.readMessage(value,proto.nitric.faas.v1.TriggerResponse.deserializeBinaryFromReader);
      msg.setTriggerResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInitRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.faas.v1.InitRequest.serializeBinaryToWriter
    );
  }
  f = message.getTriggerResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.faas.v1.TriggerResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.faas.v1.ClientMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.ClientMessage} returns this
 */
proto.nitric.faas.v1.ClientMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InitRequest init_request = 2;
 * @return {?proto.nitric.faas.v1.InitRequest}
 */
proto.nitric.faas.v1.ClientMessage.prototype.getInitRequest = function() {
  return /** @type{?proto.nitric.faas.v1.InitRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.InitRequest, 2));
};


/**
 * @param {?proto.nitric.faas.v1.InitRequest|undefined} value
 * @return {!proto.nitric.faas.v1.ClientMessage} returns this
*/
proto.nitric.faas.v1.ClientMessage.prototype.setInitRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.faas.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.ClientMessage} returns this
 */
proto.nitric.faas.v1.ClientMessage.prototype.clearInitRequest = function() {
  return this.setInitRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.ClientMessage.prototype.hasInitRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TriggerResponse trigger_response = 3;
 * @return {?proto.nitric.faas.v1.TriggerResponse}
 */
proto.nitric.faas.v1.ClientMessage.prototype.getTriggerResponse = function() {
  return /** @type{?proto.nitric.faas.v1.TriggerResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.TriggerResponse, 3));
};


/**
 * @param {?proto.nitric.faas.v1.TriggerResponse|undefined} value
 * @return {!proto.nitric.faas.v1.ClientMessage} returns this
*/
proto.nitric.faas.v1.ClientMessage.prototype.setTriggerResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.faas.v1.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.ClientMessage} returns this
 */
proto.nitric.faas.v1.ClientMessage.prototype.clearTriggerResponse = function() {
  return this.setTriggerResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.ClientMessage.prototype.hasTriggerResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.faas.v1.ServerMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.nitric.faas.v1.ServerMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  INIT_RESPONSE: 2,
  TRIGGER_REQUEST: 3
};

/**
 * @return {proto.nitric.faas.v1.ServerMessage.ContentCase}
 */
proto.nitric.faas.v1.ServerMessage.prototype.getContentCase = function() {
  return /** @type {proto.nitric.faas.v1.ServerMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.faas.v1.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    initResponse: (f = msg.getInitResponse()) && proto.nitric.faas.v1.InitResponse.toObject(includeInstance, f),
    triggerRequest: (f = msg.getTriggerRequest()) && proto.nitric.faas.v1.TriggerRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.ServerMessage}
 */
proto.nitric.faas.v1.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.ServerMessage;
  return proto.nitric.faas.v1.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.ServerMessage}
 */
proto.nitric.faas.v1.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nitric.faas.v1.InitResponse;
      reader.readMessage(value,proto.nitric.faas.v1.InitResponse.deserializeBinaryFromReader);
      msg.setInitResponse(value);
      break;
    case 3:
      var value = new proto.nitric.faas.v1.TriggerRequest;
      reader.readMessage(value,proto.nitric.faas.v1.TriggerRequest.deserializeBinaryFromReader);
      msg.setTriggerRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInitResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.faas.v1.InitResponse.serializeBinaryToWriter
    );
  }
  f = message.getTriggerRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.faas.v1.TriggerRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.faas.v1.ServerMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.ServerMessage} returns this
 */
proto.nitric.faas.v1.ServerMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InitResponse init_response = 2;
 * @return {?proto.nitric.faas.v1.InitResponse}
 */
proto.nitric.faas.v1.ServerMessage.prototype.getInitResponse = function() {
  return /** @type{?proto.nitric.faas.v1.InitResponse} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.InitResponse, 2));
};


/**
 * @param {?proto.nitric.faas.v1.InitResponse|undefined} value
 * @return {!proto.nitric.faas.v1.ServerMessage} returns this
*/
proto.nitric.faas.v1.ServerMessage.prototype.setInitResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.faas.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.ServerMessage} returns this
 */
proto.nitric.faas.v1.ServerMessage.prototype.clearInitResponse = function() {
  return this.setInitResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.ServerMessage.prototype.hasInitResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TriggerRequest trigger_request = 3;
 * @return {?proto.nitric.faas.v1.TriggerRequest}
 */
proto.nitric.faas.v1.ServerMessage.prototype.getTriggerRequest = function() {
  return /** @type{?proto.nitric.faas.v1.TriggerRequest} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.TriggerRequest, 3));
};


/**
 * @param {?proto.nitric.faas.v1.TriggerRequest|undefined} value
 * @return {!proto.nitric.faas.v1.ServerMessage} returns this
*/
proto.nitric.faas.v1.ServerMessage.prototype.setTriggerRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.faas.v1.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.ServerMessage} returns this
 */
proto.nitric.faas.v1.ServerMessage.prototype.clearTriggerRequest = function() {
  return this.setTriggerRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.ServerMessage.prototype.hasTriggerRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.faas.v1.ApiWorkerScopes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.ApiWorkerScopes.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.ApiWorkerScopes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.ApiWorkerScopes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ApiWorkerScopes.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.ApiWorkerScopes}
 */
proto.nitric.faas.v1.ApiWorkerScopes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.ApiWorkerScopes;
  return proto.nitric.faas.v1.ApiWorkerScopes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.ApiWorkerScopes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.ApiWorkerScopes}
 */
proto.nitric.faas.v1.ApiWorkerScopes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addScopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.ApiWorkerScopes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.ApiWorkerScopes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.ApiWorkerScopes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ApiWorkerScopes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string scopes = 1;
 * @return {!Array<string>}
 */
proto.nitric.faas.v1.ApiWorkerScopes.prototype.getScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.faas.v1.ApiWorkerScopes} returns this
 */
proto.nitric.faas.v1.ApiWorkerScopes.prototype.setScopesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.faas.v1.ApiWorkerScopes} returns this
 */
proto.nitric.faas.v1.ApiWorkerScopes.prototype.addScopes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.faas.v1.ApiWorkerScopes} returns this
 */
proto.nitric.faas.v1.ApiWorkerScopes.prototype.clearScopesList = function() {
  return this.setScopesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.ApiWorkerOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.ApiWorkerOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.ApiWorkerOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ApiWorkerOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    securityMap: (f = msg.getSecurityMap()) ? f.toObject(includeInstance, proto.nitric.faas.v1.ApiWorkerScopes.toObject) : [],
    securityDisabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.ApiWorkerOptions}
 */
proto.nitric.faas.v1.ApiWorkerOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.ApiWorkerOptions;
  return proto.nitric.faas.v1.ApiWorkerOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.ApiWorkerOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.ApiWorkerOptions}
 */
proto.nitric.faas.v1.ApiWorkerOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSecurityMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.faas.v1.ApiWorkerScopes.deserializeBinaryFromReader, "", new proto.nitric.faas.v1.ApiWorkerScopes());
         });
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSecurityDisabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.ApiWorkerOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.ApiWorkerOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.ApiWorkerOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ApiWorkerOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecurityMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.faas.v1.ApiWorkerScopes.serializeBinaryToWriter);
  }
  f = message.getSecurityDisabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * map<string, ApiWorkerScopes> security = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.faas.v1.ApiWorkerScopes>}
 */
proto.nitric.faas.v1.ApiWorkerOptions.prototype.getSecurityMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.faas.v1.ApiWorkerScopes>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.nitric.faas.v1.ApiWorkerScopes));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.faas.v1.ApiWorkerOptions} returns this
 */
proto.nitric.faas.v1.ApiWorkerOptions.prototype.clearSecurityMap = function() {
  this.getSecurityMap().clear();
  return this;};


/**
 * optional bool security_disabled = 2;
 * @return {boolean}
 */
proto.nitric.faas.v1.ApiWorkerOptions.prototype.getSecurityDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nitric.faas.v1.ApiWorkerOptions} returns this
 */
proto.nitric.faas.v1.ApiWorkerOptions.prototype.setSecurityDisabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.faas.v1.ApiWorker.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.ApiWorker.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.ApiWorker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.ApiWorker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ApiWorker.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    methodsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    options: (f = msg.getOptions()) && proto.nitric.faas.v1.ApiWorkerOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.ApiWorker}
 */
proto.nitric.faas.v1.ApiWorker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.ApiWorker;
  return proto.nitric.faas.v1.ApiWorker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.ApiWorker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.ApiWorker}
 */
proto.nitric.faas.v1.ApiWorker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMethods(value);
      break;
    case 4:
      var value = new proto.nitric.faas.v1.ApiWorkerOptions;
      reader.readMessage(value,proto.nitric.faas.v1.ApiWorkerOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.ApiWorker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.ApiWorker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.ApiWorker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ApiWorker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nitric.faas.v1.ApiWorkerOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string api = 1;
 * @return {string}
 */
proto.nitric.faas.v1.ApiWorker.prototype.getApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.ApiWorker} returns this
 */
proto.nitric.faas.v1.ApiWorker.prototype.setApi = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.nitric.faas.v1.ApiWorker.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.ApiWorker} returns this
 */
proto.nitric.faas.v1.ApiWorker.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string methods = 3;
 * @return {!Array<string>}
 */
proto.nitric.faas.v1.ApiWorker.prototype.getMethodsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.faas.v1.ApiWorker} returns this
 */
proto.nitric.faas.v1.ApiWorker.prototype.setMethodsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.faas.v1.ApiWorker} returns this
 */
proto.nitric.faas.v1.ApiWorker.prototype.addMethods = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.faas.v1.ApiWorker} returns this
 */
proto.nitric.faas.v1.ApiWorker.prototype.clearMethodsList = function() {
  return this.setMethodsList([]);
};


/**
 * optional ApiWorkerOptions options = 4;
 * @return {?proto.nitric.faas.v1.ApiWorkerOptions}
 */
proto.nitric.faas.v1.ApiWorker.prototype.getOptions = function() {
  return /** @type{?proto.nitric.faas.v1.ApiWorkerOptions} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.ApiWorkerOptions, 4));
};


/**
 * @param {?proto.nitric.faas.v1.ApiWorkerOptions|undefined} value
 * @return {!proto.nitric.faas.v1.ApiWorker} returns this
*/
proto.nitric.faas.v1.ApiWorker.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.ApiWorker} returns this
 */
proto.nitric.faas.v1.ApiWorker.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.ApiWorker.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.SubscriptionWorker.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.SubscriptionWorker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.SubscriptionWorker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.SubscriptionWorker.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.SubscriptionWorker}
 */
proto.nitric.faas.v1.SubscriptionWorker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.SubscriptionWorker;
  return proto.nitric.faas.v1.SubscriptionWorker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.SubscriptionWorker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.SubscriptionWorker}
 */
proto.nitric.faas.v1.SubscriptionWorker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.SubscriptionWorker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.SubscriptionWorker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.SubscriptionWorker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.SubscriptionWorker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.nitric.faas.v1.SubscriptionWorker.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.SubscriptionWorker} returns this
 */
proto.nitric.faas.v1.SubscriptionWorker.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.faas.v1.ScheduleWorker.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.nitric.faas.v1.ScheduleWorker.CadenceCase = {
  CADENCE_NOT_SET: 0,
  RATE: 10,
  CRON: 11
};

/**
 * @return {proto.nitric.faas.v1.ScheduleWorker.CadenceCase}
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.getCadenceCase = function() {
  return /** @type {proto.nitric.faas.v1.ScheduleWorker.CadenceCase} */(jspb.Message.computeOneofCase(this, proto.nitric.faas.v1.ScheduleWorker.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.ScheduleWorker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.ScheduleWorker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ScheduleWorker.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rate: (f = msg.getRate()) && proto.nitric.faas.v1.ScheduleRate.toObject(includeInstance, f),
    cron: (f = msg.getCron()) && proto.nitric.faas.v1.ScheduleCron.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.ScheduleWorker}
 */
proto.nitric.faas.v1.ScheduleWorker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.ScheduleWorker;
  return proto.nitric.faas.v1.ScheduleWorker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.ScheduleWorker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.ScheduleWorker}
 */
proto.nitric.faas.v1.ScheduleWorker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 10:
      var value = new proto.nitric.faas.v1.ScheduleRate;
      reader.readMessage(value,proto.nitric.faas.v1.ScheduleRate.deserializeBinaryFromReader);
      msg.setRate(value);
      break;
    case 11:
      var value = new proto.nitric.faas.v1.ScheduleCron;
      reader.readMessage(value,proto.nitric.faas.v1.ScheduleCron.deserializeBinaryFromReader);
      msg.setCron(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.ScheduleWorker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.ScheduleWorker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ScheduleWorker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRate();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.faas.v1.ScheduleRate.serializeBinaryToWriter
    );
  }
  f = message.getCron();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nitric.faas.v1.ScheduleCron.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.ScheduleWorker} returns this
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ScheduleRate rate = 10;
 * @return {?proto.nitric.faas.v1.ScheduleRate}
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.getRate = function() {
  return /** @type{?proto.nitric.faas.v1.ScheduleRate} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.ScheduleRate, 10));
};


/**
 * @param {?proto.nitric.faas.v1.ScheduleRate|undefined} value
 * @return {!proto.nitric.faas.v1.ScheduleWorker} returns this
*/
proto.nitric.faas.v1.ScheduleWorker.prototype.setRate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.faas.v1.ScheduleWorker.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.ScheduleWorker} returns this
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.clearRate = function() {
  return this.setRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.hasRate = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ScheduleCron cron = 11;
 * @return {?proto.nitric.faas.v1.ScheduleCron}
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.getCron = function() {
  return /** @type{?proto.nitric.faas.v1.ScheduleCron} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.ScheduleCron, 11));
};


/**
 * @param {?proto.nitric.faas.v1.ScheduleCron|undefined} value
 * @return {!proto.nitric.faas.v1.ScheduleWorker} returns this
*/
proto.nitric.faas.v1.ScheduleWorker.prototype.setCron = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.nitric.faas.v1.ScheduleWorker.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.ScheduleWorker} returns this
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.clearCron = function() {
  return this.setCron(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.ScheduleWorker.prototype.hasCron = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.ScheduleRate.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.ScheduleRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.ScheduleRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ScheduleRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    rate: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.ScheduleRate}
 */
proto.nitric.faas.v1.ScheduleRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.ScheduleRate;
  return proto.nitric.faas.v1.ScheduleRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.ScheduleRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.ScheduleRate}
 */
proto.nitric.faas.v1.ScheduleRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.ScheduleRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.ScheduleRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.ScheduleRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ScheduleRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string rate = 1;
 * @return {string}
 */
proto.nitric.faas.v1.ScheduleRate.prototype.getRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.ScheduleRate} returns this
 */
proto.nitric.faas.v1.ScheduleRate.prototype.setRate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.ScheduleCron.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.ScheduleCron.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.ScheduleCron} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ScheduleCron.toObject = function(includeInstance, msg) {
  var f, obj = {
    cron: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.ScheduleCron}
 */
proto.nitric.faas.v1.ScheduleCron.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.ScheduleCron;
  return proto.nitric.faas.v1.ScheduleCron.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.ScheduleCron} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.ScheduleCron}
 */
proto.nitric.faas.v1.ScheduleCron.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCron(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.ScheduleCron.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.ScheduleCron.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.ScheduleCron} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.ScheduleCron.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCron();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cron = 1;
 * @return {string}
 */
proto.nitric.faas.v1.ScheduleCron.prototype.getCron = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.ScheduleCron} returns this
 */
proto.nitric.faas.v1.ScheduleCron.prototype.setCron = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.BucketNotificationWorker.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.BucketNotificationWorker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.BucketNotificationWorker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.BucketNotificationWorker.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucket: jspb.Message.getFieldWithDefault(msg, 1, ""),
    config: (f = msg.getConfig()) && proto.nitric.faas.v1.BucketNotificationConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.BucketNotificationWorker}
 */
proto.nitric.faas.v1.BucketNotificationWorker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.BucketNotificationWorker;
  return proto.nitric.faas.v1.BucketNotificationWorker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.BucketNotificationWorker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.BucketNotificationWorker}
 */
proto.nitric.faas.v1.BucketNotificationWorker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucket(value);
      break;
    case 2:
      var value = new proto.nitric.faas.v1.BucketNotificationConfig;
      reader.readMessage(value,proto.nitric.faas.v1.BucketNotificationConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.BucketNotificationWorker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.BucketNotificationWorker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.BucketNotificationWorker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.BucketNotificationWorker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.faas.v1.BucketNotificationConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string bucket = 1;
 * @return {string}
 */
proto.nitric.faas.v1.BucketNotificationWorker.prototype.getBucket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.BucketNotificationWorker} returns this
 */
proto.nitric.faas.v1.BucketNotificationWorker.prototype.setBucket = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BucketNotificationConfig config = 2;
 * @return {?proto.nitric.faas.v1.BucketNotificationConfig}
 */
proto.nitric.faas.v1.BucketNotificationWorker.prototype.getConfig = function() {
  return /** @type{?proto.nitric.faas.v1.BucketNotificationConfig} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.BucketNotificationConfig, 2));
};


/**
 * @param {?proto.nitric.faas.v1.BucketNotificationConfig|undefined} value
 * @return {!proto.nitric.faas.v1.BucketNotificationWorker} returns this
*/
proto.nitric.faas.v1.BucketNotificationWorker.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.BucketNotificationWorker} returns this
 */
proto.nitric.faas.v1.BucketNotificationWorker.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.BucketNotificationWorker.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.BucketNotificationConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.BucketNotificationConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.BucketNotificationConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.BucketNotificationConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    notificationPrefixFilter: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.BucketNotificationConfig}
 */
proto.nitric.faas.v1.BucketNotificationConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.BucketNotificationConfig;
  return proto.nitric.faas.v1.BucketNotificationConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.BucketNotificationConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.BucketNotificationConfig}
 */
proto.nitric.faas.v1.BucketNotificationConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nitric.faas.v1.BucketNotificationType} */ (reader.readEnum());
      msg.setNotificationType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationPrefixFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.BucketNotificationConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.BucketNotificationConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.BucketNotificationConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.BucketNotificationConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNotificationPrefixFilter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional BucketNotificationType notification_type = 1;
 * @return {!proto.nitric.faas.v1.BucketNotificationType}
 */
proto.nitric.faas.v1.BucketNotificationConfig.prototype.getNotificationType = function() {
  return /** @type {!proto.nitric.faas.v1.BucketNotificationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nitric.faas.v1.BucketNotificationType} value
 * @return {!proto.nitric.faas.v1.BucketNotificationConfig} returns this
 */
proto.nitric.faas.v1.BucketNotificationConfig.prototype.setNotificationType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string notification_prefix_filter = 2;
 * @return {string}
 */
proto.nitric.faas.v1.BucketNotificationConfig.prototype.getNotificationPrefixFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.BucketNotificationConfig} returns this
 */
proto.nitric.faas.v1.BucketNotificationConfig.prototype.setNotificationPrefixFilter = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.faas.v1.InitRequest.oneofGroups_ = [[10,11,12,13]];

/**
 * @enum {number}
 */
proto.nitric.faas.v1.InitRequest.WorkerCase = {
  WORKER_NOT_SET: 0,
  API: 10,
  SUBSCRIPTION: 11,
  SCHEDULE: 12,
  BUCKET_NOTIFICATION: 13
};

/**
 * @return {proto.nitric.faas.v1.InitRequest.WorkerCase}
 */
proto.nitric.faas.v1.InitRequest.prototype.getWorkerCase = function() {
  return /** @type {proto.nitric.faas.v1.InitRequest.WorkerCase} */(jspb.Message.computeOneofCase(this, proto.nitric.faas.v1.InitRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.InitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.InitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.InitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.InitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: (f = msg.getApi()) && proto.nitric.faas.v1.ApiWorker.toObject(includeInstance, f),
    subscription: (f = msg.getSubscription()) && proto.nitric.faas.v1.SubscriptionWorker.toObject(includeInstance, f),
    schedule: (f = msg.getSchedule()) && proto.nitric.faas.v1.ScheduleWorker.toObject(includeInstance, f),
    bucketNotification: (f = msg.getBucketNotification()) && proto.nitric.faas.v1.BucketNotificationWorker.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.InitRequest}
 */
proto.nitric.faas.v1.InitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.InitRequest;
  return proto.nitric.faas.v1.InitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.InitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.InitRequest}
 */
proto.nitric.faas.v1.InitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.nitric.faas.v1.ApiWorker;
      reader.readMessage(value,proto.nitric.faas.v1.ApiWorker.deserializeBinaryFromReader);
      msg.setApi(value);
      break;
    case 11:
      var value = new proto.nitric.faas.v1.SubscriptionWorker;
      reader.readMessage(value,proto.nitric.faas.v1.SubscriptionWorker.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    case 12:
      var value = new proto.nitric.faas.v1.ScheduleWorker;
      reader.readMessage(value,proto.nitric.faas.v1.ScheduleWorker.deserializeBinaryFromReader);
      msg.setSchedule(value);
      break;
    case 13:
      var value = new proto.nitric.faas.v1.BucketNotificationWorker;
      reader.readMessage(value,proto.nitric.faas.v1.BucketNotificationWorker.deserializeBinaryFromReader);
      msg.setBucketNotification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.InitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.InitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.InitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.InitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.faas.v1.ApiWorker.serializeBinaryToWriter
    );
  }
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nitric.faas.v1.SubscriptionWorker.serializeBinaryToWriter
    );
  }
  f = message.getSchedule();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.nitric.faas.v1.ScheduleWorker.serializeBinaryToWriter
    );
  }
  f = message.getBucketNotification();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.nitric.faas.v1.BucketNotificationWorker.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApiWorker api = 10;
 * @return {?proto.nitric.faas.v1.ApiWorker}
 */
proto.nitric.faas.v1.InitRequest.prototype.getApi = function() {
  return /** @type{?proto.nitric.faas.v1.ApiWorker} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.ApiWorker, 10));
};


/**
 * @param {?proto.nitric.faas.v1.ApiWorker|undefined} value
 * @return {!proto.nitric.faas.v1.InitRequest} returns this
*/
proto.nitric.faas.v1.InitRequest.prototype.setApi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.faas.v1.InitRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.InitRequest} returns this
 */
proto.nitric.faas.v1.InitRequest.prototype.clearApi = function() {
  return this.setApi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.InitRequest.prototype.hasApi = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SubscriptionWorker subscription = 11;
 * @return {?proto.nitric.faas.v1.SubscriptionWorker}
 */
proto.nitric.faas.v1.InitRequest.prototype.getSubscription = function() {
  return /** @type{?proto.nitric.faas.v1.SubscriptionWorker} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.SubscriptionWorker, 11));
};


/**
 * @param {?proto.nitric.faas.v1.SubscriptionWorker|undefined} value
 * @return {!proto.nitric.faas.v1.InitRequest} returns this
*/
proto.nitric.faas.v1.InitRequest.prototype.setSubscription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.nitric.faas.v1.InitRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.InitRequest} returns this
 */
proto.nitric.faas.v1.InitRequest.prototype.clearSubscription = function() {
  return this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.InitRequest.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ScheduleWorker schedule = 12;
 * @return {?proto.nitric.faas.v1.ScheduleWorker}
 */
proto.nitric.faas.v1.InitRequest.prototype.getSchedule = function() {
  return /** @type{?proto.nitric.faas.v1.ScheduleWorker} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.ScheduleWorker, 12));
};


/**
 * @param {?proto.nitric.faas.v1.ScheduleWorker|undefined} value
 * @return {!proto.nitric.faas.v1.InitRequest} returns this
*/
proto.nitric.faas.v1.InitRequest.prototype.setSchedule = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.nitric.faas.v1.InitRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.InitRequest} returns this
 */
proto.nitric.faas.v1.InitRequest.prototype.clearSchedule = function() {
  return this.setSchedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.InitRequest.prototype.hasSchedule = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional BucketNotificationWorker bucket_notification = 13;
 * @return {?proto.nitric.faas.v1.BucketNotificationWorker}
 */
proto.nitric.faas.v1.InitRequest.prototype.getBucketNotification = function() {
  return /** @type{?proto.nitric.faas.v1.BucketNotificationWorker} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.BucketNotificationWorker, 13));
};


/**
 * @param {?proto.nitric.faas.v1.BucketNotificationWorker|undefined} value
 * @return {!proto.nitric.faas.v1.InitRequest} returns this
*/
proto.nitric.faas.v1.InitRequest.prototype.setBucketNotification = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.nitric.faas.v1.InitRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.InitRequest} returns this
 */
proto.nitric.faas.v1.InitRequest.prototype.clearBucketNotification = function() {
  return this.setBucketNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.InitRequest.prototype.hasBucketNotification = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.InitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.InitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.InitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.InitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.InitResponse}
 */
proto.nitric.faas.v1.InitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.InitResponse;
  return proto.nitric.faas.v1.InitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.InitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.InitResponse}
 */
proto.nitric.faas.v1.InitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.InitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.InitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.InitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.InitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.TraceContext.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.TraceContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.TraceContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TraceContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.TraceContext}
 */
proto.nitric.faas.v1.TraceContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.TraceContext;
  return proto.nitric.faas.v1.TraceContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.TraceContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.TraceContext}
 */
proto.nitric.faas.v1.TraceContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.TraceContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.TraceContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.TraceContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TraceContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> values = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nitric.faas.v1.TraceContext.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.faas.v1.TraceContext} returns this
 */
proto.nitric.faas.v1.TraceContext.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.faas.v1.TriggerRequest.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.nitric.faas.v1.TriggerRequest.ContextCase = {
  CONTEXT_NOT_SET: 0,
  HTTP: 3,
  TOPIC: 4,
  NOTIFICATION: 5
};

/**
 * @return {proto.nitric.faas.v1.TriggerRequest.ContextCase}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.getContextCase = function() {
  return /** @type {proto.nitric.faas.v1.TriggerRequest.ContextCase} */(jspb.Message.computeOneofCase(this, proto.nitric.faas.v1.TriggerRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.TriggerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.TriggerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TriggerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    mimeType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    traceContext: (f = msg.getTraceContext()) && proto.nitric.faas.v1.TraceContext.toObject(includeInstance, f),
    http: (f = msg.getHttp()) && proto.nitric.faas.v1.HttpTriggerContext.toObject(includeInstance, f),
    topic: (f = msg.getTopic()) && proto.nitric.faas.v1.TopicTriggerContext.toObject(includeInstance, f),
    notification: (f = msg.getNotification()) && proto.nitric.faas.v1.NotificationTriggerContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.TriggerRequest}
 */
proto.nitric.faas.v1.TriggerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.TriggerRequest;
  return proto.nitric.faas.v1.TriggerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.TriggerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.TriggerRequest}
 */
proto.nitric.faas.v1.TriggerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimeType(value);
      break;
    case 10:
      var value = new proto.nitric.faas.v1.TraceContext;
      reader.readMessage(value,proto.nitric.faas.v1.TraceContext.deserializeBinaryFromReader);
      msg.setTraceContext(value);
      break;
    case 3:
      var value = new proto.nitric.faas.v1.HttpTriggerContext;
      reader.readMessage(value,proto.nitric.faas.v1.HttpTriggerContext.deserializeBinaryFromReader);
      msg.setHttp(value);
      break;
    case 4:
      var value = new proto.nitric.faas.v1.TopicTriggerContext;
      reader.readMessage(value,proto.nitric.faas.v1.TopicTriggerContext.deserializeBinaryFromReader);
      msg.setTopic(value);
      break;
    case 5:
      var value = new proto.nitric.faas.v1.NotificationTriggerContext;
      reader.readMessage(value,proto.nitric.faas.v1.NotificationTriggerContext.deserializeBinaryFromReader);
      msg.setNotification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.TriggerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.TriggerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TriggerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMimeType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTraceContext();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.faas.v1.TraceContext.serializeBinaryToWriter
    );
  }
  f = message.getHttp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nitric.faas.v1.HttpTriggerContext.serializeBinaryToWriter
    );
  }
  f = message.getTopic();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nitric.faas.v1.TopicTriggerContext.serializeBinaryToWriter
    );
  }
  f = message.getNotification();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nitric.faas.v1.NotificationTriggerContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
 */
proto.nitric.faas.v1.TriggerRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string mime_type = 2;
 * @return {string}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.getMimeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
 */
proto.nitric.faas.v1.TriggerRequest.prototype.setMimeType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TraceContext trace_context = 10;
 * @return {?proto.nitric.faas.v1.TraceContext}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.getTraceContext = function() {
  return /** @type{?proto.nitric.faas.v1.TraceContext} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.TraceContext, 10));
};


/**
 * @param {?proto.nitric.faas.v1.TraceContext|undefined} value
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
*/
proto.nitric.faas.v1.TriggerRequest.prototype.setTraceContext = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
 */
proto.nitric.faas.v1.TriggerRequest.prototype.clearTraceContext = function() {
  return this.setTraceContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.hasTraceContext = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional HttpTriggerContext http = 3;
 * @return {?proto.nitric.faas.v1.HttpTriggerContext}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.getHttp = function() {
  return /** @type{?proto.nitric.faas.v1.HttpTriggerContext} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.HttpTriggerContext, 3));
};


/**
 * @param {?proto.nitric.faas.v1.HttpTriggerContext|undefined} value
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
*/
proto.nitric.faas.v1.TriggerRequest.prototype.setHttp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nitric.faas.v1.TriggerRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
 */
proto.nitric.faas.v1.TriggerRequest.prototype.clearHttp = function() {
  return this.setHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.hasHttp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TopicTriggerContext topic = 4;
 * @return {?proto.nitric.faas.v1.TopicTriggerContext}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.getTopic = function() {
  return /** @type{?proto.nitric.faas.v1.TopicTriggerContext} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.TopicTriggerContext, 4));
};


/**
 * @param {?proto.nitric.faas.v1.TopicTriggerContext|undefined} value
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
*/
proto.nitric.faas.v1.TriggerRequest.prototype.setTopic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.nitric.faas.v1.TriggerRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
 */
proto.nitric.faas.v1.TriggerRequest.prototype.clearTopic = function() {
  return this.setTopic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NotificationTriggerContext notification = 5;
 * @return {?proto.nitric.faas.v1.NotificationTriggerContext}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.getNotification = function() {
  return /** @type{?proto.nitric.faas.v1.NotificationTriggerContext} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.NotificationTriggerContext, 5));
};


/**
 * @param {?proto.nitric.faas.v1.NotificationTriggerContext|undefined} value
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
*/
proto.nitric.faas.v1.TriggerRequest.prototype.setNotification = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.nitric.faas.v1.TriggerRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.TriggerRequest} returns this
 */
proto.nitric.faas.v1.TriggerRequest.prototype.clearNotification = function() {
  return this.setNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.TriggerRequest.prototype.hasNotification = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.faas.v1.HeaderValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.HeaderValue.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.HeaderValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.HeaderValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.HeaderValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.HeaderValue}
 */
proto.nitric.faas.v1.HeaderValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.HeaderValue;
  return proto.nitric.faas.v1.HeaderValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.HeaderValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.HeaderValue}
 */
proto.nitric.faas.v1.HeaderValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.HeaderValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.HeaderValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.HeaderValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.HeaderValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string value = 1;
 * @return {!Array<string>}
 */
proto.nitric.faas.v1.HeaderValue.prototype.getValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.faas.v1.HeaderValue} returns this
 */
proto.nitric.faas.v1.HeaderValue.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.faas.v1.HeaderValue} returns this
 */
proto.nitric.faas.v1.HeaderValue.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.faas.v1.HeaderValue} returns this
 */
proto.nitric.faas.v1.HeaderValue.prototype.clearValueList = function() {
  return this.setValueList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.faas.v1.QueryValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.QueryValue.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.QueryValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.QueryValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.QueryValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.QueryValue}
 */
proto.nitric.faas.v1.QueryValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.QueryValue;
  return proto.nitric.faas.v1.QueryValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.QueryValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.QueryValue}
 */
proto.nitric.faas.v1.QueryValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.QueryValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.QueryValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.QueryValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.QueryValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string value = 1;
 * @return {!Array<string>}
 */
proto.nitric.faas.v1.QueryValue.prototype.getValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.faas.v1.QueryValue} returns this
 */
proto.nitric.faas.v1.QueryValue.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.faas.v1.QueryValue} returns this
 */
proto.nitric.faas.v1.QueryValue.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.faas.v1.QueryValue} returns this
 */
proto.nitric.faas.v1.QueryValue.prototype.clearValueList = function() {
  return this.setValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.HttpTriggerContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.HttpTriggerContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.HttpTriggerContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    headersOldMap: (f = msg.getHeadersOldMap()) ? f.toObject(includeInstance, undefined) : [],
    queryParamsOldMap: (f = msg.getQueryParamsOldMap()) ? f.toObject(includeInstance, undefined) : [],
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, proto.nitric.faas.v1.HeaderValue.toObject) : [],
    queryParamsMap: (f = msg.getQueryParamsMap()) ? f.toObject(includeInstance, proto.nitric.faas.v1.QueryValue.toObject) : [],
    pathParamsMap: (f = msg.getPathParamsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.HttpTriggerContext}
 */
proto.nitric.faas.v1.HttpTriggerContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.HttpTriggerContext;
  return proto.nitric.faas.v1.HttpTriggerContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.HttpTriggerContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.HttpTriggerContext}
 */
proto.nitric.faas.v1.HttpTriggerContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = msg.getHeadersOldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = msg.getQueryParamsOldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.faas.v1.HeaderValue.deserializeBinaryFromReader, "", new proto.nitric.faas.v1.HeaderValue());
         });
      break;
    case 6:
      var value = msg.getQueryParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.faas.v1.QueryValue.deserializeBinaryFromReader, "", new proto.nitric.faas.v1.QueryValue());
         });
      break;
    case 7:
      var value = msg.getPathParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.HttpTriggerContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.HttpTriggerContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.HttpTriggerContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeadersOldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getQueryParamsOldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.faas.v1.HeaderValue.serializeBinaryToWriter);
  }
  f = message.getQueryParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.faas.v1.QueryValue.serializeBinaryToWriter);
  }
  f = message.getPathParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.HttpTriggerContext} returns this
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.HttpTriggerContext} returns this
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> headers_old = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.getHeadersOldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.faas.v1.HttpTriggerContext} returns this
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.clearHeadersOldMap = function() {
  this.getHeadersOldMap().clear();
  return this;};


/**
 * map<string, string> query_params_old = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.getQueryParamsOldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.faas.v1.HttpTriggerContext} returns this
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.clearQueryParamsOldMap = function() {
  this.getQueryParamsOldMap().clear();
  return this;};


/**
 * map<string, HeaderValue> headers = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.faas.v1.HeaderValue>}
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.faas.v1.HeaderValue>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.nitric.faas.v1.HeaderValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.faas.v1.HttpTriggerContext} returns this
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;};


/**
 * map<string, QueryValue> query_params = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.faas.v1.QueryValue>}
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.getQueryParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.faas.v1.QueryValue>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.nitric.faas.v1.QueryValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.faas.v1.HttpTriggerContext} returns this
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.clearQueryParamsMap = function() {
  this.getQueryParamsMap().clear();
  return this;};


/**
 * map<string, string> path_params = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.getPathParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.faas.v1.HttpTriggerContext} returns this
 */
proto.nitric.faas.v1.HttpTriggerContext.prototype.clearPathParamsMap = function() {
  this.getPathParamsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.TopicTriggerContext.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.TopicTriggerContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.TopicTriggerContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TopicTriggerContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.TopicTriggerContext}
 */
proto.nitric.faas.v1.TopicTriggerContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.TopicTriggerContext;
  return proto.nitric.faas.v1.TopicTriggerContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.TopicTriggerContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.TopicTriggerContext}
 */
proto.nitric.faas.v1.TopicTriggerContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.TopicTriggerContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.TopicTriggerContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.TopicTriggerContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TopicTriggerContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.nitric.faas.v1.TopicTriggerContext.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.TopicTriggerContext} returns this
 */
proto.nitric.faas.v1.TopicTriggerContext.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.BucketNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.BucketNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.BucketNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.BucketNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.BucketNotification}
 */
proto.nitric.faas.v1.BucketNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.BucketNotification;
  return proto.nitric.faas.v1.BucketNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.BucketNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.BucketNotification}
 */
proto.nitric.faas.v1.BucketNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.nitric.faas.v1.BucketNotificationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.BucketNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.BucketNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.BucketNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.BucketNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.nitric.faas.v1.BucketNotification.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.BucketNotification} returns this
 */
proto.nitric.faas.v1.BucketNotification.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BucketNotificationType type = 2;
 * @return {!proto.nitric.faas.v1.BucketNotificationType}
 */
proto.nitric.faas.v1.BucketNotification.prototype.getType = function() {
  return /** @type {!proto.nitric.faas.v1.BucketNotificationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nitric.faas.v1.BucketNotificationType} value
 * @return {!proto.nitric.faas.v1.BucketNotification} returns this
 */
proto.nitric.faas.v1.BucketNotification.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.faas.v1.NotificationTriggerContext.oneofGroups_ = [[10]];

/**
 * @enum {number}
 */
proto.nitric.faas.v1.NotificationTriggerContext.NotificationCase = {
  NOTIFICATION_NOT_SET: 0,
  BUCKET: 10
};

/**
 * @return {proto.nitric.faas.v1.NotificationTriggerContext.NotificationCase}
 */
proto.nitric.faas.v1.NotificationTriggerContext.prototype.getNotificationCase = function() {
  return /** @type {proto.nitric.faas.v1.NotificationTriggerContext.NotificationCase} */(jspb.Message.computeOneofCase(this, proto.nitric.faas.v1.NotificationTriggerContext.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.NotificationTriggerContext.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.NotificationTriggerContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.NotificationTriggerContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.NotificationTriggerContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bucket: (f = msg.getBucket()) && proto.nitric.faas.v1.BucketNotification.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.NotificationTriggerContext}
 */
proto.nitric.faas.v1.NotificationTriggerContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.NotificationTriggerContext;
  return proto.nitric.faas.v1.NotificationTriggerContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.NotificationTriggerContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.NotificationTriggerContext}
 */
proto.nitric.faas.v1.NotificationTriggerContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 10:
      var value = new proto.nitric.faas.v1.BucketNotification;
      reader.readMessage(value,proto.nitric.faas.v1.BucketNotification.deserializeBinaryFromReader);
      msg.setBucket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.NotificationTriggerContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.NotificationTriggerContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.NotificationTriggerContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.NotificationTriggerContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBucket();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.faas.v1.BucketNotification.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.nitric.faas.v1.NotificationTriggerContext.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.faas.v1.NotificationTriggerContext} returns this
 */
proto.nitric.faas.v1.NotificationTriggerContext.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BucketNotification bucket = 10;
 * @return {?proto.nitric.faas.v1.BucketNotification}
 */
proto.nitric.faas.v1.NotificationTriggerContext.prototype.getBucket = function() {
  return /** @type{?proto.nitric.faas.v1.BucketNotification} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.BucketNotification, 10));
};


/**
 * @param {?proto.nitric.faas.v1.BucketNotification|undefined} value
 * @return {!proto.nitric.faas.v1.NotificationTriggerContext} returns this
*/
proto.nitric.faas.v1.NotificationTriggerContext.prototype.setBucket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.faas.v1.NotificationTriggerContext.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.NotificationTriggerContext} returns this
 */
proto.nitric.faas.v1.NotificationTriggerContext.prototype.clearBucket = function() {
  return this.setBucket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.NotificationTriggerContext.prototype.hasBucket = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.faas.v1.TriggerResponse.oneofGroups_ = [[10,11,12]];

/**
 * @enum {number}
 */
proto.nitric.faas.v1.TriggerResponse.ContextCase = {
  CONTEXT_NOT_SET: 0,
  HTTP: 10,
  TOPIC: 11,
  NOTIFICATION: 12
};

/**
 * @return {proto.nitric.faas.v1.TriggerResponse.ContextCase}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.getContextCase = function() {
  return /** @type {proto.nitric.faas.v1.TriggerResponse.ContextCase} */(jspb.Message.computeOneofCase(this, proto.nitric.faas.v1.TriggerResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.TriggerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.TriggerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TriggerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    http: (f = msg.getHttp()) && proto.nitric.faas.v1.HttpResponseContext.toObject(includeInstance, f),
    topic: (f = msg.getTopic()) && proto.nitric.faas.v1.TopicResponseContext.toObject(includeInstance, f),
    notification: (f = msg.getNotification()) && proto.nitric.faas.v1.NotificationResponseContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.TriggerResponse}
 */
proto.nitric.faas.v1.TriggerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.TriggerResponse;
  return proto.nitric.faas.v1.TriggerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.TriggerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.TriggerResponse}
 */
proto.nitric.faas.v1.TriggerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 10:
      var value = new proto.nitric.faas.v1.HttpResponseContext;
      reader.readMessage(value,proto.nitric.faas.v1.HttpResponseContext.deserializeBinaryFromReader);
      msg.setHttp(value);
      break;
    case 11:
      var value = new proto.nitric.faas.v1.TopicResponseContext;
      reader.readMessage(value,proto.nitric.faas.v1.TopicResponseContext.deserializeBinaryFromReader);
      msg.setTopic(value);
      break;
    case 12:
      var value = new proto.nitric.faas.v1.NotificationResponseContext;
      reader.readMessage(value,proto.nitric.faas.v1.NotificationResponseContext.deserializeBinaryFromReader);
      msg.setNotification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.TriggerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.TriggerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TriggerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHttp();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.faas.v1.HttpResponseContext.serializeBinaryToWriter
    );
  }
  f = message.getTopic();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nitric.faas.v1.TopicResponseContext.serializeBinaryToWriter
    );
  }
  f = message.getNotification();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.nitric.faas.v1.NotificationResponseContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nitric.faas.v1.TriggerResponse} returns this
 */
proto.nitric.faas.v1.TriggerResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional HttpResponseContext http = 10;
 * @return {?proto.nitric.faas.v1.HttpResponseContext}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.getHttp = function() {
  return /** @type{?proto.nitric.faas.v1.HttpResponseContext} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.HttpResponseContext, 10));
};


/**
 * @param {?proto.nitric.faas.v1.HttpResponseContext|undefined} value
 * @return {!proto.nitric.faas.v1.TriggerResponse} returns this
*/
proto.nitric.faas.v1.TriggerResponse.prototype.setHttp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.faas.v1.TriggerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.TriggerResponse} returns this
 */
proto.nitric.faas.v1.TriggerResponse.prototype.clearHttp = function() {
  return this.setHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.hasHttp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional TopicResponseContext topic = 11;
 * @return {?proto.nitric.faas.v1.TopicResponseContext}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.getTopic = function() {
  return /** @type{?proto.nitric.faas.v1.TopicResponseContext} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.TopicResponseContext, 11));
};


/**
 * @param {?proto.nitric.faas.v1.TopicResponseContext|undefined} value
 * @return {!proto.nitric.faas.v1.TriggerResponse} returns this
*/
proto.nitric.faas.v1.TriggerResponse.prototype.setTopic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.nitric.faas.v1.TriggerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.TriggerResponse} returns this
 */
proto.nitric.faas.v1.TriggerResponse.prototype.clearTopic = function() {
  return this.setTopic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional NotificationResponseContext notification = 12;
 * @return {?proto.nitric.faas.v1.NotificationResponseContext}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.getNotification = function() {
  return /** @type{?proto.nitric.faas.v1.NotificationResponseContext} */ (
    jspb.Message.getWrapperField(this, proto.nitric.faas.v1.NotificationResponseContext, 12));
};


/**
 * @param {?proto.nitric.faas.v1.NotificationResponseContext|undefined} value
 * @return {!proto.nitric.faas.v1.TriggerResponse} returns this
*/
proto.nitric.faas.v1.TriggerResponse.prototype.setNotification = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.nitric.faas.v1.TriggerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.faas.v1.TriggerResponse} returns this
 */
proto.nitric.faas.v1.TriggerResponse.prototype.clearNotification = function() {
  return this.setNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.faas.v1.TriggerResponse.prototype.hasNotification = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.HttpResponseContext.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.HttpResponseContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.HttpResponseContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.HttpResponseContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    headersOldMap: (f = msg.getHeadersOldMap()) ? f.toObject(includeInstance, undefined) : [],
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, proto.nitric.faas.v1.HeaderValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.HttpResponseContext}
 */
proto.nitric.faas.v1.HttpResponseContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.HttpResponseContext;
  return proto.nitric.faas.v1.HttpResponseContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.HttpResponseContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.HttpResponseContext}
 */
proto.nitric.faas.v1.HttpResponseContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getHeadersOldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 3:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.faas.v1.HeaderValue.deserializeBinaryFromReader, "", new proto.nitric.faas.v1.HeaderValue());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.HttpResponseContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.HttpResponseContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.HttpResponseContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.HttpResponseContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadersOldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.faas.v1.HeaderValue.serializeBinaryToWriter);
  }
};


/**
 * map<string, string> headers_old = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nitric.faas.v1.HttpResponseContext.prototype.getHeadersOldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.faas.v1.HttpResponseContext} returns this
 */
proto.nitric.faas.v1.HttpResponseContext.prototype.clearHeadersOldMap = function() {
  this.getHeadersOldMap().clear();
  return this;};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.nitric.faas.v1.HttpResponseContext.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.faas.v1.HttpResponseContext} returns this
 */
proto.nitric.faas.v1.HttpResponseContext.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<string, HeaderValue> headers = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.faas.v1.HeaderValue>}
 */
proto.nitric.faas.v1.HttpResponseContext.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.faas.v1.HeaderValue>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.nitric.faas.v1.HeaderValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.faas.v1.HttpResponseContext} returns this
 */
proto.nitric.faas.v1.HttpResponseContext.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.TopicResponseContext.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.TopicResponseContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.TopicResponseContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TopicResponseContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.TopicResponseContext}
 */
proto.nitric.faas.v1.TopicResponseContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.TopicResponseContext;
  return proto.nitric.faas.v1.TopicResponseContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.TopicResponseContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.TopicResponseContext}
 */
proto.nitric.faas.v1.TopicResponseContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.TopicResponseContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.TopicResponseContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.TopicResponseContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.TopicResponseContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.nitric.faas.v1.TopicResponseContext.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nitric.faas.v1.TopicResponseContext} returns this
 */
proto.nitric.faas.v1.TopicResponseContext.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.faas.v1.NotificationResponseContext.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.faas.v1.NotificationResponseContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.faas.v1.NotificationResponseContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.NotificationResponseContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.faas.v1.NotificationResponseContext}
 */
proto.nitric.faas.v1.NotificationResponseContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.faas.v1.NotificationResponseContext;
  return proto.nitric.faas.v1.NotificationResponseContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.faas.v1.NotificationResponseContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.faas.v1.NotificationResponseContext}
 */
proto.nitric.faas.v1.NotificationResponseContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.faas.v1.NotificationResponseContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.faas.v1.NotificationResponseContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.faas.v1.NotificationResponseContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.faas.v1.NotificationResponseContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.nitric.faas.v1.NotificationResponseContext.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nitric.faas.v1.NotificationResponseContext} returns this
 */
proto.nitric.faas.v1.NotificationResponseContext.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.nitric.faas.v1.BucketNotificationType = {
  ALL: 0,
  CREATED: 1,
  DELETED: 2
};

goog.object.extend(exports, proto.nitric.faas.v1);
