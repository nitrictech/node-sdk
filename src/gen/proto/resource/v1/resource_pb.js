// source: proto/resource/v1/resource.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.nitric.resource.v1.Action', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ApiResource', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ApiResourceDetails', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ApiScopes', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ApiSecurityDefinition', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ApiSecurityDefinition.DefinitionCase', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ApiSecurityDefinitionJwt', null, global);
goog.exportSymbol('proto.nitric.resource.v1.BucketResource', null, global);
goog.exportSymbol('proto.nitric.resource.v1.CollectionResource', null, global);
goog.exportSymbol('proto.nitric.resource.v1.PolicyResource', null, global);
goog.exportSymbol('proto.nitric.resource.v1.QueueResource', null, global);
goog.exportSymbol('proto.nitric.resource.v1.Resource', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ResourceDeclareRequest', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ResourceDeclareRequest.ConfigCase', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ResourceDeclareResponse', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ResourceDetailsRequest', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ResourceDetailsResponse', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ResourceDetailsResponse.DetailsCase', null, global);
goog.exportSymbol('proto.nitric.resource.v1.ResourceType', null, global);
goog.exportSymbol('proto.nitric.resource.v1.SecretResource', null, global);
goog.exportSymbol('proto.nitric.resource.v1.TopicResource', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.PolicyResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.resource.v1.PolicyResource.repeatedFields_, null);
};
goog.inherits(proto.nitric.resource.v1.PolicyResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.PolicyResource.displayName = 'proto.nitric.resource.v1.PolicyResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.Resource.displayName = 'proto.nitric.resource.v1.Resource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.ResourceDeclareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_);
};
goog.inherits(proto.nitric.resource.v1.ResourceDeclareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.ResourceDeclareRequest.displayName = 'proto.nitric.resource.v1.ResourceDeclareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.BucketResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.BucketResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.BucketResource.displayName = 'proto.nitric.resource.v1.BucketResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.QueueResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.QueueResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.QueueResource.displayName = 'proto.nitric.resource.v1.QueueResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.TopicResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.TopicResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.TopicResource.displayName = 'proto.nitric.resource.v1.TopicResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.CollectionResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.CollectionResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.CollectionResource.displayName = 'proto.nitric.resource.v1.CollectionResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.SecretResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.SecretResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.SecretResource.displayName = 'proto.nitric.resource.v1.SecretResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.resource.v1.ApiSecurityDefinitionJwt.repeatedFields_, null);
};
goog.inherits(proto.nitric.resource.v1.ApiSecurityDefinitionJwt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.ApiSecurityDefinitionJwt.displayName = 'proto.nitric.resource.v1.ApiSecurityDefinitionJwt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.ApiSecurityDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.resource.v1.ApiSecurityDefinition.oneofGroups_);
};
goog.inherits(proto.nitric.resource.v1.ApiSecurityDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.ApiSecurityDefinition.displayName = 'proto.nitric.resource.v1.ApiSecurityDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.ApiScopes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.resource.v1.ApiScopes.repeatedFields_, null);
};
goog.inherits(proto.nitric.resource.v1.ApiScopes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.ApiScopes.displayName = 'proto.nitric.resource.v1.ApiScopes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.ApiResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.ApiResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.ApiResource.displayName = 'proto.nitric.resource.v1.ApiResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.ResourceDeclareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.ResourceDeclareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.ResourceDeclareResponse.displayName = 'proto.nitric.resource.v1.ResourceDeclareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.ApiResourceDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.ApiResourceDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.ApiResourceDetails.displayName = 'proto.nitric.resource.v1.ApiResourceDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.ResourceDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.resource.v1.ResourceDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.ResourceDetailsRequest.displayName = 'proto.nitric.resource.v1.ResourceDetailsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.resource.v1.ResourceDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.resource.v1.ResourceDetailsResponse.oneofGroups_);
};
goog.inherits(proto.nitric.resource.v1.ResourceDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.resource.v1.ResourceDetailsResponse.displayName = 'proto.nitric.resource.v1.ResourceDetailsResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.resource.v1.PolicyResource.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.PolicyResource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.PolicyResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.PolicyResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.PolicyResource.toObject = function(includeInstance, msg) {
  var f, obj = {
    principalsList: jspb.Message.toObjectList(msg.getPrincipalsList(),
    proto.nitric.resource.v1.Resource.toObject, includeInstance),
    actionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.nitric.resource.v1.Resource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.PolicyResource}
 */
proto.nitric.resource.v1.PolicyResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.PolicyResource;
  return proto.nitric.resource.v1.PolicyResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.PolicyResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.PolicyResource}
 */
proto.nitric.resource.v1.PolicyResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.resource.v1.Resource;
      reader.readMessage(value,proto.nitric.resource.v1.Resource.deserializeBinaryFromReader);
      msg.addPrincipals(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.nitric.resource.v1.Action>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addActions(values[i]);
      }
      break;
    case 3:
      var value = new proto.nitric.resource.v1.Resource;
      reader.readMessage(value,proto.nitric.resource.v1.Resource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.PolicyResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.PolicyResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.PolicyResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.PolicyResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrincipalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nitric.resource.v1.Resource.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nitric.resource.v1.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Resource principals = 1;
 * @return {!Array<!proto.nitric.resource.v1.Resource>}
 */
proto.nitric.resource.v1.PolicyResource.prototype.getPrincipalsList = function() {
  return /** @type{!Array<!proto.nitric.resource.v1.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.resource.v1.Resource, 1));
};


/**
 * @param {!Array<!proto.nitric.resource.v1.Resource>} value
 * @return {!proto.nitric.resource.v1.PolicyResource} returns this
*/
proto.nitric.resource.v1.PolicyResource.prototype.setPrincipalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nitric.resource.v1.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.resource.v1.Resource}
 */
proto.nitric.resource.v1.PolicyResource.prototype.addPrincipals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nitric.resource.v1.Resource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.resource.v1.PolicyResource} returns this
 */
proto.nitric.resource.v1.PolicyResource.prototype.clearPrincipalsList = function() {
  return this.setPrincipalsList([]);
};


/**
 * repeated Action actions = 2;
 * @return {!Array<!proto.nitric.resource.v1.Action>}
 */
proto.nitric.resource.v1.PolicyResource.prototype.getActionsList = function() {
  return /** @type {!Array<!proto.nitric.resource.v1.Action>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.nitric.resource.v1.Action>} value
 * @return {!proto.nitric.resource.v1.PolicyResource} returns this
 */
proto.nitric.resource.v1.PolicyResource.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.nitric.resource.v1.Action} value
 * @param {number=} opt_index
 * @return {!proto.nitric.resource.v1.PolicyResource} returns this
 */
proto.nitric.resource.v1.PolicyResource.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.resource.v1.PolicyResource} returns this
 */
proto.nitric.resource.v1.PolicyResource.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * repeated Resource resources = 3;
 * @return {!Array<!proto.nitric.resource.v1.Resource>}
 */
proto.nitric.resource.v1.PolicyResource.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.nitric.resource.v1.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.resource.v1.Resource, 3));
};


/**
 * @param {!Array<!proto.nitric.resource.v1.Resource>} value
 * @return {!proto.nitric.resource.v1.PolicyResource} returns this
*/
proto.nitric.resource.v1.PolicyResource.prototype.setResourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nitric.resource.v1.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.resource.v1.Resource}
 */
proto.nitric.resource.v1.PolicyResource.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nitric.resource.v1.Resource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.resource.v1.PolicyResource} returns this
 */
proto.nitric.resource.v1.PolicyResource.prototype.clearResourcesList = function() {
  return this.setResourcesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.Resource}
 */
proto.nitric.resource.v1.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.Resource;
  return proto.nitric.resource.v1.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.Resource}
 */
proto.nitric.resource.v1.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nitric.resource.v1.ResourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ResourceType type = 1;
 * @return {!proto.nitric.resource.v1.ResourceType}
 */
proto.nitric.resource.v1.Resource.prototype.getType = function() {
  return /** @type {!proto.nitric.resource.v1.ResourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nitric.resource.v1.ResourceType} value
 * @return {!proto.nitric.resource.v1.Resource} returns this
 */
proto.nitric.resource.v1.Resource.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.nitric.resource.v1.Resource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.resource.v1.Resource} returns this
 */
proto.nitric.resource.v1.Resource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_ = [[10,11,12,13,14,15,16]];

/**
 * @enum {number}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.ConfigCase = {
  CONFIG_NOT_SET: 0,
  POLICY: 10,
  BUCKET: 11,
  QUEUE: 12,
  TOPIC: 13,
  COLLECTION: 14,
  SECRET: 15,
  API: 16
};

/**
 * @return {proto.nitric.resource.v1.ResourceDeclareRequest.ConfigCase}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.getConfigCase = function() {
  return /** @type {proto.nitric.resource.v1.ResourceDeclareRequest.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.ResourceDeclareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.ResourceDeclareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ResourceDeclareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && proto.nitric.resource.v1.Resource.toObject(includeInstance, f),
    policy: (f = msg.getPolicy()) && proto.nitric.resource.v1.PolicyResource.toObject(includeInstance, f),
    bucket: (f = msg.getBucket()) && proto.nitric.resource.v1.BucketResource.toObject(includeInstance, f),
    queue: (f = msg.getQueue()) && proto.nitric.resource.v1.QueueResource.toObject(includeInstance, f),
    topic: (f = msg.getTopic()) && proto.nitric.resource.v1.TopicResource.toObject(includeInstance, f),
    collection: (f = msg.getCollection()) && proto.nitric.resource.v1.CollectionResource.toObject(includeInstance, f),
    secret: (f = msg.getSecret()) && proto.nitric.resource.v1.SecretResource.toObject(includeInstance, f),
    api: (f = msg.getApi()) && proto.nitric.resource.v1.ApiResource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.ResourceDeclareRequest;
  return proto.nitric.resource.v1.ResourceDeclareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.ResourceDeclareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.resource.v1.Resource;
      reader.readMessage(value,proto.nitric.resource.v1.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 10:
      var value = new proto.nitric.resource.v1.PolicyResource;
      reader.readMessage(value,proto.nitric.resource.v1.PolicyResource.deserializeBinaryFromReader);
      msg.setPolicy(value);
      break;
    case 11:
      var value = new proto.nitric.resource.v1.BucketResource;
      reader.readMessage(value,proto.nitric.resource.v1.BucketResource.deserializeBinaryFromReader);
      msg.setBucket(value);
      break;
    case 12:
      var value = new proto.nitric.resource.v1.QueueResource;
      reader.readMessage(value,proto.nitric.resource.v1.QueueResource.deserializeBinaryFromReader);
      msg.setQueue(value);
      break;
    case 13:
      var value = new proto.nitric.resource.v1.TopicResource;
      reader.readMessage(value,proto.nitric.resource.v1.TopicResource.deserializeBinaryFromReader);
      msg.setTopic(value);
      break;
    case 14:
      var value = new proto.nitric.resource.v1.CollectionResource;
      reader.readMessage(value,proto.nitric.resource.v1.CollectionResource.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 15:
      var value = new proto.nitric.resource.v1.SecretResource;
      reader.readMessage(value,proto.nitric.resource.v1.SecretResource.deserializeBinaryFromReader);
      msg.setSecret(value);
      break;
    case 16:
      var value = new proto.nitric.resource.v1.ApiResource;
      reader.readMessage(value,proto.nitric.resource.v1.ApiResource.deserializeBinaryFromReader);
      msg.setApi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.ResourceDeclareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.ResourceDeclareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ResourceDeclareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.resource.v1.Resource.serializeBinaryToWriter
    );
  }
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.resource.v1.PolicyResource.serializeBinaryToWriter
    );
  }
  f = message.getBucket();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nitric.resource.v1.BucketResource.serializeBinaryToWriter
    );
  }
  f = message.getQueue();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.nitric.resource.v1.QueueResource.serializeBinaryToWriter
    );
  }
  f = message.getTopic();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.nitric.resource.v1.TopicResource.serializeBinaryToWriter
    );
  }
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.nitric.resource.v1.CollectionResource.serializeBinaryToWriter
    );
  }
  f = message.getSecret();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.nitric.resource.v1.SecretResource.serializeBinaryToWriter
    );
  }
  f = message.getApi();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.nitric.resource.v1.ApiResource.serializeBinaryToWriter
    );
  }
};


/**
 * optional Resource resource = 1;
 * @return {?proto.nitric.resource.v1.Resource}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.getResource = function() {
  return /** @type{?proto.nitric.resource.v1.Resource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.Resource, 1));
};


/**
 * @param {?proto.nitric.resource.v1.Resource|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
*/
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PolicyResource policy = 10;
 * @return {?proto.nitric.resource.v1.PolicyResource}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.getPolicy = function() {
  return /** @type{?proto.nitric.resource.v1.PolicyResource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.PolicyResource, 10));
};


/**
 * @param {?proto.nitric.resource.v1.PolicyResource|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
*/
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.setPolicy = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.clearPolicy = function() {
  return this.setPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BucketResource bucket = 11;
 * @return {?proto.nitric.resource.v1.BucketResource}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.getBucket = function() {
  return /** @type{?proto.nitric.resource.v1.BucketResource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.BucketResource, 11));
};


/**
 * @param {?proto.nitric.resource.v1.BucketResource|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
*/
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.setBucket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.clearBucket = function() {
  return this.setBucket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.hasBucket = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional QueueResource queue = 12;
 * @return {?proto.nitric.resource.v1.QueueResource}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.getQueue = function() {
  return /** @type{?proto.nitric.resource.v1.QueueResource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.QueueResource, 12));
};


/**
 * @param {?proto.nitric.resource.v1.QueueResource|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
*/
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.setQueue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.clearQueue = function() {
  return this.setQueue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.hasQueue = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional TopicResource topic = 13;
 * @return {?proto.nitric.resource.v1.TopicResource}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.getTopic = function() {
  return /** @type{?proto.nitric.resource.v1.TopicResource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.TopicResource, 13));
};


/**
 * @param {?proto.nitric.resource.v1.TopicResource|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
*/
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.setTopic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.clearTopic = function() {
  return this.setTopic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CollectionResource collection = 14;
 * @return {?proto.nitric.resource.v1.CollectionResource}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.getCollection = function() {
  return /** @type{?proto.nitric.resource.v1.CollectionResource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.CollectionResource, 14));
};


/**
 * @param {?proto.nitric.resource.v1.CollectionResource|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
*/
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.setCollection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional SecretResource secret = 15;
 * @return {?proto.nitric.resource.v1.SecretResource}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.getSecret = function() {
  return /** @type{?proto.nitric.resource.v1.SecretResource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.SecretResource, 15));
};


/**
 * @param {?proto.nitric.resource.v1.SecretResource|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
*/
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.setSecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.clearSecret = function() {
  return this.setSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ApiResource api = 16;
 * @return {?proto.nitric.resource.v1.ApiResource}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.getApi = function() {
  return /** @type{?proto.nitric.resource.v1.ApiResource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.ApiResource, 16));
};


/**
 * @param {?proto.nitric.resource.v1.ApiResource|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
*/
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.setApi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.nitric.resource.v1.ResourceDeclareRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDeclareRequest} returns this
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.clearApi = function() {
  return this.setApi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDeclareRequest.prototype.hasApi = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.BucketResource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.BucketResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.BucketResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.BucketResource.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.BucketResource}
 */
proto.nitric.resource.v1.BucketResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.BucketResource;
  return proto.nitric.resource.v1.BucketResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.BucketResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.BucketResource}
 */
proto.nitric.resource.v1.BucketResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.BucketResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.BucketResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.BucketResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.BucketResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.QueueResource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.QueueResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.QueueResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.QueueResource.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.QueueResource}
 */
proto.nitric.resource.v1.QueueResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.QueueResource;
  return proto.nitric.resource.v1.QueueResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.QueueResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.QueueResource}
 */
proto.nitric.resource.v1.QueueResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.QueueResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.QueueResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.QueueResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.QueueResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.TopicResource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.TopicResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.TopicResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.TopicResource.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.TopicResource}
 */
proto.nitric.resource.v1.TopicResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.TopicResource;
  return proto.nitric.resource.v1.TopicResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.TopicResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.TopicResource}
 */
proto.nitric.resource.v1.TopicResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.TopicResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.TopicResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.TopicResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.TopicResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.CollectionResource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.CollectionResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.CollectionResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.CollectionResource.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.CollectionResource}
 */
proto.nitric.resource.v1.CollectionResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.CollectionResource;
  return proto.nitric.resource.v1.CollectionResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.CollectionResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.CollectionResource}
 */
proto.nitric.resource.v1.CollectionResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.CollectionResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.CollectionResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.CollectionResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.CollectionResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.SecretResource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.SecretResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.SecretResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.SecretResource.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.SecretResource}
 */
proto.nitric.resource.v1.SecretResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.SecretResource;
  return proto.nitric.resource.v1.SecretResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.SecretResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.SecretResource}
 */
proto.nitric.resource.v1.SecretResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.SecretResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.SecretResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.SecretResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.SecretResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.ApiSecurityDefinitionJwt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.ApiSecurityDefinitionJwt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    audiencesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinitionJwt}
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.ApiSecurityDefinitionJwt;
  return proto.nitric.resource.v1.ApiSecurityDefinitionJwt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.ApiSecurityDefinitionJwt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinitionJwt}
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAudiences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.ApiSecurityDefinitionJwt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.ApiSecurityDefinitionJwt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAudiencesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string issuer = 1;
 * @return {string}
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinitionJwt} returns this
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.prototype.setIssuer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string audiences = 2;
 * @return {!Array<string>}
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.prototype.getAudiencesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinitionJwt} returns this
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.prototype.setAudiencesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinitionJwt} returns this
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.prototype.addAudiences = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinitionJwt} returns this
 */
proto.nitric.resource.v1.ApiSecurityDefinitionJwt.prototype.clearAudiencesList = function() {
  return this.setAudiencesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.resource.v1.ApiSecurityDefinition.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.nitric.resource.v1.ApiSecurityDefinition.DefinitionCase = {
  DEFINITION_NOT_SET: 0,
  JWT: 1
};

/**
 * @return {proto.nitric.resource.v1.ApiSecurityDefinition.DefinitionCase}
 */
proto.nitric.resource.v1.ApiSecurityDefinition.prototype.getDefinitionCase = function() {
  return /** @type {proto.nitric.resource.v1.ApiSecurityDefinition.DefinitionCase} */(jspb.Message.computeOneofCase(this, proto.nitric.resource.v1.ApiSecurityDefinition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.ApiSecurityDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.ApiSecurityDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.ApiSecurityDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiSecurityDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: (f = msg.getJwt()) && proto.nitric.resource.v1.ApiSecurityDefinitionJwt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinition}
 */
proto.nitric.resource.v1.ApiSecurityDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.ApiSecurityDefinition;
  return proto.nitric.resource.v1.ApiSecurityDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.ApiSecurityDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinition}
 */
proto.nitric.resource.v1.ApiSecurityDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.resource.v1.ApiSecurityDefinitionJwt;
      reader.readMessage(value,proto.nitric.resource.v1.ApiSecurityDefinitionJwt.deserializeBinaryFromReader);
      msg.setJwt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.ApiSecurityDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.ApiSecurityDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.ApiSecurityDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiSecurityDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.resource.v1.ApiSecurityDefinitionJwt.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApiSecurityDefinitionJwt jwt = 1;
 * @return {?proto.nitric.resource.v1.ApiSecurityDefinitionJwt}
 */
proto.nitric.resource.v1.ApiSecurityDefinition.prototype.getJwt = function() {
  return /** @type{?proto.nitric.resource.v1.ApiSecurityDefinitionJwt} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.ApiSecurityDefinitionJwt, 1));
};


/**
 * @param {?proto.nitric.resource.v1.ApiSecurityDefinitionJwt|undefined} value
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinition} returns this
*/
proto.nitric.resource.v1.ApiSecurityDefinition.prototype.setJwt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nitric.resource.v1.ApiSecurityDefinition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ApiSecurityDefinition} returns this
 */
proto.nitric.resource.v1.ApiSecurityDefinition.prototype.clearJwt = function() {
  return this.setJwt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ApiSecurityDefinition.prototype.hasJwt = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.resource.v1.ApiScopes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.ApiScopes.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.ApiScopes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.ApiScopes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiScopes.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.ApiScopes}
 */
proto.nitric.resource.v1.ApiScopes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.ApiScopes;
  return proto.nitric.resource.v1.ApiScopes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.ApiScopes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.ApiScopes}
 */
proto.nitric.resource.v1.ApiScopes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addScopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.ApiScopes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.ApiScopes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.ApiScopes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiScopes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string scopes = 1;
 * @return {!Array<string>}
 */
proto.nitric.resource.v1.ApiScopes.prototype.getScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.resource.v1.ApiScopes} returns this
 */
proto.nitric.resource.v1.ApiScopes.prototype.setScopesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.resource.v1.ApiScopes} returns this
 */
proto.nitric.resource.v1.ApiScopes.prototype.addScopes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.resource.v1.ApiScopes} returns this
 */
proto.nitric.resource.v1.ApiScopes.prototype.clearScopesList = function() {
  return this.setScopesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.ApiResource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.ApiResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.ApiResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiResource.toObject = function(includeInstance, msg) {
  var f, obj = {
    securityDefinitionsMap: (f = msg.getSecurityDefinitionsMap()) ? f.toObject(includeInstance, proto.nitric.resource.v1.ApiSecurityDefinition.toObject) : [],
    securityMap: (f = msg.getSecurityMap()) ? f.toObject(includeInstance, proto.nitric.resource.v1.ApiScopes.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.ApiResource}
 */
proto.nitric.resource.v1.ApiResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.ApiResource;
  return proto.nitric.resource.v1.ApiResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.ApiResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.ApiResource}
 */
proto.nitric.resource.v1.ApiResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSecurityDefinitionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.resource.v1.ApiSecurityDefinition.deserializeBinaryFromReader, "", new proto.nitric.resource.v1.ApiSecurityDefinition());
         });
      break;
    case 2:
      var value = msg.getSecurityMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nitric.resource.v1.ApiScopes.deserializeBinaryFromReader, "", new proto.nitric.resource.v1.ApiScopes());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.ApiResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.ApiResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.ApiResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecurityDefinitionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.resource.v1.ApiSecurityDefinition.serializeBinaryToWriter);
  }
  f = message.getSecurityMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nitric.resource.v1.ApiScopes.serializeBinaryToWriter);
  }
};


/**
 * map<string, ApiSecurityDefinition> security_definitions = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.resource.v1.ApiSecurityDefinition>}
 */
proto.nitric.resource.v1.ApiResource.prototype.getSecurityDefinitionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.resource.v1.ApiSecurityDefinition>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.nitric.resource.v1.ApiSecurityDefinition));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.resource.v1.ApiResource} returns this
 */
proto.nitric.resource.v1.ApiResource.prototype.clearSecurityDefinitionsMap = function() {
  this.getSecurityDefinitionsMap().clear();
  return this;};


/**
 * map<string, ApiScopes> security = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nitric.resource.v1.ApiScopes>}
 */
proto.nitric.resource.v1.ApiResource.prototype.getSecurityMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nitric.resource.v1.ApiScopes>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.nitric.resource.v1.ApiScopes));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.resource.v1.ApiResource} returns this
 */
proto.nitric.resource.v1.ApiResource.prototype.clearSecurityMap = function() {
  this.getSecurityMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.ResourceDeclareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.ResourceDeclareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.ResourceDeclareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ResourceDeclareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.ResourceDeclareResponse}
 */
proto.nitric.resource.v1.ResourceDeclareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.ResourceDeclareResponse;
  return proto.nitric.resource.v1.ResourceDeclareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.ResourceDeclareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.ResourceDeclareResponse}
 */
proto.nitric.resource.v1.ResourceDeclareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.ResourceDeclareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.ResourceDeclareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.ResourceDeclareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ResourceDeclareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.ApiResourceDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.ApiResourceDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.ApiResourceDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiResourceDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.ApiResourceDetails}
 */
proto.nitric.resource.v1.ApiResourceDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.ApiResourceDetails;
  return proto.nitric.resource.v1.ApiResourceDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.ApiResourceDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.ApiResourceDetails}
 */
proto.nitric.resource.v1.ApiResourceDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.ApiResourceDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.ApiResourceDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.ApiResourceDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ApiResourceDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.nitric.resource.v1.ApiResourceDetails.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.resource.v1.ApiResourceDetails} returns this
 */
proto.nitric.resource.v1.ApiResourceDetails.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.ResourceDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.ResourceDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.ResourceDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ResourceDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && proto.nitric.resource.v1.Resource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.ResourceDetailsRequest}
 */
proto.nitric.resource.v1.ResourceDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.ResourceDetailsRequest;
  return proto.nitric.resource.v1.ResourceDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.ResourceDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.ResourceDetailsRequest}
 */
proto.nitric.resource.v1.ResourceDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.resource.v1.Resource;
      reader.readMessage(value,proto.nitric.resource.v1.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.ResourceDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.ResourceDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.ResourceDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ResourceDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.resource.v1.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * optional Resource resource = 1;
 * @return {?proto.nitric.resource.v1.Resource}
 */
proto.nitric.resource.v1.ResourceDetailsRequest.prototype.getResource = function() {
  return /** @type{?proto.nitric.resource.v1.Resource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.Resource, 1));
};


/**
 * @param {?proto.nitric.resource.v1.Resource|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDetailsRequest} returns this
*/
proto.nitric.resource.v1.ResourceDetailsRequest.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDetailsRequest} returns this
 */
proto.nitric.resource.v1.ResourceDetailsRequest.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDetailsRequest.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.resource.v1.ResourceDetailsResponse.oneofGroups_ = [[10]];

/**
 * @enum {number}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.DetailsCase = {
  DETAILS_NOT_SET: 0,
  API: 10
};

/**
 * @return {proto.nitric.resource.v1.ResourceDetailsResponse.DetailsCase}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.getDetailsCase = function() {
  return /** @type {proto.nitric.resource.v1.ResourceDetailsResponse.DetailsCase} */(jspb.Message.computeOneofCase(this, proto.nitric.resource.v1.ResourceDetailsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.resource.v1.ResourceDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.resource.v1.ResourceDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ResourceDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 2, ""),
    service: jspb.Message.getFieldWithDefault(msg, 3, ""),
    api: (f = msg.getApi()) && proto.nitric.resource.v1.ApiResourceDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.resource.v1.ResourceDetailsResponse}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.resource.v1.ResourceDetailsResponse;
  return proto.nitric.resource.v1.ResourceDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.resource.v1.ResourceDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.resource.v1.ResourceDetailsResponse}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 10:
      var value = new proto.nitric.resource.v1.ApiResourceDetails;
      reader.readMessage(value,proto.nitric.resource.v1.ApiResourceDetails.deserializeBinaryFromReader);
      msg.setApi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.resource.v1.ResourceDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.resource.v1.ResourceDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.resource.v1.ResourceDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getApi();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.resource.v1.ApiResourceDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.resource.v1.ResourceDetailsResponse} returns this
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string provider = 2;
 * @return {string}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.resource.v1.ResourceDetailsResponse} returns this
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string service = 3;
 * @return {string}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.resource.v1.ResourceDetailsResponse} returns this
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.setService = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ApiResourceDetails api = 10;
 * @return {?proto.nitric.resource.v1.ApiResourceDetails}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.getApi = function() {
  return /** @type{?proto.nitric.resource.v1.ApiResourceDetails} */ (
    jspb.Message.getWrapperField(this, proto.nitric.resource.v1.ApiResourceDetails, 10));
};


/**
 * @param {?proto.nitric.resource.v1.ApiResourceDetails|undefined} value
 * @return {!proto.nitric.resource.v1.ResourceDetailsResponse} returns this
*/
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.setApi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.resource.v1.ResourceDetailsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.resource.v1.ResourceDetailsResponse} returns this
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.clearApi = function() {
  return this.setApi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.resource.v1.ResourceDetailsResponse.prototype.hasApi = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * @enum {number}
 */
proto.nitric.resource.v1.ResourceType = {
  API: 0,
  FUNCTION: 1,
  BUCKET: 2,
  QUEUE: 3,
  TOPIC: 4,
  SCHEDULE: 5,
  SUBSCRIPTION: 6,
  COLLECTION: 7,
  POLICY: 8,
  SECRET: 9,
  NOTIFICATION: 10
};

/**
 * @enum {number}
 */
proto.nitric.resource.v1.Action = {
  BUCKETFILELIST: 0,
  BUCKETFILEGET: 1,
  BUCKETFILEPUT: 2,
  BUCKETFILEDELETE: 3,
  TOPICLIST: 200,
  TOPICDETAIL: 201,
  TOPICEVENTPUBLISH: 202,
  QUEUESEND: 300,
  QUEUERECEIVE: 301,
  QUEUELIST: 302,
  QUEUEDETAIL: 303,
  COLLECTIONDOCUMENTREAD: 400,
  COLLECTIONDOCUMENTWRITE: 401,
  COLLECTIONDOCUMENTDELETE: 402,
  COLLECTIONQUERY: 403,
  COLLECTIONLIST: 404,
  SECRETPUT: 500,
  SECRETACCESS: 501
};

goog.object.extend(exports, proto.nitric.resource.v1);
