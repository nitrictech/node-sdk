// source: proto/deploy/v1/deploy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
var proto_resource_v1_resource_pb = require('../../../proto/resource/v1/resource_pb.js');
goog.object.extend(proto, proto_resource_v1_resource_pb);
var proto_faas_v1_faas_pb = require('../../../proto/faas/v1/faas_pb.js');
goog.object.extend(proto, proto_faas_v1_faas_pb);
goog.exportSymbol('proto.nitric.deploy.v1.Api', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Api.DocumentCase', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Bucket', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.BucketNotificationTarget', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.BucketNotificationTarget.TargetCase', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Collection', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.DeployDownEvent', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.DeployDownEvent.ContentCase', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.DeployDownEventResult', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.DeployDownRequest', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.DeployEventMessage', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.DeployUpEvent', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.DeployUpEvent.ContentCase', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.DeployUpEventResult', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.DeployUpRequest', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.ExecutionUnit', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.ExecutionUnit.SourceCase', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.ImageSource', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Policy', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Queue', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Resource', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Resource.ConfigCase', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Schedule', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.ScheduleTarget', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.ScheduleTarget.TargetCase', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Secret', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Spec', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.SubscriptionTarget', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.SubscriptionTarget.TargetCase', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.Topic', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.TopicSubscription', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.UpResult', null, global);
goog.exportSymbol('proto.nitric.deploy.v1.UpResult.ContentCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.DeployUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.DeployUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.DeployUpRequest.displayName = 'proto.nitric.deploy.v1.DeployUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.DeployUpEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.deploy.v1.DeployUpEvent.oneofGroups_);
};
goog.inherits(proto.nitric.deploy.v1.DeployUpEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.DeployUpEvent.displayName = 'proto.nitric.deploy.v1.DeployUpEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.DeployEventMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.DeployEventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.DeployEventMessage.displayName = 'proto.nitric.deploy.v1.DeployEventMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.UpResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.deploy.v1.UpResult.oneofGroups_);
};
goog.inherits(proto.nitric.deploy.v1.UpResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.UpResult.displayName = 'proto.nitric.deploy.v1.UpResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.DeployUpEventResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.DeployUpEventResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.DeployUpEventResult.displayName = 'proto.nitric.deploy.v1.DeployUpEventResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.DeployDownRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.DeployDownRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.DeployDownRequest.displayName = 'proto.nitric.deploy.v1.DeployDownRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.DeployDownEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.deploy.v1.DeployDownEvent.oneofGroups_);
};
goog.inherits(proto.nitric.deploy.v1.DeployDownEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.DeployDownEvent.displayName = 'proto.nitric.deploy.v1.DeployDownEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.DeployDownEventResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.DeployDownEventResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.DeployDownEventResult.displayName = 'proto.nitric.deploy.v1.DeployDownEventResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.ImageSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.ImageSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.ImageSource.displayName = 'proto.nitric.deploy.v1.ImageSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.ExecutionUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.deploy.v1.ExecutionUnit.oneofGroups_);
};
goog.inherits(proto.nitric.deploy.v1.ExecutionUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.ExecutionUnit.displayName = 'proto.nitric.deploy.v1.ExecutionUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Bucket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.deploy.v1.Bucket.repeatedFields_, null);
};
goog.inherits(proto.nitric.deploy.v1.Bucket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Bucket.displayName = 'proto.nitric.deploy.v1.Bucket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.BucketNotificationTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.deploy.v1.BucketNotificationTarget.oneofGroups_);
};
goog.inherits(proto.nitric.deploy.v1.BucketNotificationTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.BucketNotificationTarget.displayName = 'proto.nitric.deploy.v1.BucketNotificationTarget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Topic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.deploy.v1.Topic.repeatedFields_, null);
};
goog.inherits(proto.nitric.deploy.v1.Topic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Topic.displayName = 'proto.nitric.deploy.v1.Topic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Queue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.Queue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Queue.displayName = 'proto.nitric.deploy.v1.Queue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Collection.displayName = 'proto.nitric.deploy.v1.Collection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Secret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.Secret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Secret.displayName = 'proto.nitric.deploy.v1.Secret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.SubscriptionTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.deploy.v1.SubscriptionTarget.oneofGroups_);
};
goog.inherits(proto.nitric.deploy.v1.SubscriptionTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.SubscriptionTarget.displayName = 'proto.nitric.deploy.v1.SubscriptionTarget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.TopicSubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.TopicSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.TopicSubscription.displayName = 'proto.nitric.deploy.v1.TopicSubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Api = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.deploy.v1.Api.oneofGroups_);
};
goog.inherits(proto.nitric.deploy.v1.Api, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Api.displayName = 'proto.nitric.deploy.v1.Api';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.ScheduleTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.deploy.v1.ScheduleTarget.oneofGroups_);
};
goog.inherits(proto.nitric.deploy.v1.ScheduleTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.ScheduleTarget.displayName = 'proto.nitric.deploy.v1.ScheduleTarget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Schedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.deploy.v1.Schedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Schedule.displayName = 'proto.nitric.deploy.v1.Schedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nitric.deploy.v1.Resource.oneofGroups_);
};
goog.inherits(proto.nitric.deploy.v1.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Resource.displayName = 'proto.nitric.deploy.v1.Resource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Policy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.deploy.v1.Policy.repeatedFields_, null);
};
goog.inherits(proto.nitric.deploy.v1.Policy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Policy.displayName = 'proto.nitric.deploy.v1.Policy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.deploy.v1.Spec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.deploy.v1.Spec.repeatedFields_, null);
};
goog.inherits(proto.nitric.deploy.v1.Spec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.deploy.v1.Spec.displayName = 'proto.nitric.deploy.v1.Spec';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.DeployUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.DeployUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.DeployUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: (f = msg.getSpec()) && proto.nitric.deploy.v1.Spec.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.DeployUpRequest}
 */
proto.nitric.deploy.v1.DeployUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.DeployUpRequest;
  return proto.nitric.deploy.v1.DeployUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.DeployUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.DeployUpRequest}
 */
proto.nitric.deploy.v1.DeployUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.deploy.v1.Spec;
      reader.readMessage(value,proto.nitric.deploy.v1.Spec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.DeployUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.DeployUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.DeployUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.deploy.v1.Spec.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional Spec spec = 1;
 * @return {?proto.nitric.deploy.v1.Spec}
 */
proto.nitric.deploy.v1.DeployUpRequest.prototype.getSpec = function() {
  return /** @type{?proto.nitric.deploy.v1.Spec} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.Spec, 1));
};


/**
 * @param {?proto.nitric.deploy.v1.Spec|undefined} value
 * @return {!proto.nitric.deploy.v1.DeployUpRequest} returns this
*/
proto.nitric.deploy.v1.DeployUpRequest.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.DeployUpRequest} returns this
 */
proto.nitric.deploy.v1.DeployUpRequest.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.DeployUpRequest.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct attributes = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.nitric.deploy.v1.DeployUpRequest.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.nitric.deploy.v1.DeployUpRequest} returns this
*/
proto.nitric.deploy.v1.DeployUpRequest.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.DeployUpRequest} returns this
 */
proto.nitric.deploy.v1.DeployUpRequest.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.DeployUpRequest.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.deploy.v1.DeployUpEvent.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nitric.deploy.v1.DeployUpEvent.ContentCase = {
  CONTENT_NOT_SET: 0,
  MESSAGE: 1,
  RESULT: 2
};

/**
 * @return {proto.nitric.deploy.v1.DeployUpEvent.ContentCase}
 */
proto.nitric.deploy.v1.DeployUpEvent.prototype.getContentCase = function() {
  return /** @type {proto.nitric.deploy.v1.DeployUpEvent.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.deploy.v1.DeployUpEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.DeployUpEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.DeployUpEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.DeployUpEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployUpEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.nitric.deploy.v1.DeployEventMessage.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.nitric.deploy.v1.DeployUpEventResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.DeployUpEvent}
 */
proto.nitric.deploy.v1.DeployUpEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.DeployUpEvent;
  return proto.nitric.deploy.v1.DeployUpEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.DeployUpEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.DeployUpEvent}
 */
proto.nitric.deploy.v1.DeployUpEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.deploy.v1.DeployEventMessage;
      reader.readMessage(value,proto.nitric.deploy.v1.DeployEventMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = new proto.nitric.deploy.v1.DeployUpEventResult;
      reader.readMessage(value,proto.nitric.deploy.v1.DeployUpEventResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.DeployUpEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.DeployUpEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.DeployUpEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployUpEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.deploy.v1.DeployEventMessage.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.deploy.v1.DeployUpEventResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeployEventMessage message = 1;
 * @return {?proto.nitric.deploy.v1.DeployEventMessage}
 */
proto.nitric.deploy.v1.DeployUpEvent.prototype.getMessage = function() {
  return /** @type{?proto.nitric.deploy.v1.DeployEventMessage} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.DeployEventMessage, 1));
};


/**
 * @param {?proto.nitric.deploy.v1.DeployEventMessage|undefined} value
 * @return {!proto.nitric.deploy.v1.DeployUpEvent} returns this
*/
proto.nitric.deploy.v1.DeployUpEvent.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nitric.deploy.v1.DeployUpEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.DeployUpEvent} returns this
 */
proto.nitric.deploy.v1.DeployUpEvent.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.DeployUpEvent.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeployUpEventResult result = 2;
 * @return {?proto.nitric.deploy.v1.DeployUpEventResult}
 */
proto.nitric.deploy.v1.DeployUpEvent.prototype.getResult = function() {
  return /** @type{?proto.nitric.deploy.v1.DeployUpEventResult} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.DeployUpEventResult, 2));
};


/**
 * @param {?proto.nitric.deploy.v1.DeployUpEventResult|undefined} value
 * @return {!proto.nitric.deploy.v1.DeployUpEvent} returns this
*/
proto.nitric.deploy.v1.DeployUpEvent.prototype.setResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.deploy.v1.DeployUpEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.DeployUpEvent} returns this
 */
proto.nitric.deploy.v1.DeployUpEvent.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.DeployUpEvent.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.DeployEventMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.DeployEventMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.DeployEventMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployEventMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.DeployEventMessage}
 */
proto.nitric.deploy.v1.DeployEventMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.DeployEventMessage;
  return proto.nitric.deploy.v1.DeployEventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.DeployEventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.DeployEventMessage}
 */
proto.nitric.deploy.v1.DeployEventMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.DeployEventMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.DeployEventMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.DeployEventMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployEventMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.nitric.deploy.v1.DeployEventMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.DeployEventMessage} returns this
 */
proto.nitric.deploy.v1.DeployEventMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.deploy.v1.UpResult.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.nitric.deploy.v1.UpResult.ContentCase = {
  CONTENT_NOT_SET: 0,
  STRING_RESULT: 1
};

/**
 * @return {proto.nitric.deploy.v1.UpResult.ContentCase}
 */
proto.nitric.deploy.v1.UpResult.prototype.getContentCase = function() {
  return /** @type {proto.nitric.deploy.v1.UpResult.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.deploy.v1.UpResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.UpResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.UpResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.UpResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.UpResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringResult: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.UpResult}
 */
proto.nitric.deploy.v1.UpResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.UpResult;
  return proto.nitric.deploy.v1.UpResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.UpResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.UpResult}
 */
proto.nitric.deploy.v1.UpResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.UpResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.UpResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.UpResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.UpResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string string_result = 1;
 * @return {string}
 */
proto.nitric.deploy.v1.UpResult.prototype.getStringResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.UpResult} returns this
 */
proto.nitric.deploy.v1.UpResult.prototype.setStringResult = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nitric.deploy.v1.UpResult.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nitric.deploy.v1.UpResult} returns this
 */
proto.nitric.deploy.v1.UpResult.prototype.clearStringResult = function() {
  return jspb.Message.setOneofField(this, 1, proto.nitric.deploy.v1.UpResult.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.UpResult.prototype.hasStringResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.DeployUpEventResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.DeployUpEventResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.DeployUpEventResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployUpEventResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    result: (f = msg.getResult()) && proto.nitric.deploy.v1.UpResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.DeployUpEventResult}
 */
proto.nitric.deploy.v1.DeployUpEventResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.DeployUpEventResult;
  return proto.nitric.deploy.v1.DeployUpEventResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.DeployUpEventResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.DeployUpEventResult}
 */
proto.nitric.deploy.v1.DeployUpEventResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.nitric.deploy.v1.UpResult;
      reader.readMessage(value,proto.nitric.deploy.v1.UpResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.DeployUpEventResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.DeployUpEventResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.DeployUpEventResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployUpEventResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.deploy.v1.UpResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.nitric.deploy.v1.DeployUpEventResult.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nitric.deploy.v1.DeployUpEventResult} returns this
 */
proto.nitric.deploy.v1.DeployUpEventResult.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional UpResult result = 2;
 * @return {?proto.nitric.deploy.v1.UpResult}
 */
proto.nitric.deploy.v1.DeployUpEventResult.prototype.getResult = function() {
  return /** @type{?proto.nitric.deploy.v1.UpResult} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.UpResult, 2));
};


/**
 * @param {?proto.nitric.deploy.v1.UpResult|undefined} value
 * @return {!proto.nitric.deploy.v1.DeployUpEventResult} returns this
*/
proto.nitric.deploy.v1.DeployUpEventResult.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.DeployUpEventResult} returns this
 */
proto.nitric.deploy.v1.DeployUpEventResult.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.DeployUpEventResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.DeployDownRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.DeployDownRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.DeployDownRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployDownRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.DeployDownRequest}
 */
proto.nitric.deploy.v1.DeployDownRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.DeployDownRequest;
  return proto.nitric.deploy.v1.DeployDownRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.DeployDownRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.DeployDownRequest}
 */
proto.nitric.deploy.v1.DeployDownRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.DeployDownRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.DeployDownRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.DeployDownRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployDownRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct attributes = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.nitric.deploy.v1.DeployDownRequest.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.nitric.deploy.v1.DeployDownRequest} returns this
*/
proto.nitric.deploy.v1.DeployDownRequest.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.DeployDownRequest} returns this
 */
proto.nitric.deploy.v1.DeployDownRequest.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.DeployDownRequest.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.deploy.v1.DeployDownEvent.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nitric.deploy.v1.DeployDownEvent.ContentCase = {
  CONTENT_NOT_SET: 0,
  MESSAGE: 1,
  RESULT: 2
};

/**
 * @return {proto.nitric.deploy.v1.DeployDownEvent.ContentCase}
 */
proto.nitric.deploy.v1.DeployDownEvent.prototype.getContentCase = function() {
  return /** @type {proto.nitric.deploy.v1.DeployDownEvent.ContentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.deploy.v1.DeployDownEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.DeployDownEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.DeployDownEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.DeployDownEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployDownEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.nitric.deploy.v1.DeployEventMessage.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.nitric.deploy.v1.DeployDownEventResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.DeployDownEvent}
 */
proto.nitric.deploy.v1.DeployDownEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.DeployDownEvent;
  return proto.nitric.deploy.v1.DeployDownEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.DeployDownEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.DeployDownEvent}
 */
proto.nitric.deploy.v1.DeployDownEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.deploy.v1.DeployEventMessage;
      reader.readMessage(value,proto.nitric.deploy.v1.DeployEventMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = new proto.nitric.deploy.v1.DeployDownEventResult;
      reader.readMessage(value,proto.nitric.deploy.v1.DeployDownEventResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.DeployDownEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.DeployDownEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.DeployDownEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployDownEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.deploy.v1.DeployEventMessage.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.deploy.v1.DeployDownEventResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeployEventMessage message = 1;
 * @return {?proto.nitric.deploy.v1.DeployEventMessage}
 */
proto.nitric.deploy.v1.DeployDownEvent.prototype.getMessage = function() {
  return /** @type{?proto.nitric.deploy.v1.DeployEventMessage} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.DeployEventMessage, 1));
};


/**
 * @param {?proto.nitric.deploy.v1.DeployEventMessage|undefined} value
 * @return {!proto.nitric.deploy.v1.DeployDownEvent} returns this
*/
proto.nitric.deploy.v1.DeployDownEvent.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nitric.deploy.v1.DeployDownEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.DeployDownEvent} returns this
 */
proto.nitric.deploy.v1.DeployDownEvent.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.DeployDownEvent.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeployDownEventResult result = 2;
 * @return {?proto.nitric.deploy.v1.DeployDownEventResult}
 */
proto.nitric.deploy.v1.DeployDownEvent.prototype.getResult = function() {
  return /** @type{?proto.nitric.deploy.v1.DeployDownEventResult} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.DeployDownEventResult, 2));
};


/**
 * @param {?proto.nitric.deploy.v1.DeployDownEventResult|undefined} value
 * @return {!proto.nitric.deploy.v1.DeployDownEvent} returns this
*/
proto.nitric.deploy.v1.DeployDownEvent.prototype.setResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nitric.deploy.v1.DeployDownEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.DeployDownEvent} returns this
 */
proto.nitric.deploy.v1.DeployDownEvent.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.DeployDownEvent.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.DeployDownEventResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.DeployDownEventResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.DeployDownEventResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployDownEventResult.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.DeployDownEventResult}
 */
proto.nitric.deploy.v1.DeployDownEventResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.DeployDownEventResult;
  return proto.nitric.deploy.v1.DeployDownEventResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.DeployDownEventResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.DeployDownEventResult}
 */
proto.nitric.deploy.v1.DeployDownEventResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.DeployDownEventResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.DeployDownEventResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.DeployDownEventResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.DeployDownEventResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.ImageSource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.ImageSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.ImageSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.ImageSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.ImageSource}
 */
proto.nitric.deploy.v1.ImageSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.ImageSource;
  return proto.nitric.deploy.v1.ImageSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.ImageSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.ImageSource}
 */
proto.nitric.deploy.v1.ImageSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.ImageSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.ImageSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.ImageSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.ImageSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.nitric.deploy.v1.ImageSource.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.ImageSource} returns this
 */
proto.nitric.deploy.v1.ImageSource.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.deploy.v1.ExecutionUnit.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.nitric.deploy.v1.ExecutionUnit.SourceCase = {
  SOURCE_NOT_SET: 0,
  IMAGE: 1
};

/**
 * @return {proto.nitric.deploy.v1.ExecutionUnit.SourceCase}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.getSourceCase = function() {
  return /** @type {proto.nitric.deploy.v1.ExecutionUnit.SourceCase} */(jspb.Message.computeOneofCase(this, proto.nitric.deploy.v1.ExecutionUnit.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.ExecutionUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.ExecutionUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.ExecutionUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: (f = msg.getImage()) && proto.nitric.deploy.v1.ImageSource.toObject(includeInstance, f),
    workers: jspb.Message.getFieldWithDefault(msg, 10, 0),
    timeout: jspb.Message.getFieldWithDefault(msg, 11, 0),
    memory: jspb.Message.getFieldWithDefault(msg, 12, 0),
    type: jspb.Message.getFieldWithDefault(msg, 13, ""),
    envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.ExecutionUnit}
 */
proto.nitric.deploy.v1.ExecutionUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.ExecutionUnit;
  return proto.nitric.deploy.v1.ExecutionUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.ExecutionUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.ExecutionUnit}
 */
proto.nitric.deploy.v1.ExecutionUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.deploy.v1.ImageSource;
      reader.readMessage(value,proto.nitric.deploy.v1.ImageSource.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkers(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMemory(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 14:
      var value = msg.getEnvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.ExecutionUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.ExecutionUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.ExecutionUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.deploy.v1.ImageSource.serializeBinaryToWriter
    );
  }
  f = message.getWorkers();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getMemory();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional ImageSource image = 1;
 * @return {?proto.nitric.deploy.v1.ImageSource}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.getImage = function() {
  return /** @type{?proto.nitric.deploy.v1.ImageSource} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.ImageSource, 1));
};


/**
 * @param {?proto.nitric.deploy.v1.ImageSource|undefined} value
 * @return {!proto.nitric.deploy.v1.ExecutionUnit} returns this
*/
proto.nitric.deploy.v1.ExecutionUnit.prototype.setImage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nitric.deploy.v1.ExecutionUnit.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.ExecutionUnit} returns this
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.hasImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 workers = 10;
 * @return {number}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.getWorkers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.deploy.v1.ExecutionUnit} returns this
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.setWorkers = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 timeout = 11;
 * @return {number}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.deploy.v1.ExecutionUnit} returns this
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 memory = 12;
 * @return {number}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.nitric.deploy.v1.ExecutionUnit} returns this
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.setMemory = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string type = 13;
 * @return {string}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.ExecutionUnit} returns this
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * map<string, string> env = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.getEnvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nitric.deploy.v1.ExecutionUnit} returns this
 */
proto.nitric.deploy.v1.ExecutionUnit.prototype.clearEnvMap = function() {
  this.getEnvMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.deploy.v1.Bucket.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Bucket.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Bucket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Bucket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Bucket.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationsList: jspb.Message.toObjectList(msg.getNotificationsList(),
    proto.nitric.deploy.v1.BucketNotificationTarget.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Bucket}
 */
proto.nitric.deploy.v1.Bucket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Bucket;
  return proto.nitric.deploy.v1.Bucket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Bucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Bucket}
 */
proto.nitric.deploy.v1.Bucket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.deploy.v1.BucketNotificationTarget;
      reader.readMessage(value,proto.nitric.deploy.v1.BucketNotificationTarget.deserializeBinaryFromReader);
      msg.addNotifications(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Bucket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Bucket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Bucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Bucket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nitric.deploy.v1.BucketNotificationTarget.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BucketNotificationTarget notifications = 1;
 * @return {!Array<!proto.nitric.deploy.v1.BucketNotificationTarget>}
 */
proto.nitric.deploy.v1.Bucket.prototype.getNotificationsList = function() {
  return /** @type{!Array<!proto.nitric.deploy.v1.BucketNotificationTarget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.deploy.v1.BucketNotificationTarget, 1));
};


/**
 * @param {!Array<!proto.nitric.deploy.v1.BucketNotificationTarget>} value
 * @return {!proto.nitric.deploy.v1.Bucket} returns this
*/
proto.nitric.deploy.v1.Bucket.prototype.setNotificationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nitric.deploy.v1.BucketNotificationTarget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.deploy.v1.BucketNotificationTarget}
 */
proto.nitric.deploy.v1.Bucket.prototype.addNotifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nitric.deploy.v1.BucketNotificationTarget, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.deploy.v1.Bucket} returns this
 */
proto.nitric.deploy.v1.Bucket.prototype.clearNotificationsList = function() {
  return this.setNotificationsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.deploy.v1.BucketNotificationTarget.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.TargetCase = {
  TARGET_NOT_SET: 0,
  EXECUTION_UNIT: 2
};

/**
 * @return {proto.nitric.deploy.v1.BucketNotificationTarget.TargetCase}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.getTargetCase = function() {
  return /** @type {proto.nitric.deploy.v1.BucketNotificationTarget.TargetCase} */(jspb.Message.computeOneofCase(this, proto.nitric.deploy.v1.BucketNotificationTarget.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.BucketNotificationTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.BucketNotificationTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.BucketNotificationTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto_faas_v1_faas_pb.BucketNotificationConfig.toObject(includeInstance, f),
    executionUnit: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.BucketNotificationTarget}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.BucketNotificationTarget;
  return proto.nitric.deploy.v1.BucketNotificationTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.BucketNotificationTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.BucketNotificationTarget}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_faas_v1_faas_pb.BucketNotificationConfig;
      reader.readMessage(value,proto_faas_v1_faas_pb.BucketNotificationConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.BucketNotificationTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.BucketNotificationTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.BucketNotificationTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_faas_v1_faas_pb.BucketNotificationConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional nitric.faas.v1.BucketNotificationConfig config = 1;
 * @return {?proto.nitric.faas.v1.BucketNotificationConfig}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.getConfig = function() {
  return /** @type{?proto.nitric.faas.v1.BucketNotificationConfig} */ (
    jspb.Message.getWrapperField(this, proto_faas_v1_faas_pb.BucketNotificationConfig, 1));
};


/**
 * @param {?proto.nitric.faas.v1.BucketNotificationConfig|undefined} value
 * @return {!proto.nitric.deploy.v1.BucketNotificationTarget} returns this
*/
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.BucketNotificationTarget} returns this
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string execution_unit = 2;
 * @return {string}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.getExecutionUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.BucketNotificationTarget} returns this
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.setExecutionUnit = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.nitric.deploy.v1.BucketNotificationTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nitric.deploy.v1.BucketNotificationTarget} returns this
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.clearExecutionUnit = function() {
  return jspb.Message.setOneofField(this, 2, proto.nitric.deploy.v1.BucketNotificationTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.BucketNotificationTarget.prototype.hasExecutionUnit = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.deploy.v1.Topic.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Topic.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Topic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Topic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Topic.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscriptionsList: jspb.Message.toObjectList(msg.getSubscriptionsList(),
    proto.nitric.deploy.v1.SubscriptionTarget.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Topic}
 */
proto.nitric.deploy.v1.Topic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Topic;
  return proto.nitric.deploy.v1.Topic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Topic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Topic}
 */
proto.nitric.deploy.v1.Topic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.deploy.v1.SubscriptionTarget;
      reader.readMessage(value,proto.nitric.deploy.v1.SubscriptionTarget.deserializeBinaryFromReader);
      msg.addSubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Topic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Topic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Topic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Topic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nitric.deploy.v1.SubscriptionTarget.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SubscriptionTarget subscriptions = 1;
 * @return {!Array<!proto.nitric.deploy.v1.SubscriptionTarget>}
 */
proto.nitric.deploy.v1.Topic.prototype.getSubscriptionsList = function() {
  return /** @type{!Array<!proto.nitric.deploy.v1.SubscriptionTarget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.deploy.v1.SubscriptionTarget, 1));
};


/**
 * @param {!Array<!proto.nitric.deploy.v1.SubscriptionTarget>} value
 * @return {!proto.nitric.deploy.v1.Topic} returns this
*/
proto.nitric.deploy.v1.Topic.prototype.setSubscriptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nitric.deploy.v1.SubscriptionTarget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.deploy.v1.SubscriptionTarget}
 */
proto.nitric.deploy.v1.Topic.prototype.addSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nitric.deploy.v1.SubscriptionTarget, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.deploy.v1.Topic} returns this
 */
proto.nitric.deploy.v1.Topic.prototype.clearSubscriptionsList = function() {
  return this.setSubscriptionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Queue.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Queue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Queue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Queue.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Queue}
 */
proto.nitric.deploy.v1.Queue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Queue;
  return proto.nitric.deploy.v1.Queue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Queue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Queue}
 */
proto.nitric.deploy.v1.Queue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Queue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Queue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Queue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Queue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Collection}
 */
proto.nitric.deploy.v1.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Collection;
  return proto.nitric.deploy.v1.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Collection}
 */
proto.nitric.deploy.v1.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Secret.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Secret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Secret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Secret.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Secret}
 */
proto.nitric.deploy.v1.Secret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Secret;
  return proto.nitric.deploy.v1.Secret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Secret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Secret}
 */
proto.nitric.deploy.v1.Secret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Secret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Secret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Secret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Secret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.deploy.v1.SubscriptionTarget.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.nitric.deploy.v1.SubscriptionTarget.TargetCase = {
  TARGET_NOT_SET: 0,
  EXECUTION_UNIT: 1
};

/**
 * @return {proto.nitric.deploy.v1.SubscriptionTarget.TargetCase}
 */
proto.nitric.deploy.v1.SubscriptionTarget.prototype.getTargetCase = function() {
  return /** @type {proto.nitric.deploy.v1.SubscriptionTarget.TargetCase} */(jspb.Message.computeOneofCase(this, proto.nitric.deploy.v1.SubscriptionTarget.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.SubscriptionTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.SubscriptionTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.SubscriptionTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.SubscriptionTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    executionUnit: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.SubscriptionTarget}
 */
proto.nitric.deploy.v1.SubscriptionTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.SubscriptionTarget;
  return proto.nitric.deploy.v1.SubscriptionTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.SubscriptionTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.SubscriptionTarget}
 */
proto.nitric.deploy.v1.SubscriptionTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.SubscriptionTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.SubscriptionTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.SubscriptionTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.SubscriptionTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string execution_unit = 1;
 * @return {string}
 */
proto.nitric.deploy.v1.SubscriptionTarget.prototype.getExecutionUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.SubscriptionTarget} returns this
 */
proto.nitric.deploy.v1.SubscriptionTarget.prototype.setExecutionUnit = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nitric.deploy.v1.SubscriptionTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nitric.deploy.v1.SubscriptionTarget} returns this
 */
proto.nitric.deploy.v1.SubscriptionTarget.prototype.clearExecutionUnit = function() {
  return jspb.Message.setOneofField(this, 1, proto.nitric.deploy.v1.SubscriptionTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.SubscriptionTarget.prototype.hasExecutionUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.TopicSubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.TopicSubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.TopicSubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.TopicSubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.nitric.deploy.v1.SubscriptionTarget.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.TopicSubscription}
 */
proto.nitric.deploy.v1.TopicSubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.TopicSubscription;
  return proto.nitric.deploy.v1.TopicSubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.TopicSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.TopicSubscription}
 */
proto.nitric.deploy.v1.TopicSubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.deploy.v1.SubscriptionTarget;
      reader.readMessage(value,proto.nitric.deploy.v1.SubscriptionTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.TopicSubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.TopicSubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.TopicSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.TopicSubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nitric.deploy.v1.SubscriptionTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubscriptionTarget target = 1;
 * @return {?proto.nitric.deploy.v1.SubscriptionTarget}
 */
proto.nitric.deploy.v1.TopicSubscription.prototype.getTarget = function() {
  return /** @type{?proto.nitric.deploy.v1.SubscriptionTarget} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.SubscriptionTarget, 1));
};


/**
 * @param {?proto.nitric.deploy.v1.SubscriptionTarget|undefined} value
 * @return {!proto.nitric.deploy.v1.TopicSubscription} returns this
*/
proto.nitric.deploy.v1.TopicSubscription.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.TopicSubscription} returns this
 */
proto.nitric.deploy.v1.TopicSubscription.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.TopicSubscription.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.deploy.v1.Api.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.nitric.deploy.v1.Api.DocumentCase = {
  DOCUMENT_NOT_SET: 0,
  OPENAPI: 1
};

/**
 * @return {proto.nitric.deploy.v1.Api.DocumentCase}
 */
proto.nitric.deploy.v1.Api.prototype.getDocumentCase = function() {
  return /** @type {proto.nitric.deploy.v1.Api.DocumentCase} */(jspb.Message.computeOneofCase(this, proto.nitric.deploy.v1.Api.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Api.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Api.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Api} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Api.toObject = function(includeInstance, msg) {
  var f, obj = {
    openapi: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Api}
 */
proto.nitric.deploy.v1.Api.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Api;
  return proto.nitric.deploy.v1.Api.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Api} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Api}
 */
proto.nitric.deploy.v1.Api.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenapi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Api.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Api.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Api} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Api.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string openapi = 1;
 * @return {string}
 */
proto.nitric.deploy.v1.Api.prototype.getOpenapi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.Api} returns this
 */
proto.nitric.deploy.v1.Api.prototype.setOpenapi = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nitric.deploy.v1.Api.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nitric.deploy.v1.Api} returns this
 */
proto.nitric.deploy.v1.Api.prototype.clearOpenapi = function() {
  return jspb.Message.setOneofField(this, 1, proto.nitric.deploy.v1.Api.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Api.prototype.hasOpenapi = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.deploy.v1.ScheduleTarget.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.nitric.deploy.v1.ScheduleTarget.TargetCase = {
  TARGET_NOT_SET: 0,
  EXECUTION_UNIT: 1
};

/**
 * @return {proto.nitric.deploy.v1.ScheduleTarget.TargetCase}
 */
proto.nitric.deploy.v1.ScheduleTarget.prototype.getTargetCase = function() {
  return /** @type {proto.nitric.deploy.v1.ScheduleTarget.TargetCase} */(jspb.Message.computeOneofCase(this, proto.nitric.deploy.v1.ScheduleTarget.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.ScheduleTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.ScheduleTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.ScheduleTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.ScheduleTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    executionUnit: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.ScheduleTarget}
 */
proto.nitric.deploy.v1.ScheduleTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.ScheduleTarget;
  return proto.nitric.deploy.v1.ScheduleTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.ScheduleTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.ScheduleTarget}
 */
proto.nitric.deploy.v1.ScheduleTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.ScheduleTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.ScheduleTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.ScheduleTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.ScheduleTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string execution_unit = 1;
 * @return {string}
 */
proto.nitric.deploy.v1.ScheduleTarget.prototype.getExecutionUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.ScheduleTarget} returns this
 */
proto.nitric.deploy.v1.ScheduleTarget.prototype.setExecutionUnit = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nitric.deploy.v1.ScheduleTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nitric.deploy.v1.ScheduleTarget} returns this
 */
proto.nitric.deploy.v1.ScheduleTarget.prototype.clearExecutionUnit = function() {
  return jspb.Message.setOneofField(this, 1, proto.nitric.deploy.v1.ScheduleTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.ScheduleTarget.prototype.hasExecutionUnit = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Schedule.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Schedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Schedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Schedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    cron: jspb.Message.getFieldWithDefault(msg, 1, ""),
    target: (f = msg.getTarget()) && proto.nitric.deploy.v1.ScheduleTarget.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Schedule}
 */
proto.nitric.deploy.v1.Schedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Schedule;
  return proto.nitric.deploy.v1.Schedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Schedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Schedule}
 */
proto.nitric.deploy.v1.Schedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCron(value);
      break;
    case 2:
      var value = new proto.nitric.deploy.v1.ScheduleTarget;
      reader.readMessage(value,proto.nitric.deploy.v1.ScheduleTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Schedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Schedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Schedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Schedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCron();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nitric.deploy.v1.ScheduleTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional string cron = 1;
 * @return {string}
 */
proto.nitric.deploy.v1.Schedule.prototype.getCron = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.Schedule} returns this
 */
proto.nitric.deploy.v1.Schedule.prototype.setCron = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ScheduleTarget target = 2;
 * @return {?proto.nitric.deploy.v1.ScheduleTarget}
 */
proto.nitric.deploy.v1.Schedule.prototype.getTarget = function() {
  return /** @type{?proto.nitric.deploy.v1.ScheduleTarget} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.ScheduleTarget, 2));
};


/**
 * @param {?proto.nitric.deploy.v1.ScheduleTarget|undefined} value
 * @return {!proto.nitric.deploy.v1.Schedule} returns this
*/
proto.nitric.deploy.v1.Schedule.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Schedule} returns this
 */
proto.nitric.deploy.v1.Schedule.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Schedule.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nitric.deploy.v1.Resource.oneofGroups_ = [[10,11,12,13,14,15,16,17,18]];

/**
 * @enum {number}
 */
proto.nitric.deploy.v1.Resource.ConfigCase = {
  CONFIG_NOT_SET: 0,
  EXECUTION_UNIT: 10,
  BUCKET: 11,
  TOPIC: 12,
  QUEUE: 13,
  API: 14,
  POLICY: 15,
  SCHEDULE: 16,
  COLLECTION: 17,
  SECRET: 18
};

/**
 * @return {proto.nitric.deploy.v1.Resource.ConfigCase}
 */
proto.nitric.deploy.v1.Resource.prototype.getConfigCase = function() {
  return /** @type {proto.nitric.deploy.v1.Resource.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.nitric.deploy.v1.Resource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    executionUnit: (f = msg.getExecutionUnit()) && proto.nitric.deploy.v1.ExecutionUnit.toObject(includeInstance, f),
    bucket: (f = msg.getBucket()) && proto.nitric.deploy.v1.Bucket.toObject(includeInstance, f),
    topic: (f = msg.getTopic()) && proto.nitric.deploy.v1.Topic.toObject(includeInstance, f),
    queue: (f = msg.getQueue()) && proto.nitric.deploy.v1.Queue.toObject(includeInstance, f),
    api: (f = msg.getApi()) && proto.nitric.deploy.v1.Api.toObject(includeInstance, f),
    policy: (f = msg.getPolicy()) && proto.nitric.deploy.v1.Policy.toObject(includeInstance, f),
    schedule: (f = msg.getSchedule()) && proto.nitric.deploy.v1.Schedule.toObject(includeInstance, f),
    collection: (f = msg.getCollection()) && proto.nitric.deploy.v1.Collection.toObject(includeInstance, f),
    secret: (f = msg.getSecret()) && proto.nitric.deploy.v1.Secret.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Resource}
 */
proto.nitric.deploy.v1.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Resource;
  return proto.nitric.deploy.v1.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Resource}
 */
proto.nitric.deploy.v1.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.nitric.resource.v1.ResourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var value = new proto.nitric.deploy.v1.ExecutionUnit;
      reader.readMessage(value,proto.nitric.deploy.v1.ExecutionUnit.deserializeBinaryFromReader);
      msg.setExecutionUnit(value);
      break;
    case 11:
      var value = new proto.nitric.deploy.v1.Bucket;
      reader.readMessage(value,proto.nitric.deploy.v1.Bucket.deserializeBinaryFromReader);
      msg.setBucket(value);
      break;
    case 12:
      var value = new proto.nitric.deploy.v1.Topic;
      reader.readMessage(value,proto.nitric.deploy.v1.Topic.deserializeBinaryFromReader);
      msg.setTopic(value);
      break;
    case 13:
      var value = new proto.nitric.deploy.v1.Queue;
      reader.readMessage(value,proto.nitric.deploy.v1.Queue.deserializeBinaryFromReader);
      msg.setQueue(value);
      break;
    case 14:
      var value = new proto.nitric.deploy.v1.Api;
      reader.readMessage(value,proto.nitric.deploy.v1.Api.deserializeBinaryFromReader);
      msg.setApi(value);
      break;
    case 15:
      var value = new proto.nitric.deploy.v1.Policy;
      reader.readMessage(value,proto.nitric.deploy.v1.Policy.deserializeBinaryFromReader);
      msg.setPolicy(value);
      break;
    case 16:
      var value = new proto.nitric.deploy.v1.Schedule;
      reader.readMessage(value,proto.nitric.deploy.v1.Schedule.deserializeBinaryFromReader);
      msg.setSchedule(value);
      break;
    case 17:
      var value = new proto.nitric.deploy.v1.Collection;
      reader.readMessage(value,proto.nitric.deploy.v1.Collection.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 18:
      var value = new proto.nitric.deploy.v1.Secret;
      reader.readMessage(value,proto.nitric.deploy.v1.Secret.deserializeBinaryFromReader);
      msg.setSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getExecutionUnit();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nitric.deploy.v1.ExecutionUnit.serializeBinaryToWriter
    );
  }
  f = message.getBucket();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nitric.deploy.v1.Bucket.serializeBinaryToWriter
    );
  }
  f = message.getTopic();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.nitric.deploy.v1.Topic.serializeBinaryToWriter
    );
  }
  f = message.getQueue();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.nitric.deploy.v1.Queue.serializeBinaryToWriter
    );
  }
  f = message.getApi();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.nitric.deploy.v1.Api.serializeBinaryToWriter
    );
  }
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.nitric.deploy.v1.Policy.serializeBinaryToWriter
    );
  }
  f = message.getSchedule();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.nitric.deploy.v1.Schedule.serializeBinaryToWriter
    );
  }
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.nitric.deploy.v1.Collection.serializeBinaryToWriter
    );
  }
  f = message.getSecret();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.nitric.deploy.v1.Secret.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nitric.deploy.v1.Resource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional nitric.resource.v1.ResourceType type = 2;
 * @return {!proto.nitric.resource.v1.ResourceType}
 */
proto.nitric.deploy.v1.Resource.prototype.getType = function() {
  return /** @type {!proto.nitric.resource.v1.ResourceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nitric.resource.v1.ResourceType} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ExecutionUnit execution_unit = 10;
 * @return {?proto.nitric.deploy.v1.ExecutionUnit}
 */
proto.nitric.deploy.v1.Resource.prototype.getExecutionUnit = function() {
  return /** @type{?proto.nitric.deploy.v1.ExecutionUnit} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.ExecutionUnit, 10));
};


/**
 * @param {?proto.nitric.deploy.v1.ExecutionUnit|undefined} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
*/
proto.nitric.deploy.v1.Resource.prototype.setExecutionUnit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nitric.deploy.v1.Resource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.clearExecutionUnit = function() {
  return this.setExecutionUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Resource.prototype.hasExecutionUnit = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Bucket bucket = 11;
 * @return {?proto.nitric.deploy.v1.Bucket}
 */
proto.nitric.deploy.v1.Resource.prototype.getBucket = function() {
  return /** @type{?proto.nitric.deploy.v1.Bucket} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.Bucket, 11));
};


/**
 * @param {?proto.nitric.deploy.v1.Bucket|undefined} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
*/
proto.nitric.deploy.v1.Resource.prototype.setBucket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.nitric.deploy.v1.Resource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.clearBucket = function() {
  return this.setBucket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Resource.prototype.hasBucket = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Topic topic = 12;
 * @return {?proto.nitric.deploy.v1.Topic}
 */
proto.nitric.deploy.v1.Resource.prototype.getTopic = function() {
  return /** @type{?proto.nitric.deploy.v1.Topic} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.Topic, 12));
};


/**
 * @param {?proto.nitric.deploy.v1.Topic|undefined} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
*/
proto.nitric.deploy.v1.Resource.prototype.setTopic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.nitric.deploy.v1.Resource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.clearTopic = function() {
  return this.setTopic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Resource.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Queue queue = 13;
 * @return {?proto.nitric.deploy.v1.Queue}
 */
proto.nitric.deploy.v1.Resource.prototype.getQueue = function() {
  return /** @type{?proto.nitric.deploy.v1.Queue} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.Queue, 13));
};


/**
 * @param {?proto.nitric.deploy.v1.Queue|undefined} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
*/
proto.nitric.deploy.v1.Resource.prototype.setQueue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.nitric.deploy.v1.Resource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.clearQueue = function() {
  return this.setQueue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Resource.prototype.hasQueue = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Api api = 14;
 * @return {?proto.nitric.deploy.v1.Api}
 */
proto.nitric.deploy.v1.Resource.prototype.getApi = function() {
  return /** @type{?proto.nitric.deploy.v1.Api} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.Api, 14));
};


/**
 * @param {?proto.nitric.deploy.v1.Api|undefined} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
*/
proto.nitric.deploy.v1.Resource.prototype.setApi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.nitric.deploy.v1.Resource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.clearApi = function() {
  return this.setApi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Resource.prototype.hasApi = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Policy policy = 15;
 * @return {?proto.nitric.deploy.v1.Policy}
 */
proto.nitric.deploy.v1.Resource.prototype.getPolicy = function() {
  return /** @type{?proto.nitric.deploy.v1.Policy} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.Policy, 15));
};


/**
 * @param {?proto.nitric.deploy.v1.Policy|undefined} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
*/
proto.nitric.deploy.v1.Resource.prototype.setPolicy = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.nitric.deploy.v1.Resource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.clearPolicy = function() {
  return this.setPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Resource.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Schedule schedule = 16;
 * @return {?proto.nitric.deploy.v1.Schedule}
 */
proto.nitric.deploy.v1.Resource.prototype.getSchedule = function() {
  return /** @type{?proto.nitric.deploy.v1.Schedule} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.Schedule, 16));
};


/**
 * @param {?proto.nitric.deploy.v1.Schedule|undefined} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
*/
proto.nitric.deploy.v1.Resource.prototype.setSchedule = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.nitric.deploy.v1.Resource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.clearSchedule = function() {
  return this.setSchedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Resource.prototype.hasSchedule = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Collection collection = 17;
 * @return {?proto.nitric.deploy.v1.Collection}
 */
proto.nitric.deploy.v1.Resource.prototype.getCollection = function() {
  return /** @type{?proto.nitric.deploy.v1.Collection} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.Collection, 17));
};


/**
 * @param {?proto.nitric.deploy.v1.Collection|undefined} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
*/
proto.nitric.deploy.v1.Resource.prototype.setCollection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.nitric.deploy.v1.Resource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Resource.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Secret secret = 18;
 * @return {?proto.nitric.deploy.v1.Secret}
 */
proto.nitric.deploy.v1.Resource.prototype.getSecret = function() {
  return /** @type{?proto.nitric.deploy.v1.Secret} */ (
    jspb.Message.getWrapperField(this, proto.nitric.deploy.v1.Secret, 18));
};


/**
 * @param {?proto.nitric.deploy.v1.Secret|undefined} value
 * @return {!proto.nitric.deploy.v1.Resource} returns this
*/
proto.nitric.deploy.v1.Resource.prototype.setSecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.nitric.deploy.v1.Resource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.deploy.v1.Resource} returns this
 */
proto.nitric.deploy.v1.Resource.prototype.clearSecret = function() {
  return this.setSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.deploy.v1.Resource.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.deploy.v1.Policy.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Policy.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Policy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Policy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Policy.toObject = function(includeInstance, msg) {
  var f, obj = {
    principalsList: jspb.Message.toObjectList(msg.getPrincipalsList(),
    proto.nitric.deploy.v1.Resource.toObject, includeInstance),
    actionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.nitric.deploy.v1.Resource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Policy}
 */
proto.nitric.deploy.v1.Policy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Policy;
  return proto.nitric.deploy.v1.Policy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Policy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Policy}
 */
proto.nitric.deploy.v1.Policy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.deploy.v1.Resource;
      reader.readMessage(value,proto.nitric.deploy.v1.Resource.deserializeBinaryFromReader);
      msg.addPrincipals(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.nitric.resource.v1.Action>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addActions(values[i]);
      }
      break;
    case 3:
      var value = new proto.nitric.deploy.v1.Resource;
      reader.readMessage(value,proto.nitric.deploy.v1.Resource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Policy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Policy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Policy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Policy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrincipalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nitric.deploy.v1.Resource.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nitric.deploy.v1.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Resource principals = 1;
 * @return {!Array<!proto.nitric.deploy.v1.Resource>}
 */
proto.nitric.deploy.v1.Policy.prototype.getPrincipalsList = function() {
  return /** @type{!Array<!proto.nitric.deploy.v1.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.deploy.v1.Resource, 1));
};


/**
 * @param {!Array<!proto.nitric.deploy.v1.Resource>} value
 * @return {!proto.nitric.deploy.v1.Policy} returns this
*/
proto.nitric.deploy.v1.Policy.prototype.setPrincipalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nitric.deploy.v1.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.deploy.v1.Resource}
 */
proto.nitric.deploy.v1.Policy.prototype.addPrincipals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nitric.deploy.v1.Resource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.deploy.v1.Policy} returns this
 */
proto.nitric.deploy.v1.Policy.prototype.clearPrincipalsList = function() {
  return this.setPrincipalsList([]);
};


/**
 * repeated nitric.resource.v1.Action actions = 2;
 * @return {!Array<!proto.nitric.resource.v1.Action>}
 */
proto.nitric.deploy.v1.Policy.prototype.getActionsList = function() {
  return /** @type {!Array<!proto.nitric.resource.v1.Action>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.nitric.resource.v1.Action>} value
 * @return {!proto.nitric.deploy.v1.Policy} returns this
 */
proto.nitric.deploy.v1.Policy.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.nitric.resource.v1.Action} value
 * @param {number=} opt_index
 * @return {!proto.nitric.deploy.v1.Policy} returns this
 */
proto.nitric.deploy.v1.Policy.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.deploy.v1.Policy} returns this
 */
proto.nitric.deploy.v1.Policy.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * repeated Resource resources = 3;
 * @return {!Array<!proto.nitric.deploy.v1.Resource>}
 */
proto.nitric.deploy.v1.Policy.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.nitric.deploy.v1.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.deploy.v1.Resource, 3));
};


/**
 * @param {!Array<!proto.nitric.deploy.v1.Resource>} value
 * @return {!proto.nitric.deploy.v1.Policy} returns this
*/
proto.nitric.deploy.v1.Policy.prototype.setResourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nitric.deploy.v1.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.deploy.v1.Resource}
 */
proto.nitric.deploy.v1.Policy.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nitric.deploy.v1.Resource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.deploy.v1.Policy} returns this
 */
proto.nitric.deploy.v1.Policy.prototype.clearResourcesList = function() {
  return this.setResourcesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.deploy.v1.Spec.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.deploy.v1.Spec.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.deploy.v1.Spec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.deploy.v1.Spec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Spec.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.nitric.deploy.v1.Resource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.deploy.v1.Spec}
 */
proto.nitric.deploy.v1.Spec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.deploy.v1.Spec;
  return proto.nitric.deploy.v1.Spec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.deploy.v1.Spec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.deploy.v1.Spec}
 */
proto.nitric.deploy.v1.Spec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nitric.deploy.v1.Resource;
      reader.readMessage(value,proto.nitric.deploy.v1.Resource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.deploy.v1.Spec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.deploy.v1.Spec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.deploy.v1.Spec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.deploy.v1.Spec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nitric.deploy.v1.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Resource resources = 1;
 * @return {!Array<!proto.nitric.deploy.v1.Resource>}
 */
proto.nitric.deploy.v1.Spec.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.nitric.deploy.v1.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nitric.deploy.v1.Resource, 1));
};


/**
 * @param {!Array<!proto.nitric.deploy.v1.Resource>} value
 * @return {!proto.nitric.deploy.v1.Spec} returns this
*/
proto.nitric.deploy.v1.Spec.prototype.setResourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nitric.deploy.v1.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nitric.deploy.v1.Resource}
 */
proto.nitric.deploy.v1.Spec.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nitric.deploy.v1.Resource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.deploy.v1.Spec} returns this
 */
proto.nitric.deploy.v1.Spec.prototype.clearResourcesList = function() {
  return this.setResourcesList([]);
};


goog.object.extend(exports, proto.nitric.deploy.v1);
